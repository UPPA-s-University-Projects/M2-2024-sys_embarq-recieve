
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011198  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  080112d0  080112d0  000212d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012040  08012040  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012040  08012040  00022040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012048  08012048  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012048  08012048  00022048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801204c  0801204c  0002204c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08012050  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000196c  200000dc  0801212c  000300dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a48  0801212c  00031a48  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030106  2**0
                  CONTENTS, READONLY
 13 .debug_info   00050208  00000000  00000000  00030149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b2b6  00000000  00000000  00080351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000152ec  00000000  00000000  0008b607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029c0  00000000  00000000  000a08f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000021d3  00000000  00000000  000a32b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027345  00000000  00000000  000a548b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048c9a  00000000  00000000  000cc7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb2f9  00000000  00000000  0011546a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007488  00000000  00000000  001e0764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c9  00000000  00000000  001e7bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200000dc 	.word	0x200000dc
 8000154:	00000000 	.word	0x00000000
 8000158:	080112b8 	.word	0x080112b8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200000e0 	.word	0x200000e0
 8000174:	080112b8 	.word	0x080112b8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000be0:	f080 811b 	bcs.w	8000e1a <__udivmoddi4+0x28e>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8118 	bls.w	8000e1a <__udivmoddi4+0x28e>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c0e:	f080 8106 	bcs.w	8000e1e <__udivmoddi4+0x292>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8103 	bls.w	8000e1e <__udivmoddi4+0x292>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ec 	beq.w	8000e14 <__udivmoddi4+0x288>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f7 	bhi.w	8000e48 <__udivmoddi4+0x2bc>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 808f 	bne.w	8000d9a <__udivmoddi4+0x20e>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80ca 	bhi.w	8000e42 <__udivmoddi4+0x2b6>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80ba 	bhi.w	8000e4c <__udivmoddi4+0x2c0>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f901 	lsl.w	r9, r0, r1
 8000d02:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	fb00 5518 	mls	r5, r0, r8, r5
 8000d14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d18:	fb08 f50e 	mul.w	r5, r8, lr
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d2c:	f080 8087 	bcs.w	8000e3e <__udivmoddi4+0x2b2>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8084 	bls.w	8000e3e <__udivmoddi4+0x2b2>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d44:	fb00 4413 	mls	r4, r0, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000d5c:	d26b      	bcs.n	8000e36 <__udivmoddi4+0x2aa>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d969      	bls.n	8000e36 <__udivmoddi4+0x2aa>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d6a:	fba0 8302 	umull	r8, r3, r0, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46c6      	mov	lr, r8
 8000d76:	461d      	mov	r5, r3
 8000d78:	d355      	bcc.n	8000e26 <__udivmoddi4+0x29a>
 8000d7a:	d052      	beq.n	8000e22 <__udivmoddi4+0x296>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb9 030e 	subs.w	r3, r9, lr
 8000d82:	eb64 0405 	sbc.w	r4, r4, r5
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c3 0120 	rsb	r1, r3, #32
 8000d9e:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da2:	fa20 f201 	lsr.w	r2, r0, r1
 8000da6:	fa25 f101 	lsr.w	r1, r5, r1
 8000daa:	409d      	lsls	r5, r3
 8000dac:	432a      	orrs	r2, r5
 8000dae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dba:	fb07 1510 	mls	r5, r7, r0, r1
 8000dbe:	0c11      	lsrs	r1, r2, #16
 8000dc0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc4:	fb00 f50e 	mul.w	r5, r0, lr
 8000dc8:	428d      	cmp	r5, r1
 8000dca:	fa04 f403 	lsl.w	r4, r4, r3
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x256>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dd8:	d22f      	bcs.n	8000e3a <__udivmoddi4+0x2ae>
 8000dda:	428d      	cmp	r5, r1
 8000ddc:	d92d      	bls.n	8000e3a <__udivmoddi4+0x2ae>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	1b49      	subs	r1, r1, r5
 8000de4:	b292      	uxth	r2, r2
 8000de6:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dea:	fb07 1115 	mls	r1, r7, r5, r1
 8000dee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df2:	fb05 f10e 	mul.w	r1, r5, lr
 8000df6:	4291      	cmp	r1, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x280>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e02:	d216      	bcs.n	8000e32 <__udivmoddi4+0x2a6>
 8000e04:	4291      	cmp	r1, r2
 8000e06:	d914      	bls.n	8000e32 <__udivmoddi4+0x2a6>
 8000e08:	3d02      	subs	r5, #2
 8000e0a:	4462      	add	r2, ip
 8000e0c:	1a52      	subs	r2, r2, r1
 8000e0e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e12:	e739      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e14:	4631      	mov	r1, r6
 8000e16:	4630      	mov	r0, r6
 8000e18:	e709      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1a:	4639      	mov	r1, r7
 8000e1c:	e6e7      	b.n	8000bee <__udivmoddi4+0x62>
 8000e1e:	4610      	mov	r0, r2
 8000e20:	e6fc      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e22:	45c1      	cmp	r9, r8
 8000e24:	d2aa      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e26:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2a:	eb63 050c 	sbc.w	r5, r3, ip
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a4      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e32:	4645      	mov	r5, r8
 8000e34:	e7ea      	b.n	8000e0c <__udivmoddi4+0x280>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e795      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	e7d1      	b.n	8000de2 <__udivmoddi4+0x256>
 8000e3e:	46d0      	mov	r8, sl
 8000e40:	e77c      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e42:	3d02      	subs	r5, #2
 8000e44:	4462      	add	r2, ip
 8000e46:	e733      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e48:	4608      	mov	r0, r1
 8000e4a:	e70b      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4c:	4464      	add	r4, ip
 8000e4e:	3802      	subs	r0, #2
 8000e50:	e743      	b.n	8000cda <__udivmoddi4+0x14e>
 8000e52:	bf00      	nop

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000e5a:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <MX_ADC_Init+0x50>)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_ADC_Init+0x54>)
 8000e5e:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e64:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e66:	2300      	movs	r3, #0
 8000e68:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6c:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6e:	2204      	movs	r2, #4
 8000e70:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e72:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e74:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e76:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e7c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e80:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e82:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e84:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e8c:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000e8e:	2207      	movs	r2, #7
 8000e90:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000e92:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000e94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e98:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e9a:	f001 f9a1 	bl	80021e0 <HAL_ADC_Init>
 8000e9e:	b900      	cbnz	r0, 8000ea2 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ea0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ea2:	f000 f8fc 	bl	800109e <Error_Handler>
}
 8000ea6:	e7fb      	b.n	8000ea0 <MX_ADC_Init+0x48>
 8000ea8:	200000f8 	.word	0x200000f8
 8000eac:	40012400 	.word	0x40012400

08000eb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000eb0:	6802      	ldr	r2, [r0, #0]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_ADC_MspInit+0x28>)
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d000      	beq.n	8000eba <HAL_ADC_MspInit+0xa>
 8000eb8:	4770      	bx	lr
{
 8000eba:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ec6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ece:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ed0:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000ed2:	b002      	add	sp, #8
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40012400 	.word	0x40012400

08000edc <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000edc:	6802      	ldr	r2, [r0, #0]
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_ADC_MspDeInit+0x18>)
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d000      	beq.n	8000ee6 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000ee4:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eea:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef2:	e7f7      	b.n	8000ee4 <HAL_ADC_MspDeInit+0x8>
 8000ef4:	40012400 	.word	0x40012400

08000ef8 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000ef8:	b530      	push	{r4, r5, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	2300      	movs	r3, #0
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f06:	f7ff ffa7 	bl	8000e58 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f0a:	4816      	ldr	r0, [pc, #88]	; (8000f64 <ADC_ReadChannels+0x6c>)
 8000f0c:	f001 fdbc 	bl	8002a88 <HAL_ADCEx_Calibration_Start>
 8000f10:	b9f8      	cbnz	r0, 8000f52 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f12:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f18:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f1a:	a901      	add	r1, sp, #4
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <ADC_ReadChannels+0x6c>)
 8000f1e:	f001 faff 	bl	8002520 <HAL_ADC_ConfigChannel>
 8000f22:	b9c8      	cbnz	r0, 8000f58 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f24:	480f      	ldr	r0, [pc, #60]	; (8000f64 <ADC_ReadChannels+0x6c>)
 8000f26:	f001 fcbd 	bl	80028a4 <HAL_ADC_Start>
 8000f2a:	b9c0      	cbnz	r0, 8000f5e <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f2c:	4c0d      	ldr	r4, [pc, #52]	; (8000f64 <ADC_ReadChannels+0x6c>)
 8000f2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f32:	4620      	mov	r0, r4
 8000f34:	f001 fa92 	bl	800245c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f001 fd85 	bl	8002a48 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f001 faeb 	bl	800251a <HAL_ADC_GetValue>
 8000f44:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f46:	4620      	mov	r0, r4
 8000f48:	f001 fd28 	bl	800299c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	b005      	add	sp, #20
 8000f50:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000f52:	f000 f8a4 	bl	800109e <Error_Handler>
 8000f56:	e7dc      	b.n	8000f12 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000f58:	f000 f8a1 	bl	800109e <Error_Handler>
 8000f5c:	e7e2      	b.n	8000f24 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000f5e:	f000 f89e 	bl	800109e <Error_Handler>
 8000f62:	e7e3      	b.n	8000f2c <ADC_ReadChannels+0x34>
 8000f64:	200000f8 	.word	0x200000f8

08000f68 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <SYS_InitMeasurement+0x8>)
 8000f6a:	4a02      	ldr	r2, [pc, #8]	; (8000f74 <SYS_InitMeasurement+0xc>)
 8000f6c:	601a      	str	r2, [r3, #0]
}
 8000f6e:	4770      	bx	lr
 8000f70:	200000f8 	.word	0x200000f8
 8000f74:	40012400 	.word	0x40012400

08000f78 <SYS_GetBatteryLevel>:
{
 8000f78:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <SYS_GetBatteryLevel+0x38>)
 8000f7c:	f7ff ffbc 	bl	8000ef8 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000f80:	b1a0      	cbz	r0, 8000fac <SYS_GetBatteryLevel+0x34>
 8000f82:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <SYS_GetBatteryLevel+0x3c>)
 8000f86:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 8000f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8e:	4290      	cmp	r0, r2
 8000f90:	d007      	beq.n	8000fa2 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000f92:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000f96:	fb02 f000 	mul.w	r0, r2, r0
 8000f9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f9e:	b280      	uxth	r0, r0
 8000fa0:	e005      	b.n	8000fae <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <SYS_GetBatteryLevel+0x40>)
 8000fa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	e000      	b.n	8000fae <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8000fac:	2000      	movs	r0, #0
}
 8000fae:	bd08      	pop	{r3, pc}
 8000fb0:	b4002000 	.word	0xb4002000
 8000fb4:	1fff7500 	.word	0x1fff7500
 8000fb8:	004c08d8 	.word	0x004c08d8

08000fbc <SYS_GetTemperatureLevel>:
{
 8000fbc:	b510      	push	{r4, lr}
 8000fbe:	b082      	sub	sp, #8
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000fc0:	f7ff ffda 	bl	8000f78 <SYS_GetBatteryLevel>
 8000fc4:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000fc6:	481f      	ldr	r0, [pc, #124]	; (8001044 <SYS_GetTemperatureLevel+0x88>)
 8000fc8:	f7ff ff96 	bl	8000ef8 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <SYS_GetTemperatureLevel+0x8c>)
 8000fce:	f8b2 30c8 	ldrh.w	r3, [r2, #200]	; 0xc8
 8000fd2:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01a      	beq.n	8001010 <SYS_GetTemperatureLevel+0x54>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000fda:	fb00 f404 	mul.w	r4, r0, r4
 8000fde:	08a4      	lsrs	r4, r4, #2
 8000fe0:	491a      	ldr	r1, [pc, #104]	; (800104c <SYS_GetTemperatureLevel+0x90>)
 8000fe2:	fba1 1404 	umull	r1, r4, r1, r4
 8000fe6:	ebc2 1454 	rsb	r4, r2, r4, lsr #5
 8000fea:	2164      	movs	r1, #100	; 0x64
 8000fec:	fb01 f404 	mul.w	r4, r1, r4
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	fb94 f4f3 	sdiv	r4, r4, r3
 8000ff6:	341e      	adds	r4, #30
 8000ff8:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8000ffa:	9400      	str	r4, [sp, #0]
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <SYS_GetTemperatureLevel+0x94>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	2100      	movs	r1, #0
 8001002:	4610      	mov	r0, r2
 8001004:	f00f fb06 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
  temperatureDegreeC <<= 8;
 8001008:	0220      	lsls	r0, r4, #8
}
 800100a:	b200      	sxth	r0, r0
 800100c:	b002      	add	sp, #8
 800100e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001010:	fb04 f000 	mul.w	r0, r4, r0
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <SYS_GetTemperatureLevel+0x98>)
 8001016:	fba3 2300 	umull	r2, r3, r3, r0
 800101a:	1ac4      	subs	r4, r0, r3
 800101c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001020:	0adb      	lsrs	r3, r3, #11
 8001022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800102e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <SYS_GetTemperatureLevel+0x9c>)
 8001034:	fb82 1203 	smull	r1, r2, r2, r3
 8001038:	17db      	asrs	r3, r3, #31
 800103a:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 800103e:	331e      	adds	r3, #30
 8001040:	b21c      	sxth	r4, r3
 8001042:	e7da      	b.n	8000ffa <SYS_GetTemperatureLevel+0x3e>
 8001044:	b0001000 	.word	0xb0001000
 8001048:	1fff7500 	.word	0x1fff7500
 800104c:	09ee009f 	.word	0x09ee009f
 8001050:	08011354 	.word	0x08011354
 8001054:	00100101 	.word	0x00100101
 8001058:	68db8bad 	.word	0x68db8bad

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800105c:	b500      	push	{lr}
 800105e:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001066:	f042 0204 	orr.w	r2, r2, #4
 800106a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800106c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800106e:	f002 0204 	and.w	r2, r2, #4
 8001072:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001074:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001078:	f042 0201 	orr.w	r2, r2, #1
 800107c:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800107e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001086:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2102      	movs	r1, #2
 800108c:	200f      	movs	r0, #15
 800108e:	f001 fd5d 	bl	8002b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001092:	200f      	movs	r0, #15
 8001094:	f001 fd92 	bl	8002bbc <HAL_NVIC_EnableIRQ>

}
 8001098:	b003      	add	sp, #12
 800109a:	f85d fb04 	ldr.w	pc, [sp], #4

0800109e <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x2>

080010a2 <SystemClock_Config>:
{
 80010a2:	b510      	push	{r4, lr}
 80010a4:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	2248      	movs	r2, #72	; 0x48
 80010a8:	2100      	movs	r1, #0
 80010aa:	a808      	add	r0, sp, #32
 80010ac:	f010 f858 	bl	8011160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	2400      	movs	r4, #0
 80010b2:	9402      	str	r4, [sp, #8]
 80010b4:	9403      	str	r4, [sp, #12]
 80010b6:	9404      	str	r4, [sp, #16]
 80010b8:	9405      	str	r4, [sp, #20]
 80010ba:	9406      	str	r4, [sp, #24]
 80010bc:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80010be:	f002 f989 	bl	80033d4 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80010c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80010ca:	f023 0318 	bic.w	r3, r3, #24
 80010ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010d6:	6813      	ldr	r3, [r2, #0]
 80010d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010ec:	2324      	movs	r3, #36	; 0x24
 80010ee:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010f0:	2381      	movs	r3, #129	; 0x81
 80010f2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010f8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80010fa:	23b0      	movs	r3, #176	; 0xb0
 80010fc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010fe:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	a808      	add	r0, sp, #32
 8001102:	f002 fb01 	bl	8003708 <HAL_RCC_OscConfig>
 8001106:	b970      	cbnz	r0, 8001126 <SystemClock_Config+0x84>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001108:	234f      	movs	r3, #79	; 0x4f
 800110a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800110c:	2300      	movs	r3, #0
 800110e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001112:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001116:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	2102      	movs	r1, #2
 800111a:	a802      	add	r0, sp, #8
 800111c:	f002 fe30 	bl	8003d80 <HAL_RCC_ClockConfig>
 8001120:	b918      	cbnz	r0, 800112a <SystemClock_Config+0x88>
}
 8001122:	b01a      	add	sp, #104	; 0x68
 8001124:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001126:	f7ff ffba 	bl	800109e <Error_Handler>
    Error_Handler();
 800112a:	f7ff ffb8 	bl	800109e <Error_Handler>

0800112e <main>:
{
 800112e:	b508      	push	{r3, lr}
  HAL_Init();
 8001130:	f000 fffc 	bl	800212c <HAL_Init>
  SystemClock_Config();
 8001134:	f7ff ffb5 	bl	80010a2 <SystemClock_Config>
  MX_LoRaWAN_Init();
 8001138:	f000 fc8c 	bl	8001a54 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 800113c:	f000 fc90 	bl	8001a60 <MX_LoRaWAN_Process>
  while (1)
 8001140:	e7fc      	b.n	800113c <main+0xe>
	...

08001144 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001144:	b500      	push	{lr}
 8001146:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001148:	222c      	movs	r2, #44	; 0x2c
 800114a:	2100      	movs	r1, #0
 800114c:	a801      	add	r0, sp, #4
 800114e:	f010 f807 	bl	8011160 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001152:	4819      	ldr	r0, [pc, #100]	; (80011b8 <MX_RTC_Init+0x74>)
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_RTC_Init+0x78>)
 8001156:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001158:	231f      	movs	r3, #31
 800115a:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001160:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001162:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001168:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800116a:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800116c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001170:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001172:	f003 f947 	bl	8004404 <HAL_RTC_Init>
 8001176:	b9a8      	cbnz	r0, 80011a4 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <MX_RTC_Init+0x74>)
 800117a:	f003 fa7d 	bl	8004678 <HAL_RTCEx_SetSSRU_IT>
 800117e:	b9a0      	cbnz	r0, 80011aa <MX_RTC_Init+0x66>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001180:	2200      	movs	r2, #0
 8001182:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001184:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001186:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001188:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800118c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001194:	a901      	add	r1, sp, #4
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <MX_RTC_Init+0x74>)
 8001198:	f003 f992 	bl	80044c0 <HAL_RTC_SetAlarm_IT>
 800119c:	b940      	cbnz	r0, 80011b0 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800119e:	b00d      	add	sp, #52	; 0x34
 80011a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011a4:	f7ff ff7b 	bl	800109e <Error_Handler>
 80011a8:	e7e6      	b.n	8001178 <MX_RTC_Init+0x34>
    Error_Handler();
 80011aa:	f7ff ff78 	bl	800109e <Error_Handler>
 80011ae:	e7e7      	b.n	8001180 <MX_RTC_Init+0x3c>
    Error_Handler();
 80011b0:	f7ff ff75 	bl	800109e <Error_Handler>
}
 80011b4:	e7f3      	b.n	800119e <MX_RTC_Init+0x5a>
 80011b6:	bf00      	nop
 80011b8:	2000015c 	.word	0x2000015c
 80011bc:	40002800 	.word	0x40002800

080011c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011c0:	b510      	push	{r4, lr}
 80011c2:	b090      	sub	sp, #64	; 0x40
 80011c4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c6:	2238      	movs	r2, #56	; 0x38
 80011c8:	2100      	movs	r1, #0
 80011ca:	a802      	add	r0, sp, #8
 80011cc:	f00f ffc8 	bl	8011160 <memset>
  if(rtcHandle->Instance==RTC)
 80011d0:	6822      	ldr	r2, [r4, #0]
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_RTC_MspInit+0x7c>)
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011d8:	b010      	add	sp, #64	; 0x40
 80011da:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e6:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e8:	a802      	add	r0, sp, #8
 80011ea:	f002 fefb 	bl	8003fe4 <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	bb08      	cbnz	r0, 8001234 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80011f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001200:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001202:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001206:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001210:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	4611      	mov	r1, r2
 8001216:	2002      	movs	r0, #2
 8001218:	f001 fc98 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800121c:	2002      	movs	r0, #2
 800121e:	f001 fccd 	bl	8002bbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	4611      	mov	r1, r2
 8001226:	202a      	movs	r0, #42	; 0x2a
 8001228:	f001 fc90 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800122c:	202a      	movs	r0, #42	; 0x2a
 800122e:	f001 fcc5 	bl	8002bbc <HAL_NVIC_EnableIRQ>
}
 8001232:	e7d1      	b.n	80011d8 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001234:	f7ff ff33 	bl	800109e <Error_Handler>
 8001238:	e7da      	b.n	80011f0 <HAL_RTC_MspInit+0x30>
 800123a:	bf00      	nop
 800123c:	40002800 	.word	0x40002800

08001240 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001240:	4770      	bx	lr

08001242 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001242:	4770      	bx	lr

08001244 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001244:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001246:	f000 ff93 	bl	8002170 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800124a:	2001      	movs	r0, #1
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <PWR_EnterStopMode+0x14>)
 800124e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001252:	f002 f923 	bl	800349c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001256:	bd08      	pop	{r3, pc}
 8001258:	58000400 	.word	0x58000400

0800125c <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 800125c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800125e:	f000 ff8e 	bl	800217e <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001262:	bd08      	pop	{r3, pc}

08001264 <PWR_ExitStopMode>:
{
 8001264:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001266:	f000 ff8a 	bl	800217e <HAL_ResumeTick>
  vcom_Resume();
 800126a:	f000 fbc1 	bl	80019f0 <vcom_Resume>
}
 800126e:	bd08      	pop	{r3, pc}

08001270 <PWR_EnterSleepMode>:
{
 8001270:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001272:	f000 ff7d 	bl	8002170 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001276:	2101      	movs	r1, #1
 8001278:	2000      	movs	r0, #0
 800127a:	f002 f8b3 	bl	80033e4 <HAL_PWR_EnterSLEEPMode>
}
 800127e:	bd08      	pop	{r3, pc}

08001280 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001280:	4770      	bx	lr

08001282 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001282:	4770      	bx	lr

08001284 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <HardFault_Handler>

08001286 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <MemManage_Handler>

08001288 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <BusFault_Handler>

0800128a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <UsageFault_Handler>

0800128c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128c:	4770      	bx	lr

0800128e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	4770      	bx	lr

08001290 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001290:	4770      	bx	lr

08001292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001292:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 ff60 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bd08      	pop	{r3, pc}
	...

0800129c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800129c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800129e:	4802      	ldr	r0, [pc, #8]	; (80012a8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 80012a0:	f003 fa16 	bl	80046d0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80012a4:	bd08      	pop	{r3, pc}
 80012a6:	bf00      	nop
 80012a8:	2000015c 	.word	0x2000015c

080012ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012b2:	f002 f881 	bl	80033b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b6:	bd08      	pop	{r3, pc}

080012b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80012b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012ba:	4802      	ldr	r0, [pc, #8]	; (80012c4 <DMA1_Channel5_IRQHandler+0xc>)
 80012bc:	f001 fe9c 	bl	8002ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80012c0:	bd08      	pop	{r3, pc}
 80012c2:	bf00      	nop
 80012c4:	200001a8 	.word	0x200001a8

080012c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80012c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012ca:	4802      	ldr	r0, [pc, #8]	; (80012d4 <USART1_IRQHandler+0xc>)
 80012cc:	f003 feba 	bl	8005044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012d0:	bd08      	pop	{r3, pc}
 80012d2:	bf00      	nop
 80012d4:	20000208 	.word	0x20000208

080012d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80012d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <RTC_Alarm_IRQHandler+0xc>)
 80012dc:	f003 f80c 	bl	80042f8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80012e0:	bd08      	pop	{r3, pc}
 80012e2:	bf00      	nop
 80012e4:	2000015c 	.word	0x2000015c

080012e8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80012e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80012ea:	4802      	ldr	r0, [pc, #8]	; (80012f4 <SUBGHZ_Radio_IRQHandler+0xc>)
 80012ec:	f003 fc9a 	bl	8004c24 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80012f0:	bd08      	pop	{r3, pc}
 80012f2:	bf00      	nop
 80012f4:	20000194 	.word	0x20000194

080012f8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80012f8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_SUBGHZ_Init+0x18>)
 80012fc:	2308      	movs	r3, #8
 80012fe:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001300:	f003 fa1c 	bl	800473c <HAL_SUBGHZ_Init>
 8001304:	b900      	cbnz	r0, 8001308 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001306:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001308:	f7ff fec9 	bl	800109e <Error_Handler>
}
 800130c:	e7fb      	b.n	8001306 <MX_SUBGHZ_Init+0xe>
 800130e:	bf00      	nop
 8001310:	20000194 	.word	0x20000194

08001314 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001314:	b500      	push	{lr}
 8001316:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800132c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	4611      	mov	r1, r2
 8001332:	2032      	movs	r0, #50	; 0x32
 8001334:	f001 fc0a 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001338:	2032      	movs	r0, #50	; 0x32
 800133a:	f001 fc3f 	bl	8002bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800133e:	b003      	add	sp, #12
 8001340:	f85d fb04 	ldr.w	pc, [sp], #4

08001344 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001344:	b40c      	push	{r2, r3}
 8001346:	b500      	push	{lr}
 8001348:	b083      	sub	sp, #12
 800134a:	ab04      	add	r3, sp, #16
 800134c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001350:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001352:	f00f fe41 	bl	8010fd8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001356:	b003      	add	sp, #12
 8001358:	f85d eb04 	ldr.w	lr, [sp], #4
 800135c:	b002      	add	sp, #8
 800135e:	4770      	bx	lr

08001360 <TimestampNow>:
{
 8001360:	b530      	push	{r4, r5, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	4604      	mov	r4, r0
 8001366:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001368:	a802      	add	r0, sp, #8
 800136a:	f00f fba9 	bl	8010ac0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800136e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	9b02      	ldr	r3, [sp, #8]
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <TimestampNow+0x2c>)
 8001378:	2110      	movs	r1, #16
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff ffe2 	bl	8001344 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001380:	4620      	mov	r0, r4
 8001382:	f7fe fef9 	bl	8000178 <strlen>
 8001386:	8028      	strh	r0, [r5, #0]
}
 8001388:	b005      	add	sp, #20
 800138a:	bd30      	pop	{r4, r5, pc}
 800138c:	08011378 	.word	0x08011378

08001390 <SystemApp_Init>:
{
 8001390:	b508      	push	{r3, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001396:	6893      	ldr	r3, [r2, #8]
 8001398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800139c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800139e:	f00f fc13 	bl	8010bc8 <UTIL_TIMER_Init>
  DBG_Disable();
 80013a2:	f000 f8bc 	bl	800151e <DBG_Disable>
  DBG_ProbesInit();
 80013a6:	f000 f8dc 	bl	8001562 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 80013aa:	f00f f8bf 	bl	801052c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <SystemApp_Init+0x40>)
 80013b0:	f00f f8d6 	bl	8010560 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80013b4:	2002      	movs	r0, #2
 80013b6:	f00f f8d9 	bl	801056c <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80013ba:	f7ff fdd5 	bl	8000f68 <SYS_InitMeasurement>
  EnvSensors_Init();
 80013be:	f000 f8e7 	bl	8001590 <EnvSensors_Init>
  UTIL_LPM_Init();
 80013c2:	f00f f9e3 	bl	801078c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80013c6:	2101      	movs	r1, #1
 80013c8:	4608      	mov	r0, r1
 80013ca:	f00f f9ff 	bl	80107cc <UTIL_LPM_SetOffMode>
}
 80013ce:	bd08      	pop	{r3, pc}
 80013d0:	08001361 	.word	0x08001361

080013d4 <UTIL_SEQ_Idle>:
{
 80013d4:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80013d6:	f00f fa0f 	bl	80107f8 <UTIL_LPM_EnterLowPower>
}
 80013da:	bd08      	pop	{r3, pc}

080013dc <GetBatteryLevel>:
{
 80013dc:	b510      	push	{r4, lr}
 80013de:	b082      	sub	sp, #8
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80013e0:	f7ff fdca 	bl	8000f78 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80013e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013e8:	4298      	cmp	r0, r3
 80013ea:	d80d      	bhi.n	8001408 <GetBatteryLevel+0x2c>
  else if (batteryLevelmV < VDD_MIN)
 80013ec:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80013f0:	d315      	bcc.n	800141e <GetBatteryLevel+0x42>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80013f2:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80013f6:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80013fa:	0044      	lsls	r4, r0, #1
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <GetBatteryLevel+0x48>)
 80013fe:	fba3 3404 	umull	r3, r4, r3, r4
 8001402:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 8001406:	e000      	b.n	800140a <GetBatteryLevel+0x2e>
    batteryLevel = LORAWAN_MAX_BAT;
 8001408:	24fe      	movs	r4, #254	; 0xfe
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 800140a:	9400      	str	r4, [sp, #0]
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <GetBatteryLevel+0x4c>)
 800140e:	2201      	movs	r2, #1
 8001410:	2100      	movs	r1, #0
 8001412:	2002      	movs	r0, #2
 8001414:	f00f f8fe 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 8001418:	4620      	mov	r0, r4
 800141a:	b002      	add	sp, #8
 800141c:	bd10      	pop	{r4, pc}
    batteryLevel = 0;
 800141e:	2400      	movs	r4, #0
 8001420:	e7f3      	b.n	800140a <GetBatteryLevel+0x2e>
 8001422:	bf00      	nop
 8001424:	1b4e81b5 	.word	0x1b4e81b5
 8001428:	08011384 	.word	0x08011384

0800142c <GetTemperatureLevel>:
{
 800142c:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800142e:	f7ff fdc5 	bl	8000fbc <SYS_GetTemperatureLevel>
 8001432:	4603      	mov	r3, r0
 8001434:	2800      	cmp	r0, #0
 8001436:	db02      	blt.n	800143e <GetTemperatureLevel+0x12>
}
 8001438:	f3c3 200f 	ubfx	r0, r3, #8, #16
 800143c:	bd08      	pop	{r3, pc}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800143e:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 8001442:	e7f9      	b.n	8001438 <GetTemperatureLevel+0xc>

08001444 <GetUniqueId>:
{
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <GetUniqueId+0x68>)
 800144a:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800144e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001452:	d013      	beq.n	800147c <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001454:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001456:	0a1a      	lsrs	r2, r3, #8
 8001458:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 800145a:	0c1a      	lsrs	r2, r3, #16
 800145c:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 800145e:	0e1b      	lsrs	r3, r3, #24
 8001460:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <GetUniqueId+0x68>)
 8001464:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001468:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800146a:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800146e:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001470:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001472:	0c1a      	lsrs	r2, r3, #16
 8001474:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001476:	0e1b      	lsrs	r3, r3, #24
 8001478:	7003      	strb	r3, [r0, #0]
}
 800147a:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800147c:	f000 fe86 	bl	800218c <HAL_GetUIDw0>
 8001480:	4605      	mov	r5, r0
 8001482:	f000 fe8f 	bl	80021a4 <HAL_GetUIDw2>
 8001486:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001488:	f000 fe86 	bl	8002198 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 800148c:	0e2b      	lsrs	r3, r5, #24
 800148e:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001490:	0c2b      	lsrs	r3, r5, #16
 8001492:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001494:	0a2b      	lsrs	r3, r5, #8
 8001496:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001498:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800149a:	0e03      	lsrs	r3, r0, #24
 800149c:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 800149e:	0c03      	lsrs	r3, r0, #16
 80014a0:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 80014a2:	0a03      	lsrs	r3, r0, #8
 80014a4:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 80014a6:	7020      	strb	r0, [r4, #0]
 80014a8:	e7e7      	b.n	800147a <GetUniqueId+0x36>
 80014aa:	bf00      	nop
 80014ac:	1fff7000 	.word	0x1fff7000

080014b0 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <GetDevAddr+0x24>)
 80014b2:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 80014b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80014ba:	d000      	beq.n	80014be <GetDevAddr+0xe>
}
 80014bc:	4770      	bx	lr
{
 80014be:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80014c0:	f000 fe64 	bl	800218c <HAL_GetUIDw0>
 80014c4:	4604      	mov	r4, r0
 80014c6:	f000 fe67 	bl	8002198 <HAL_GetUIDw1>
 80014ca:	4044      	eors	r4, r0
 80014cc:	f000 fe6a 	bl	80021a4 <HAL_GetUIDw2>
 80014d0:	4060      	eors	r0, r4
}
 80014d2:	bd10      	pop	{r4, pc}
 80014d4:	1fff7000 	.word	0x1fff7000

080014d8 <UTIL_ADV_TRACE_PreSendHook>:
{
 80014d8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80014da:	2101      	movs	r1, #1
 80014dc:	2002      	movs	r0, #2
 80014de:	f00f f95f 	bl	80107a0 <UTIL_LPM_SetStopMode>
}
 80014e2:	bd08      	pop	{r3, pc}

080014e4 <UTIL_ADV_TRACE_PostSendHook>:
{
 80014e4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80014e6:	2100      	movs	r1, #0
 80014e8:	2002      	movs	r0, #2
 80014ea:	f00f f959 	bl	80107a0 <UTIL_LPM_SetStopMode>
}
 80014ee:	bd08      	pop	{r3, pc}

080014f0 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80014f0:	2000      	movs	r0, #0
 80014f2:	4770      	bx	lr

080014f4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80014f4:	b508      	push	{r3, lr}
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 80014f6:	f000 f869 	bl	80015cc <TIMER_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80014fa:	bd08      	pop	{r3, pc}

080014fc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80014fc:	b500      	push	{lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001502:	9801      	ldr	r0, [sp, #4]
 8001504:	f000 f93a 	bl	800177c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001508:	b003      	add	sp, #12
 800150a:	f85d fb04 	ldr.w	pc, [sp], #4

0800150e <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 800150e:	b508      	push	{r3, lr}
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 8001510:	f000 fe4e 	bl	80021b0 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8001514:	f000 fe54 	bl	80021c0 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001518:	f000 fe5a 	bl	80021d0 <HAL_DBGMCU_DisableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 800151c:	bd08      	pop	{r3, pc}

0800151e <DBG_Disable>:
{
 800151e:	b510      	push	{r4, lr}
 8001520:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	2400      	movs	r4, #0
 8001524:	9401      	str	r4, [sp, #4]
 8001526:	9402      	str	r4, [sp, #8]
 8001528:	9403      	str	r4, [sp, #12]
 800152a:	9404      	str	r4, [sp, #16]
 800152c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 800152e:	2303      	movs	r3, #3
 8001530:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8001532:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001536:	9301      	str	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800154c:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	a901      	add	r1, sp, #4
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f001 fdd2 	bl	80030fc <HAL_GPIO_Init>
  DBG_ConfigForLpm(0);
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff ffd8 	bl	800150e <DBG_ConfigForLpm>
}
 800155e:	b006      	add	sp, #24
 8001560:	bd10      	pop	{r4, pc}

08001562 <DBG_ProbesInit>:
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001562:	4770      	bx	lr

08001564 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <EnvSensors_Read+0x18>)
 8001566:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <EnvSensors_Read+0x1c>)
 800156a:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <EnvSensors_Read+0x20>)
 800156e:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <EnvSensors_Read+0x24>)
 8001572:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <EnvSensors_Read+0x28>)
 8001576:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001578:	2000      	movs	r0, #0
 800157a:	4770      	bx	lr
 800157c:	42480000 	.word	0x42480000
 8001580:	41900000 	.word	0x41900000
 8001584:	447a0000 	.word	0x447a0000
 8001588:	003e090d 	.word	0x003e090d
 800158c:	000503ab 	.word	0x000503ab

08001590 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 8001590:	2000      	movs	r0, #0
 8001592:	4770      	bx	lr

08001594 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <TIMER_IF_SetTimerContext+0xc>)
 8001596:	6898      	ldr	r0, [r3, #8]
static inline uint32_t GetTimerTicks(void)
{
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001598:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800159a:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <TIMER_IF_SetTimerContext+0x10>)
 800159c:	6018      	str	r0, [r3, #0]
}
 800159e:	4770      	bx	lr
 80015a0:	40002800 	.word	0x40002800
 80015a4:	200001a4 	.word	0x200001a4

080015a8 <TIMER_IF_GetTimerContext>:
}
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <TIMER_IF_GetTimerContext+0x8>)
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200001a4 	.word	0x200001a4

080015b4 <TIMER_IF_GetTimerElapsedTime>:
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <TIMER_IF_GetTimerElapsedTime+0x10>)
 80015b6:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80015b8:	43db      	mvns	r3, r3
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80015ba:	4a03      	ldr	r2, [pc, #12]	; (80015c8 <TIMER_IF_GetTimerElapsedTime+0x14>)
 80015bc:	6810      	ldr	r0, [r2, #0]
}
 80015be:	1a18      	subs	r0, r3, r0
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40002800 	.word	0x40002800
 80015c8:	200001a4 	.word	0x200001a4

080015cc <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <TIMER_IF_GetTimerValue+0x14>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b11b      	cbz	r3, 80015da <TIMER_IF_GetTimerValue+0xe>
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <TIMER_IF_GetTimerValue+0x18>)
 80015d4:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80015d6:	43c0      	mvns	r0, r0
 80015d8:	4770      	bx	lr
  uint32_t ret = 0;
 80015da:	2000      	movs	r0, #0
}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200001a0 	.word	0x200001a0
 80015e4:	40002800 	.word	0x40002800

080015e8 <TIMER_IF_GetMinimumTimeout>:
}
 80015e8:	2003      	movs	r0, #3
 80015ea:	4770      	bx	lr

080015ec <TIMER_IF_Convert_ms2Tick>:
{
 80015ec:	b508      	push	{r3, lr}
 80015ee:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80015f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f4:	2300      	movs	r3, #0
 80015f6:	0280      	lsls	r0, r0, #10
 80015f8:	0d89      	lsrs	r1, r1, #22
 80015fa:	f7ff faaf 	bl	8000b5c <__aeabi_uldivmod>
}
 80015fe:	bd08      	pop	{r3, pc}

08001600 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001600:	0ec2      	lsrs	r2, r0, #27
 8001602:	0143      	lsls	r3, r0, #5
 8001604:	1a1b      	subs	r3, r3, r0
 8001606:	f162 0200 	sbc.w	r2, r2, #0
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	181b      	adds	r3, r3, r0
 8001614:	f142 0000 	adc.w	r0, r2, #0
 8001618:	00c0      	lsls	r0, r0, #3
 800161a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800161e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001622:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001626:	4770      	bx	lr

08001628 <TIMER_IF_StopTimer>:
{
 8001628:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <TIMER_IF_StopTimer+0x20>)
 800162c:	2201      	movs	r2, #1
 800162e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001630:	4c06      	ldr	r4, [pc, #24]	; (800164c <TIMER_IF_StopTimer+0x24>)
 8001632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001636:	4620      	mov	r0, r4
 8001638:	f002 fe1e 	bl	8004278 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001640:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001642:	2000      	movs	r0, #0
 8001644:	bd10      	pop	{r4, pc}
 8001646:	bf00      	nop
 8001648:	40002800 	.word	0x40002800
 800164c:	2000015c 	.word	0x2000015c

08001650 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001650:	b508      	push	{r3, lr}
 8001652:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001654:	2102      	movs	r1, #2
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001658:	f003 f84f 	bl	80046fa <HAL_RTCEx_BKUPWrite>
}
 800165c:	bd08      	pop	{r3, pc}
 800165e:	bf00      	nop
 8001660:	2000015c 	.word	0x2000015c

08001664 <TIMER_IF_Init>:
{
 8001664:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <TIMER_IF_Init+0x40>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b10b      	cbz	r3, 8001670 <TIMER_IF_Init+0xc>
}
 800166c:	2000      	movs	r0, #0
 800166e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001670:	4c0d      	ldr	r4, [pc, #52]	; (80016a8 <TIMER_IF_Init+0x44>)
 8001672:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001676:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001678:	f7ff fd64 	bl	8001144 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 800167c:	f7ff ffd4 	bl	8001628 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001684:	4620      	mov	r0, r4
 8001686:	f002 fdf7 	bl	8004278 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800168a:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800168c:	4620      	mov	r0, r4
 800168e:	f002 ffd3 	bl	8004638 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff ffdc 	bl	8001650 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001698:	f7ff ff7c 	bl	8001594 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 800169c:	4b01      	ldr	r3, [pc, #4]	; (80016a4 <TIMER_IF_Init+0x40>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e7e3      	b.n	800166c <TIMER_IF_Init+0x8>
 80016a4:	200001a0 	.word	0x200001a0
 80016a8:	2000015c 	.word	0x2000015c

080016ac <TIMER_IF_BkUp_Write_Seconds>:
{
 80016ac:	b508      	push	{r3, lr}
 80016ae:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80016b0:	2100      	movs	r1, #0
 80016b2:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80016b4:	f003 f821 	bl	80046fa <HAL_RTCEx_BKUPWrite>
}
 80016b8:	bd08      	pop	{r3, pc}
 80016ba:	bf00      	nop
 80016bc:	2000015c 	.word	0x2000015c

080016c0 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80016c0:	b508      	push	{r3, lr}
 80016c2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80016c4:	2101      	movs	r1, #1
 80016c6:	4802      	ldr	r0, [pc, #8]	; (80016d0 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80016c8:	f003 f817 	bl	80046fa <HAL_RTCEx_BKUPWrite>
}
 80016cc:	bd08      	pop	{r3, pc}
 80016ce:	bf00      	nop
 80016d0:	2000015c 	.word	0x2000015c

080016d4 <TIMER_IF_StartTimer>:
{
 80016d4:	b510      	push	{r4, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80016da:	222c      	movs	r2, #44	; 0x2c
 80016dc:	2100      	movs	r1, #0
 80016de:	a801      	add	r0, sp, #4
 80016e0:	f00f fd3e 	bl	8011160 <memset>
  TIMER_IF_StopTimer();
 80016e4:	f7ff ffa0 	bl	8001628 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <TIMER_IF_StartTimer+0x48>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80016ee:	2300      	movs	r3, #0
 80016f0:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80016f2:	43e4      	mvns	r4, r4
 80016f4:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016f6:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80016f8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016fc:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80016fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001702:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001704:	2201      	movs	r2, #1
 8001706:	a901      	add	r1, sp, #4
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <TIMER_IF_StartTimer+0x4c>)
 800170a:	f002 fed9 	bl	80044c0 <HAL_RTC_SetAlarm_IT>
 800170e:	b910      	cbnz	r0, 8001716 <TIMER_IF_StartTimer+0x42>
}
 8001710:	2000      	movs	r0, #0
 8001712:	b00c      	add	sp, #48	; 0x30
 8001714:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001716:	f7ff fcc2 	bl	800109e <Error_Handler>
 800171a:	e7f9      	b.n	8001710 <TIMER_IF_StartTimer+0x3c>
 800171c:	200001a4 	.word	0x200001a4
 8001720:	2000015c 	.word	0x2000015c

08001724 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001724:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001726:	2102      	movs	r1, #2
 8001728:	4801      	ldr	r0, [pc, #4]	; (8001730 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800172a:	f002 ffed 	bl	8004708 <HAL_RTCEx_BKUPRead>
}
 800172e:	bd08      	pop	{r3, pc}
 8001730:	2000015c 	.word	0x2000015c

08001734 <TIMER_IF_GetTime>:
{
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4605      	mov	r5, r0
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <TIMER_IF_GetTime+0x24>)
 800173a:	689c      	ldr	r4, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800173c:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800173e:	f7ff fff1 	bl	8001724 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001742:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001744:	0aa4      	lsrs	r4, r4, #10
 8001746:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800174a:	f3c3 0009 	ubfx	r0, r3, #0, #10
 800174e:	f7ff ff57 	bl	8001600 <TIMER_IF_Convert_Tick2ms>
 8001752:	8028      	strh	r0, [r5, #0]
}
 8001754:	4620      	mov	r0, r4
 8001756:	bd38      	pop	{r3, r4, r5, pc}
 8001758:	40002800 	.word	0x40002800

0800175c <TIMER_IF_BkUp_Read_Seconds>:
{
 800175c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800175e:	2100      	movs	r1, #0
 8001760:	4801      	ldr	r0, [pc, #4]	; (8001768 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001762:	f002 ffd1 	bl	8004708 <HAL_RTCEx_BKUPRead>
}
 8001766:	bd08      	pop	{r3, pc}
 8001768:	2000015c 	.word	0x2000015c

0800176c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 800176c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800176e:	2101      	movs	r1, #1
 8001770:	4801      	ldr	r0, [pc, #4]	; (8001778 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001772:	f002 ffc9 	bl	8004708 <HAL_RTCEx_BKUPRead>
}
 8001776:	bd08      	pop	{r3, pc}
 8001778:	2000015c 	.word	0x2000015c

0800177c <TIMER_IF_DelayMs>:
{
 800177c:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800177e:	f7ff ff35 	bl	80015ec <TIMER_IF_Convert_ms2Tick>
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <TIMER_IF_DelayMs+0x20>)
 8001784:	689a      	ldr	r2, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001786:	43d2      	mvns	r2, r2
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001788:	e000      	b.n	800178c <TIMER_IF_DelayMs+0x10>
    __NOP();
 800178a:	bf00      	nop
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <TIMER_IF_DelayMs+0x20>)
 800178e:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001790:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	4283      	cmp	r3, r0
 8001796:	d3f8      	bcc.n	800178a <TIMER_IF_DelayMs+0xe>
}
 8001798:	bd08      	pop	{r3, pc}
 800179a:	bf00      	nop
 800179c:	40002800 	.word	0x40002800

080017a0 <HAL_RTC_AlarmAEventCallback>:
{
 80017a0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80017a2:	f00f fb35 	bl	8010e10 <UTIL_TIMER_IRQ_Handler>
}
 80017a6:	bd08      	pop	{r3, pc}

080017a8 <HAL_RTCEx_SSRUEventCallback>:
{
 80017a8:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80017aa:	f7ff ffbb 	bl	8001724 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80017ae:	3001      	adds	r0, #1
 80017b0:	f7ff ff4e 	bl	8001650 <TIMER_IF_BkUp_Write_MSBticks>
}
 80017b4:	bd08      	pop	{r3, pc}
	...

080017b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017b8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80017ba:	4817      	ldr	r0, [pc, #92]	; (8001818 <MX_USART1_UART_Init+0x60>)
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_USART1_UART_Init+0x64>)
 80017be:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = USART_BAUDRATE;
 80017c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80017c4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	2300      	movs	r3, #0
 80017c8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017cc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ce:	220c      	movs	r2, #12
 80017d0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d8:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017da:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017dc:	f004 fa8f 	bl	8005cfe <HAL_UART_Init>
 80017e0:	b970      	cbnz	r0, 8001800 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <MX_USART1_UART_Init+0x60>)
 80017e6:	f004 fc3c 	bl	8006062 <HAL_UARTEx_SetTxFifoThreshold>
 80017ea:	b960      	cbnz	r0, 8001806 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	480a      	ldr	r0, [pc, #40]	; (8001818 <MX_USART1_UART_Init+0x60>)
 80017f0:	f004 fc5c 	bl	80060ac <HAL_UARTEx_SetRxFifoThreshold>
 80017f4:	b950      	cbnz	r0, 800180c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <MX_USART1_UART_Init+0x60>)
 80017f8:	f004 fc0f 	bl	800601a <HAL_UARTEx_EnableFifoMode>
 80017fc:	b948      	cbnz	r0, 8001812 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
  }

}
 80017fe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001800:	f7ff fc4d 	bl	800109e <Error_Handler>
 8001804:	e7ed      	b.n	80017e2 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8001806:	f7ff fc4a 	bl	800109e <Error_Handler>
 800180a:	e7ef      	b.n	80017ec <MX_USART1_UART_Init+0x34>
    Error_Handler();
 800180c:	f7ff fc47 	bl	800109e <Error_Handler>
 8001810:	e7f1      	b.n	80017f6 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8001812:	f7ff fc44 	bl	800109e <Error_Handler>
}
 8001816:	e7f2      	b.n	80017fe <MX_USART1_UART_Init+0x46>
 8001818:	20000208 	.word	0x20000208
 800181c:	40013800 	.word	0x40013800

08001820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001820:	b530      	push	{r4, r5, lr}
 8001822:	b097      	sub	sp, #92	; 0x5c
 8001824:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	2100      	movs	r1, #0
 8001828:	9111      	str	r1, [sp, #68]	; 0x44
 800182a:	9112      	str	r1, [sp, #72]	; 0x48
 800182c:	9113      	str	r1, [sp, #76]	; 0x4c
 800182e:	9114      	str	r1, [sp, #80]	; 0x50
 8001830:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	a803      	add	r0, sp, #12
 8001836:	f00f fc93 	bl	8011160 <memset>
  if(uartHandle->Instance==USART1)
 800183a:	6822      	ldr	r2, [r4, #0]
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_UART_MspInit+0xc4>)
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001842:	b017      	add	sp, #92	; 0x5c
 8001844:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001846:	2301      	movs	r3, #1
 8001848:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800184a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800184e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001850:	a803      	add	r0, sp, #12
 8001852:	f002 fbc7 	bl	8003fe4 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	2800      	cmp	r0, #0
 8001858:	d13e      	bne.n	80018d8 <HAL_UART_MspInit+0xb8>
  SET_BIT(RCC->APB2ENR, Periphs);
 800185a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001860:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001864:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001866:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001868:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800186c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800186e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001870:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001872:	f042 0202 	orr.w	r2, r2, #2
 8001876:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001880:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001882:	23c0      	movs	r3, #192	; 0xc0
 8001884:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2500      	movs	r5, #0
 800188c:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001892:	2307      	movs	r3, #7
 8001894:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	a911      	add	r1, sp, #68	; 0x44
 8001898:	4813      	ldr	r0, [pc, #76]	; (80018e8 <HAL_UART_MspInit+0xc8>)
 800189a:	f001 fc2f 	bl	80030fc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel5;
 800189e:	4813      	ldr	r0, [pc, #76]	; (80018ec <HAL_UART_MspInit+0xcc>)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_UART_MspInit+0xd0>)
 80018a2:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80018a4:	2312      	movs	r3, #18
 80018a6:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018a8:	2310      	movs	r3, #16
 80018aa:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ac:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b2:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b4:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80018b6:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018b8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018ba:	f001 fa0f 	bl	8002cdc <HAL_DMA_Init>
 80018be:	b970      	cbnz	r0, 80018de <HAL_UART_MspInit+0xbe>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_UART_MspInit+0xcc>)
 80018c2:	67a3      	str	r3, [r4, #120]	; 0x78
 80018c4:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2102      	movs	r1, #2
 80018ca:	2024      	movs	r0, #36	; 0x24
 80018cc:	f001 f93e 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018d0:	2024      	movs	r0, #36	; 0x24
 80018d2:	f001 f973 	bl	8002bbc <HAL_NVIC_EnableIRQ>
}
 80018d6:	e7b4      	b.n	8001842 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80018d8:	f7ff fbe1 	bl	800109e <Error_Handler>
 80018dc:	e7bd      	b.n	800185a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80018de:	f7ff fbde 	bl	800109e <Error_Handler>
 80018e2:	e7ed      	b.n	80018c0 <HAL_UART_MspInit+0xa0>
 80018e4:	40013800 	.word	0x40013800
 80018e8:	48000400 	.word	0x48000400
 80018ec:	200001a8 	.word	0x200001a8
 80018f0:	40020058 	.word	0x40020058

080018f4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 80018f4:	6802      	ldr	r2, [r0, #0]
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_UART_MspDeInit+0x30>)
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d000      	beq.n	80018fe <HAL_UART_MspDeInit+0xa>
 80018fc:	4770      	bx	lr
{
 80018fe:	b510      	push	{r4, lr}
 8001900:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001906:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800190c:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800190e:	21c0      	movs	r1, #192	; 0xc0
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <HAL_UART_MspDeInit+0x34>)
 8001912:	f001 fcc5 	bl	80032a0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001916:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001918:	f001 fa52 	bl	8002dc0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800191c:	2024      	movs	r0, #36	; 0x24
 800191e:	f001 f95b 	bl	8002bd8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8001922:	bd10      	pop	{r4, pc}
 8001924:	40013800 	.word	0x40013800
 8001928:	48000400 	.word	0x48000400

0800192c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800192c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <vcom_Init+0x20>)
 8001930:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001932:	f7ff fb93 	bl	800105c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001936:	f7ff ff3f 	bl	80017b8 <MX_USART1_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <vcom_Init+0x24>)
 800193c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001940:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001948:	2000      	movs	r0, #0
 800194a:	bd08      	pop	{r3, pc}
 800194c:	2000029c 	.word	0x2000029c
 8001950:	58000800 	.word	0x58000800

08001954 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001954:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8001962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800196a:	4804      	ldr	r0, [pc, #16]	; (800197c <vcom_DeInit+0x28>)
 800196c:	f7ff ffc2 	bl	80018f4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001970:	200f      	movs	r0, #15
 8001972:	f001 f931 	bl	8002bd8 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001976:	2000      	movs	r0, #0
 8001978:	bd08      	pop	{r3, pc}
 800197a:	bf00      	nop
 800197c:	20000208 	.word	0x20000208

08001980 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001980:	b508      	push	{r3, lr}
 8001982:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001984:	4601      	mov	r1, r0
 8001986:	4802      	ldr	r0, [pc, #8]	; (8001990 <vcom_Trace_DMA+0x10>)
 8001988:	f003 fa8a 	bl	8004ea0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800198c:	2000      	movs	r0, #0
 800198e:	bd08      	pop	{r3, pc}
 8001990:	20000208 	.word	0x20000208

08001994 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001994:	b510      	push	{r4, lr}
 8001996:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <vcom_ReceiveInit+0x50>)
 800199a:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800199c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019a0:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80019a2:	ab02      	add	r3, sp, #8
 80019a4:	e913 0006 	ldmdb	r3, {r1, r2}
 80019a8:	480f      	ldr	r0, [pc, #60]	; (80019e8 <vcom_ReceiveInit+0x54>)
 80019aa:	f004 fade 	bl	8005f6a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <vcom_ReceiveInit+0x54>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69da      	ldr	r2, [r3, #28]
 80019b4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80019b8:	d1f9      	bne.n	80019ae <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80019ba:	69da      	ldr	r2, [r3, #28]
 80019bc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80019c0:	d0fb      	beq.n	80019ba <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80019c8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80019ca:	4c07      	ldr	r4, [pc, #28]	; (80019e8 <vcom_ReceiveInit+0x54>)
 80019cc:	4620      	mov	r0, r4
 80019ce:	f004 fb0d 	bl	8005fec <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80019d2:	2201      	movs	r2, #1
 80019d4:	4905      	ldr	r1, [pc, #20]	; (80019ec <vcom_ReceiveInit+0x58>)
 80019d6:	4620      	mov	r0, r4
 80019d8:	f004 fa58 	bl	8005e8c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80019dc:	2000      	movs	r0, #0
 80019de:	b002      	add	sp, #8
 80019e0:	bd10      	pop	{r4, pc}
 80019e2:	bf00      	nop
 80019e4:	20000298 	.word	0x20000298
 80019e8:	20000208 	.word	0x20000208
 80019ec:	200002a0 	.word	0x200002a0

080019f0 <vcom_Resume>:

void vcom_Resume(void)
{
 80019f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <vcom_Resume+0x20>)
 80019f4:	f004 f983 	bl	8005cfe <HAL_UART_Init>
 80019f8:	b920      	cbnz	r0, 8001a04 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <vcom_Resume+0x24>)
 80019fc:	f001 f96e 	bl	8002cdc <HAL_DMA_Init>
 8001a00:	b918      	cbnz	r0, 8001a0a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001a02:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a04:	f7ff fb4b 	bl	800109e <Error_Handler>
 8001a08:	e7f7      	b.n	80019fa <vcom_Resume+0xa>
    Error_Handler();
 8001a0a:	f7ff fb48 	bl	800109e <Error_Handler>
}
 8001a0e:	e7f8      	b.n	8001a02 <vcom_Resume+0x12>
 8001a10:	20000208 	.word	0x20000208
 8001a14:	200001a8 	.word	0x200001a8

08001a18 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8001a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8001a1a:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <HAL_UART_TxCpltCallback+0xc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2000      	movs	r0, #0
 8001a20:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001a22:	bd08      	pop	{r3, pc}
 8001a24:	2000029c 	.word	0x2000029c

08001a28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_UART_RxCpltCallback+0x24>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b12b      	cbz	r3, 8001a3e <HAL_UART_RxCpltCallback+0x16>
 8001a32:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001a36:	b912      	cbnz	r2, 8001a3e <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_UART_RxCpltCallback+0x28>)
 8001a3c:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_UART_RxCpltCallback+0x28>)
 8001a42:	4620      	mov	r0, r4
 8001a44:	f004 fa22 	bl	8005e8c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001a48:	bd10      	pop	{r4, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000298 	.word	0x20000298
 8001a50:	200002a0 	.word	0x200002a0

08001a54 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001a54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001a56:	f7ff fc9b 	bl	8001390 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001a5a:	f000 f97f 	bl	8001d5c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001a5e:	bd08      	pop	{r3, pc}

08001a60 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001a60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a66:	f00e ff33 	bl	80108d0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001a6a:	bd08      	pop	{r3, pc}

08001a6c <OnTxTimerLedEvent>:
}

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context) {

}
 8001a6c:	4770      	bx	lr

08001a6e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context) {

}
 8001a6e:	4770      	bx	lr

08001a70 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params) {
	/* USER CODE BEGIN OnTxData_1 */
	if ((params != NULL)) {
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d03c      	beq.n	8001aee <OnTxData+0x7e>
static void OnTxData(LmHandlerTxParams_t *params) {
 8001a74:	b510      	push	{r4, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	4604      	mov	r4, r0
		/* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
		if (params->IsMcpsConfirm != 0) {
 8001a7a:	7803      	ldrb	r3, [r0, #0]
 8001a7c:	b90b      	cbnz	r3, 8001a82 <OnTxData+0x12>
				APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
			}
		}
	}
	/* USER CODE END OnTxData_1 */
}
 8001a7e:	b004      	add	sp, #16
 8001a80:	bd10      	pop	{r4, pc}
			UTIL_TIMER_Start(&TxLedTimer);
 8001a82:	481b      	ldr	r0, [pc, #108]	; (8001af0 <OnTxData+0x80>)
 8001a84:	f00f f964 	bl	8010d50 <UTIL_TIMER_Start>
			APP_LOG(TS_OFF, VLEVEL_M,
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <OnTxData+0x84>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f00e fdc0 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF, VLEVEL_H,
 8001a94:	7b23      	ldrb	r3, [r4, #12]
 8001a96:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8001a9a:	f994 1014 	ldrsb.w	r1, [r4, #20]
 8001a9e:	9103      	str	r1, [sp, #12]
 8001aa0:	9202      	str	r2, [sp, #8]
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	68a3      	ldr	r3, [r4, #8]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <OnTxData+0x88>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	4611      	mov	r1, r2
 8001aae:	2003      	movs	r0, #3
 8001ab0:	f00e fdb0 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <OnTxData+0x8c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4611      	mov	r1, r2
 8001aba:	2003      	movs	r0, #3
 8001abc:	f00e fdaa 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
			if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) {
 8001ac0:	78a3      	ldrb	r3, [r4, #2]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10c      	bne.n	8001ae0 <OnTxData+0x70>
				APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n",
 8001ac6:	78e3      	ldrb	r3, [r4, #3]
 8001ac8:	b143      	cbz	r3, 8001adc <OnTxData+0x6c>
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <OnTxData+0x90>)
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <OnTxData+0x94>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f00e fd9d 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
						(params->AckReceived != 0) ? "ACK" : "NACK");
 8001ada:	e7d0      	b.n	8001a7e <OnTxData+0xe>
				APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n",
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <OnTxData+0x98>)
 8001ade:	e7f5      	b.n	8001acc <OnTxData+0x5c>
				APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <OnTxData+0x9c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f00e fd94 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 8001aec:	e7c7      	b.n	8001a7e <OnTxData+0xe>
 8001aee:	4770      	bx	lr
 8001af0:	200003c8 	.word	0x200003c8
 8001af4:	080113ec 	.word	0x080113ec
 8001af8:	08011420 	.word	0x08011420
 8001afc:	08011454 	.word	0x08011454
 8001b00:	080113e0 	.word	0x080113e0
 8001b04:	08011464 	.word	0x08011464
 8001b08:	080113e4 	.word	0x080113e4
 8001b0c:	08011478 	.word	0x08011478

08001b10 <OnMacProcessNotify>:
	}
	 //LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
	/* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void) {
 8001b10:	b508      	push	{r3, lr}
	/* USER CODE BEGIN OnMacProcessNotify_1 */

	/* USER CODE END OnMacProcessNotify_1 */
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001b12:	2100      	movs	r1, #0
 8001b14:	2001      	movs	r0, #1
 8001b16:	f00e fea7 	bl	8010868 <UTIL_SEQ_SetTask>

	/* USER CODE BEGIN OnMacProcessNotify_2 */

	/* USER CODE END OnMacProcessNotify_2 */
}
 8001b1a:	bd08      	pop	{r3, pc}

08001b1c <OnRxData>:
static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params) {
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	460c      	mov	r4, r1
	if ((appData != NULL) || (params != NULL)) {
 8001b22:	4605      	mov	r5, r0
 8001b24:	b358      	cbz	r0, 8001b7e <OnRxData+0x62>
		UTIL_TIMER_Start(&RxLedTimer);
 8001b26:	482b      	ldr	r0, [pc, #172]	; (8001bd4 <OnRxData+0xb8>)
 8001b28:	f00f f912 	bl	8010d50 <UTIL_TIMER_Start>
		APP_LOG(TS_OFF, VLEVEL_M,
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <OnRxData+0xbc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4611      	mov	r1, r2
 8001b32:	2002      	movs	r0, #2
 8001b34:	f00e fd6e 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
		APP_LOG(TS_OFF, VLEVEL_H,
 8001b38:	f994 200c 	ldrsb.w	r2, [r4, #12]
 8001b3c:	782b      	ldrb	r3, [r5, #0]
 8001b3e:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8001b42:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8001b46:	f994 6004 	ldrsb.w	r6, [r4, #4]
 8001b4a:	9605      	str	r6, [sp, #20]
 8001b4c:	9004      	str	r0, [sp, #16]
 8001b4e:	9103      	str	r1, [sp, #12]
 8001b50:	9302      	str	r3, [sp, #8]
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <OnRxData+0xc0>)
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	68a3      	ldr	r3, [r4, #8]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <OnRxData+0xc4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	4611      	mov	r1, r2
 8001b64:	2003      	movs	r0, #3
 8001b66:	f00e fd55 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
		switch (appData->Port) {
 8001b6a:	782b      	ldrb	r3, [r5, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d01d      	beq.n	8001bac <OnRxData+0x90>
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d102      	bne.n	8001b7a <OnRxData+0x5e>
			if (appData->BufferSize == 1) {
 8001b74:	786b      	ldrb	r3, [r5, #1]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d004      	beq.n	8001b84 <OnRxData+0x68>
}
 8001b7a:	b006      	add	sp, #24
 8001b7c:	bd70      	pop	{r4, r5, r6, pc}
	if ((appData != NULL) || (params != NULL)) {
 8001b7e:	2900      	cmp	r1, #0
 8001b80:	d1d1      	bne.n	8001b26 <OnRxData+0xa>
 8001b82:	e7fa      	b.n	8001b7a <OnRxData+0x5e>
				switch (appData->Buffer[0]) {
 8001b84:	686b      	ldr	r3, [r5, #4]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d007      	beq.n	8001b9c <OnRxData+0x80>
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d009      	beq.n	8001ba4 <OnRxData+0x88>
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f2      	bne.n	8001b7a <OnRxData+0x5e>
					LmHandlerRequestClass(CLASS_A);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f004 fc5d 	bl	8006454 <LmHandlerRequestClass>
					break;
 8001b9a:	e7ee      	b.n	8001b7a <OnRxData+0x5e>
					LmHandlerRequestClass(CLASS_B);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f004 fc59 	bl	8006454 <LmHandlerRequestClass>
					break;
 8001ba2:	e7ea      	b.n	8001b7a <OnRxData+0x5e>
					LmHandlerRequestClass(CLASS_C);
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f004 fc55 	bl	8006454 <LmHandlerRequestClass>
					break;
 8001baa:	e7e6      	b.n	8001b7a <OnRxData+0x5e>
			if (appData->BufferSize > 1) {
 8001bac:	786b      	ldrb	r3, [r5, #1]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d9e3      	bls.n	8001b7a <OnRxData+0x5e>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001bb2:	4c0c      	ldr	r4, [pc, #48]	; (8001be4 <OnRxData+0xc8>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2120      	movs	r1, #32
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f001 fbef 	bl	800339c <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8001bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc2:	f7ff fc9b 	bl	80014fc <HAL_Delay>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2120      	movs	r1, #32
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f001 fbe6 	bl	800339c <HAL_GPIO_WritePin>
}
 8001bd0:	e7d3      	b.n	8001b7a <OnRxData+0x5e>
 8001bd2:	bf00      	nop
 8001bd4:	200003b0 	.word	0x200003b0
 8001bd8:	08011488 	.word	0x08011488
 8001bdc:	08011654 	.word	0x08011654
 8001be0:	080114bc 	.word	0x080114bc
 8001be4:	48000400 	.word	0x48000400

08001be8 <OnJoinRequest>:
	if (joinParams != NULL) {
 8001be8:	b340      	cbz	r0, 8001c3c <OnJoinRequest+0x54>
static void OnJoinRequest(LmHandlerJoinParams_t *joinParams) {
 8001bea:	b510      	push	{r4, lr}
 8001bec:	4604      	mov	r4, r0
		if (joinParams->Status == LORAMAC_HANDLER_SUCCESS) {
 8001bee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8001bf2:	b9e3      	cbnz	r3, 8001c2e <OnJoinRequest+0x46>
			UTIL_TIMER_Stop(&JoinLedTimer);
 8001bf4:	4812      	ldr	r0, [pc, #72]	; (8001c40 <OnJoinRequest+0x58>)
 8001bf6:	f00f f851 	bl	8010c9c <UTIL_TIMER_Stop>
			BSP_LED_Off(LED_RED);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f9bc 	bl	8001f78 <BSP_LED_Off>
			APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <OnJoinRequest+0x5c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	4611      	mov	r1, r2
 8001c06:	2002      	movs	r0, #2
 8001c08:	f00e fd04 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
			if (joinParams->Mode == ACTIVATION_TYPE_ABP) {
 8001c0c:	78a3      	ldrb	r3, [r4, #2]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d006      	beq.n	8001c20 <OnJoinRequest+0x38>
				APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <OnJoinRequest+0x60>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	4611      	mov	r1, r2
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f00e fcfb 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 8001c1e:	e00c      	b.n	8001c3a <OnJoinRequest+0x52>
				APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <OnJoinRequest+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	4611      	mov	r1, r2
 8001c26:	2002      	movs	r0, #2
 8001c28:	f00e fcf4 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 8001c2c:	e005      	b.n	8001c3a <OnJoinRequest+0x52>
			APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <OnJoinRequest+0x68>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	4611      	mov	r1, r2
 8001c34:	2002      	movs	r0, #2
 8001c36:	f00e fced 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 8001c3a:	bd10      	pop	{r4, pc}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000398 	.word	0x20000398
 8001c44:	08011504 	.word	0x08011504
 8001c48:	0801153c 	.word	0x0801153c
 8001c4c:	0801151c 	.word	0x0801151c
 8001c50:	0801155c 	.word	0x0801155c

08001c54 <SendTxData>:
static void SendTxData(void) {
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	b08b      	sub	sp, #44	; 0x2c
	UTIL_TIMER_Time_t nextTxIn = 0;
 8001c58:	2700      	movs	r7, #0
 8001c5a:	9709      	str	r7, [sp, #36]	; 0x24
	EnvSensors_Read(&sensor_data);
 8001c5c:	a803      	add	r0, sp, #12
 8001c5e:	f7ff fc81 	bl	8001564 <EnvSensors_Read>
	temperature = (SYS_GetTemperatureLevel() >> 8);
 8001c62:	f7ff f9ab 	bl	8000fbc <SYS_GetTemperatureLevel>
 8001c66:	f340 260f 	sbfx	r6, r0, #8, #16
	pressure = (uint16_t) (sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8001c6a:	4931      	ldr	r1, [pc, #196]	; (8001d30 <SendTxData+0xdc>)
 8001c6c:	9803      	ldr	r0, [sp, #12]
 8001c6e:	f7fe fe05 	bl	800087c <__aeabi_fmul>
 8001c72:	4930      	ldr	r1, [pc, #192]	; (8001d34 <SendTxData+0xe0>)
 8001c74:	f7fe feb6 	bl	80009e4 <__aeabi_fdiv>
 8001c78:	f7fe ff50 	bl	8000b1c <__aeabi_f2uiz>
 8001c7c:	b285      	uxth	r5, r0
	AppData.Port = LORAWAN_USER_APP_PORT;
 8001c7e:	4c2e      	ldr	r4, [pc, #184]	; (8001d38 <SendTxData+0xe4>)
 8001c80:	2302      	movs	r3, #2
 8001c82:	7023      	strb	r3, [r4, #0]
	humidity = (uint16_t) (sensor_data.humidity * 10); /* in %*10     */
 8001c84:	492b      	ldr	r1, [pc, #172]	; (8001d34 <SendTxData+0xe0>)
 8001c86:	9805      	ldr	r0, [sp, #20]
 8001c88:	f7fe fdf8 	bl	800087c <__aeabi_fmul>
 8001c8c:	f7fe ff46 	bl	8000b1c <__aeabi_f2uiz>
	AppData.Buffer[i++] = AppLedStateOn;
 8001c90:	6863      	ldr	r3, [r4, #4]
 8001c92:	701f      	strb	r7, [r3, #0]
	AppData.Buffer[i++] = (uint8_t) ((pressure >> 8) & 0xFF);
 8001c94:	6863      	ldr	r3, [r4, #4]
 8001c96:	0a2a      	lsrs	r2, r5, #8
 8001c98:	705a      	strb	r2, [r3, #1]
	AppData.Buffer[i++] = (uint8_t) (pressure & 0xFF);
 8001c9a:	6863      	ldr	r3, [r4, #4]
 8001c9c:	709d      	strb	r5, [r3, #2]
	AppData.Buffer[i++] = (uint8_t) (temperature & 0xFF);
 8001c9e:	6863      	ldr	r3, [r4, #4]
 8001ca0:	70de      	strb	r6, [r3, #3]
	AppData.Buffer[i++] = (uint8_t) ((humidity >> 8) & 0xFF);
 8001ca2:	6863      	ldr	r3, [r4, #4]
 8001ca4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8001ca8:	711a      	strb	r2, [r3, #4]
	AppData.Buffer[i++] = (uint8_t) (humidity & 0xFF);
 8001caa:	6863      	ldr	r3, [r4, #4]
 8001cac:	7158      	strb	r0, [r3, #5]
	if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915)
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <SendTxData+0xe8>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d00a      	beq.n	8001ccc <SendTxData+0x78>
			|| (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d024      	beq.n	8001d04 <SendTxData+0xb0>
			|| (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923)) {
 8001cba:	b90b      	cbnz	r3, 8001cc0 <SendTxData+0x6c>
	AppData.Buffer[i++] = (uint8_t) (humidity & 0xFF);
 8001cbc:	2406      	movs	r4, #6
 8001cbe:	e006      	b.n	8001cce <SendTxData+0x7a>
		AppData.Buffer[i++] = GetBatteryLevel(); /* 1 (very low) to 254 (fully charged) */
 8001cc0:	6864      	ldr	r4, [r4, #4]
 8001cc2:	f7ff fb8b 	bl	80013dc <GetBatteryLevel>
 8001cc6:	71a0      	strb	r0, [r4, #6]
 8001cc8:	2407      	movs	r4, #7
 8001cca:	e000      	b.n	8001cce <SendTxData+0x7a>
	AppData.Buffer[i++] = (uint8_t) (humidity & 0xFF);
 8001ccc:	2406      	movs	r4, #6
	memcpy(&AppData.Buffer[i], msg2send, strlen(msg2send));
 8001cce:	4d1a      	ldr	r5, [pc, #104]	; (8001d38 <SendTxData+0xe4>)
 8001cd0:	686e      	ldr	r6, [r5, #4]
 8001cd2:	eb06 0c04 	add.w	ip, r6, r4
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <SendTxData+0xec>)
 8001cd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001cda:	5130      	str	r0, [r6, r4]
 8001cdc:	f8cc 1004 	str.w	r1, [ip, #4]
 8001ce0:	f8cc 2008 	str.w	r2, [ip, #8]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	f8ac 300c 	strh.w	r3, [ip, #12]
	i += strlen(msg2send);
 8001cea:	340e      	adds	r4, #14
	AppData.BufferSize = i;
 8001cec:	706c      	strb	r4, [r5, #1]
			== LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE,
 8001cee:	2300      	movs	r3, #0
 8001cf0:	aa09      	add	r2, sp, #36	; 0x24
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f004 fc59 	bl	80065ac <LmHandlerSend>
	if (LORAMAC_HANDLER_SUCCESS
 8001cfa:	b128      	cbz	r0, 8001d08 <SendTxData+0xb4>
	} else if (nextTxIn > 0) {
 8001cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cfe:	b953      	cbnz	r3, 8001d16 <SendTxData+0xc2>
}
 8001d00:	b00b      	add	sp, #44	; 0x2c
 8001d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	AppData.Buffer[i++] = (uint8_t) (humidity & 0xFF);
 8001d04:	2406      	movs	r4, #6
 8001d06:	e7e2      	b.n	8001cce <SendTxData+0x7a>
		APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <SendTxData+0xf0>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f00e fc80 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 8001d14:	e7f4      	b.n	8001d00 <SendTxData+0xac>
		APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n",
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <SendTxData+0xf4>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <SendTxData+0xf8>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	2100      	movs	r1, #0
 8001d26:	4610      	mov	r0, r2
 8001d28:	f00e fc74 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 8001d2c:	e7e8      	b.n	8001d00 <SendTxData+0xac>
 8001d2e:	bf00      	nop
 8001d30:	42c80000 	.word	0x42c80000
 8001d34:	41200000 	.word	0x41200000
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	2000003c 	.word	0x2000003c
 8001d40:	08011578 	.word	0x08011578
 8001d44:	08011588 	.word	0x08011588
 8001d48:	10624dd3 	.word	0x10624dd3
 8001d4c:	08011598 	.word	0x08011598

08001d50 <OnJoinTimerLedEvent>:
static void OnJoinTimerLedEvent(void *context) {
 8001d50:	b508      	push	{r3, lr}
	BSP_LED_Toggle(LED_RED);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f91a 	bl	8001f8c <BSP_LED_Toggle>
}
 8001d58:	bd08      	pop	{r3, pc}
	...

08001d5c <LoRaWAN_Init>:
void LoRaWAN_Init(void) {
 8001d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d60:	b085      	sub	sp, #20
	BSP_LED_Init(LED_RED);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 f8e0 	bl	8001f28 <BSP_LED_Init>
	APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001d68:	2400      	movs	r4, #0
 8001d6a:	9402      	str	r4, [sp, #8]
 8001d6c:	2501      	movs	r5, #1
 8001d6e:	9501      	str	r5, [sp, #4]
 8001d70:	9500      	str	r5, [sp, #0]
 8001d72:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <LoRaWAN_Init+0xe0>)
 8001d74:	4622      	mov	r2, r4
 8001d76:	4621      	mov	r1, r4
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f00e fc4b 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001d7e:	9402      	str	r4, [sp, #8]
 8001d80:	2303      	movs	r3, #3
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2602      	movs	r6, #2
 8001d86:	9600      	str	r6, [sp, #0]
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <LoRaWAN_Init+0xe4>)
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	4630      	mov	r0, r6
 8001d90:	f00e fc40 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8001d94:	9402      	str	r4, [sp, #8]
 8001d96:	9501      	str	r5, [sp, #4]
 8001d98:	9500      	str	r5, [sp, #0]
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <LoRaWAN_Init+0xe8>)
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	4621      	mov	r1, r4
 8001da0:	4630      	mov	r0, r6
 8001da2:	f00e fc37 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT,
 8001da6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001e48 <LoRaWAN_Init+0xec>
 8001daa:	9400      	str	r4, [sp, #0]
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <LoRaWAN_Init+0xf0>)
 8001dae:	4622      	mov	r2, r4
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db4:	4648      	mov	r0, r9
 8001db6:	f00e ff13 	bl	8010be0 <UTIL_TIMER_Create>
	UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT,
 8001dba:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001e50 <LoRaWAN_Init+0xf4>
 8001dbe:	9400      	str	r4, [sp, #0]
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <LoRaWAN_Init+0xf8>)
 8001dc2:	4622      	mov	r2, r4
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dc8:	4640      	mov	r0, r8
 8001dca:	f00e ff09 	bl	8010be0 <UTIL_TIMER_Create>
	UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC,
 8001dce:	4f22      	ldr	r7, [pc, #136]	; (8001e58 <LoRaWAN_Init+0xfc>)
 8001dd0:	9400      	str	r4, [sp, #0]
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <LoRaWAN_Init+0x100>)
 8001dd4:	462a      	mov	r2, r5
 8001dd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dda:	4638      	mov	r0, r7
 8001ddc:	f00e ff00 	bl	8010be0 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8001de0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001de4:	4648      	mov	r0, r9
 8001de6:	f00e fff9 	bl	8010ddc <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8001dea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dee:	4640      	mov	r0, r8
 8001df0:	f00e fff4 	bl	8010ddc <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8001df4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001df8:	4638      	mov	r0, r7
 8001dfa:	f00e ffef 	bl	8010ddc <UTIL_TIMER_SetPeriod>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU,
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <LoRaWAN_Init+0x104>)
 8001e00:	4621      	mov	r1, r4
 8001e02:	4628      	mov	r0, r5
 8001e04:	f00e fdec 	bl	80109e0 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent),
 8001e08:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <LoRaWAN_Init+0x108>)
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	f00e fde7 	bl	80109e0 <UTIL_SEQ_RegTask>
	LoraInfo_Init();
 8001e12:	f000 f837 	bl	8001e84 <LoraInfo_Init>
	LmHandlerInit(&LmHandlerCallbacks);
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <LoRaWAN_Init+0x10c>)
 8001e18:	f004 fd82 	bl	8006920 <LmHandlerInit>
	LmHandlerConfigure(&LmHandlerParams);
 8001e1c:	4813      	ldr	r0, [pc, #76]	; (8001e6c <LoRaWAN_Init+0x110>)
 8001e1e:	f004 fa21 	bl	8006264 <LmHandlerConfigure>
	UTIL_TIMER_Start(&JoinLedTimer);
 8001e22:	4638      	mov	r0, r7
 8001e24:	f00e ff94 	bl	8010d50 <UTIL_TIMER_Start>
	LmHandlerJoin(ActivationType);
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f004 fb75 	bl	8006518 <LmHandlerJoin>
		BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001e2e:	4629      	mov	r1, r5
 8001e30:	4620      	mov	r0, r4
 8001e32:	f000 f8b5 	bl	8001fa0 <BSP_PB_Init>
}
 8001e36:	b005      	add	sp, #20
 8001e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e3c:	080115b8 	.word	0x080115b8
 8001e40:	080115d8 	.word	0x080115d8
 8001e44:	080115f8 	.word	0x080115f8
 8001e48:	200003c8 	.word	0x200003c8
 8001e4c:	08001a6d 	.word	0x08001a6d
 8001e50:	200003b0 	.word	0x200003b0
 8001e54:	08001a6f 	.word	0x08001a6f
 8001e58:	20000398 	.word	0x20000398
 8001e5c:	08001d51 	.word	0x08001d51
 8001e60:	08006421 	.word	0x08006421
 8001e64:	08001c55 	.word	0x08001c55
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	2000003c 	.word	0x2000003c

08001e70 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin) {
 8001e70:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001e74:	d000      	beq.n	8001e78 <HAL_GPIO_EXTI_Callback+0x8>
 8001e76:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e78:	b508      	push	{r3, lr}
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent),
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f00e fcf3 	bl	8010868 <UTIL_SEQ_SetTask>
}
 8001e82:	bd08      	pop	{r3, pc}

08001e84 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <LoraInfo_Init+0x1c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8001e8a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8001e8c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8001e8e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8001e90:	2220      	movs	r2, #32
 8001e92:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 8001e94:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001e98:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8001e9e:	4770      	bx	lr
 8001ea0:	200003e0 	.word	0x200003e0

08001ea4 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8001ea4:	4800      	ldr	r0, [pc, #0]	; (8001ea8 <LoraInfo_GetPtr+0x4>)
 8001ea6:	4770      	bx	lr
 8001ea8:	200003e0 	.word	0x200003e0

08001eac <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001eac:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8001eae:	f000 f8c5 	bl	800203c <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001eb2:	bd08      	pop	{r3, pc}

08001eb4 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001eb4:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001eb6:	f000 f8f5 	bl	80020a4 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001eba:	bd08      	pop	{r3, pc}

08001ebc <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001ebc:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8001ebe:	f000 f92d 	bl	800211c <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001ec2:	bd08      	pop	{r3, pc}

08001ec4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001ec4:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8001ec6:	f000 f92b 	bl	8002120 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001eca:	bd08      	pop	{r3, pc}

08001ecc <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001ecc:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8001ece:	f000 f929 	bl	8002124 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001ed2:	bd08      	pop	{r3, pc}

08001ed4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ed6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ed8:	f000 f926 	bl	8002128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	; (8001f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <LoopForever+0xe>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	; (8001f20 <LoopForever+0x16>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f02:	f00f f935 	bl	8011170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f06:	f7ff f912 	bl	800112e <main>

08001f0a <LoopForever>:

LoopForever:
    b LoopForever
 8001f0a:	e7fe      	b.n	8001f0a <LoopForever>
  ldr   r0, =_estack
 8001f0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001f18:	08012050 	.word	0x08012050
  ldr r2, =_sbss
 8001f1c:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001f20:	20001a48 	.word	0x20001a48

08001f24 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC_IRQHandler>
	...

08001f28 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001f2c:	2400      	movs	r4, #0
 8001f2e:	9401      	str	r4, [sp, #4]
 8001f30:	9402      	str	r4, [sp, #8]
 8001f32:	9403      	str	r4, [sp, #12]
 8001f34:	9404      	str	r4, [sp, #16]
 8001f36:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f3e:	f042 0202 	orr.w	r2, r2, #2
 8001f42:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001f4c:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001f4e:	2620      	movs	r6, #32
 8001f50:	9601      	str	r6, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2701      	movs	r7, #1
 8001f54:	9702      	str	r7, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f56:	2302      	movs	r3, #2
 8001f58:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001f5a:	4d06      	ldr	r5, [pc, #24]	; (8001f74 <BSP_LED_Init+0x4c>)
 8001f5c:	a901      	add	r1, sp, #4
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f001 f8cc 	bl	80030fc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001f64:	463a      	mov	r2, r7
 8001f66:	4631      	mov	r1, r6
 8001f68:	4628      	mov	r0, r5
 8001f6a:	f001 fa17 	bl	800339c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8001f6e:	4620      	mov	r0, r4
 8001f70:	b007      	add	sp, #28
 8001f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f74:	48000400 	.word	0x48000400

08001f78 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001f78:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	4802      	ldr	r0, [pc, #8]	; (8001f88 <BSP_LED_Off+0x10>)
 8001f80:	f001 fa0c 	bl	800339c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8001f84:	2000      	movs	r0, #0
 8001f86:	bd08      	pop	{r3, pc}
 8001f88:	48000400 	.word	0x48000400

08001f8c <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001f8c:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001f8e:	2120      	movs	r1, #32
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <BSP_LED_Toggle+0x10>)
 8001f92:	f001 fa08 	bl	80033a6 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8001f96:	2000      	movs	r0, #0
 8001f98:	bd08      	pop	{r3, pc}
 8001f9a:	bf00      	nop
 8001f9c:	48000400 	.word	0x48000400

08001fa0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	b086      	sub	sp, #24
  GPIO_InitTypeDef gpio_init_structure = {0};
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	9303      	str	r3, [sp, #12]
 8001fac:	9304      	str	r3, [sp, #16]
 8001fae:	9305      	str	r3, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fb6:	f042 0202 	orr.w	r2, r2, #2
 8001fba:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001fc4:	9b00      	ldr	r3, [sp, #0]
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fca:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9304      	str	r3, [sp, #16]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001fd4:	b931      	cbnz	r1, 8001fe4 <BSP_PB_Init+0x44>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001fd6:	a901      	add	r1, sp, #4
 8001fd8:	4811      	ldr	r0, [pc, #68]	; (8002020 <BSP_PB_Init+0x80>)
 8001fda:	f001 f88f 	bl	80030fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 8001fde:	2000      	movs	r0, #0
 8001fe0:	b006      	add	sp, #24
 8001fe2:	bd10      	pop	{r4, pc}
 8001fe4:	4604      	mov	r4, r0
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8001fe6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fea:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001fec:	a901      	add	r1, sp, #4
 8001fee:	480c      	ldr	r0, [pc, #48]	; (8002020 <BSP_PB_Init+0x80>)
 8001ff0:	f001 f884 	bl	80030fc <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <BSP_PB_Init+0x84>)
 8001ff6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8001ffa:	490b      	ldr	r1, [pc, #44]	; (8002028 <BSP_PB_Init+0x88>)
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f001 f876 	bl	80030ee <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <BSP_PB_Init+0x8c>)
 8002004:	2100      	movs	r1, #0
 8002006:	4620      	mov	r0, r4
 8002008:	f001 f86a 	bl	80030e0 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 800200c:	2200      	movs	r2, #0
 800200e:	210f      	movs	r1, #15
 8002010:	2029      	movs	r0, #41	; 0x29
 8002012:	f000 fd9b 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002016:	2029      	movs	r0, #41	; 0x29
 8002018:	f000 fdd0 	bl	8002bbc <HAL_NVIC_EnableIRQ>
 800201c:	e7df      	b.n	8001fde <BSP_PB_Init+0x3e>
 800201e:	bf00      	nop
 8002020:	48000400 	.word	0x48000400
 8002024:	200003f0 	.word	0x200003f0
 8002028:	1600000d 	.word	0x1600000d
 800202c:	08002033 	.word	0x08002033

08002030 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002030:	4770      	bx	lr

08002032 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002032:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW1);
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff fffb 	bl	8002030 <BSP_PB_Callback>
}
 800203a:	bd08      	pop	{r3, pc}

0800203c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002040:	2400      	movs	r4, #0
 8002042:	9401      	str	r4, [sp, #4]
 8002044:	9402      	str	r4, [sp, #8]
 8002046:	9403      	str	r4, [sp, #12]
 8002048:	9404      	str	r4, [sp, #16]
 800204a:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002060:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002062:	2510      	movs	r5, #16
 8002064:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800206e:	a901      	add	r1, sp, #4
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f001 f842 	bl	80030fc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002078:	2620      	movs	r6, #32
 800207a:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800207c:	a901      	add	r1, sp, #4
 800207e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002082:	f001 f83b 	bl	80030fc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002086:	4622      	mov	r2, r4
 8002088:	4631      	mov	r1, r6
 800208a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208e:	f001 f985 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002092:	4622      	mov	r2, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209a:	f001 f97f 	bl	800339c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 800209e:	4620      	mov	r0, r4
 80020a0:	b006      	add	sp, #24
 80020a2:	bd70      	pop	{r4, r5, r6, pc}

080020a4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80020a4:	b508      	push	{r3, lr}
  switch (Config)
 80020a6:	2803      	cmp	r0, #3
 80020a8:	d80f      	bhi.n	80020ca <BSP_RADIO_ConfigRFSwitch+0x26>
 80020aa:	e8df f000 	tbb	[pc, r0]
 80020ae:	1002      	.short	0x1002
 80020b0:	2a1d      	.short	0x2a1d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2110      	movs	r1, #16
 80020b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ba:	f001 f96f 	bl	800339c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	2120      	movs	r1, #32
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f001 f969 	bl	800339c <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 80020ca:	2000      	movs	r0, #0
 80020cc:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80020ce:	2201      	movs	r2, #1
 80020d0:	2110      	movs	r1, #16
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f001 f961 	bl	800339c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80020da:	2200      	movs	r2, #0
 80020dc:	2120      	movs	r1, #32
 80020de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e2:	f001 f95b 	bl	800339c <HAL_GPIO_WritePin>
      break;
 80020e6:	e7f0      	b.n	80020ca <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80020e8:	2201      	movs	r2, #1
 80020ea:	2110      	movs	r1, #16
 80020ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f0:	f001 f954 	bl	800339c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80020f4:	2201      	movs	r2, #1
 80020f6:	2120      	movs	r1, #32
 80020f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fc:	f001 f94e 	bl	800339c <HAL_GPIO_WritePin>
      break;
 8002100:	e7e3      	b.n	80020ca <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002102:	2200      	movs	r2, #0
 8002104:	2110      	movs	r1, #16
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f001 f947 	bl	800339c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800210e:	2201      	movs	r2, #1
 8002110:	2120      	movs	r1, #32
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f001 f941 	bl	800339c <HAL_GPIO_WritePin>
      break;
 800211a:	e7d6      	b.n	80020ca <BSP_RADIO_ConfigRFSwitch+0x26>

0800211c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_HP;
}
 800211c:	2002      	movs	r0, #2
 800211e:	4770      	bx	lr

08002120 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002120:	2001      	movs	r0, #1
 8002122:	4770      	bx	lr

08002124 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002124:	2001      	movs	r0, #1
 8002126:	4770      	bx	lr

08002128 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002128:	4770      	bx	lr
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212e:	2003      	movs	r0, #3
 8002130:	f000 fcfa 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002134:	f001 fad8 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_Init+0x28>)
 800213a:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213c:	200f      	movs	r0, #15
 800213e:	f7ff f9d7 	bl	80014f0 <HAL_InitTick>
 8002142:	b110      	cbz	r0, 800214a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002144:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002146:	4620      	mov	r0, r4
 8002148:	bd10      	pop	{r4, pc}
 800214a:	4604      	mov	r4, r0
    HAL_MspInit();
 800214c:	f7ff f898 	bl	8001280 <HAL_MspInit>
 8002150:	e7f9      	b.n	8002146 <HAL_Init+0x1a>
 8002152:	bf00      	nop
 8002154:	2000004c 	.word	0x2000004c

08002158 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_IncTick+0x10>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4a03      	ldr	r2, [pc, #12]	; (800216c <HAL_IncTick+0x14>)
 800215e:	6811      	ldr	r1, [r2, #0]
 8002160:	440b      	add	r3, r1
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000050 	.word	0x20000050
 800216c:	200003f8 	.word	0x200003f8

08002170 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002170:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002174:	6913      	ldr	r3, [r2, #16]
 8002176:	f023 0302 	bic.w	r3, r3, #2
 800217a:	6113      	str	r3, [r2, #16]
}
 800217c:	4770      	bx	lr

0800217e <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800217e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002182:	6913      	ldr	r3, [r2, #16]
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6113      	str	r3, [r2, #16]
}
 800218a:	4770      	bx	lr

0800218c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 800218c:	4b01      	ldr	r3, [pc, #4]	; (8002194 <HAL_GetUIDw0+0x8>)
 800218e:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002192:	4770      	bx	lr
 8002194:	1fff7000 	.word	0x1fff7000

08002198 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002198:	4b01      	ldr	r3, [pc, #4]	; (80021a0 <HAL_GetUIDw1+0x8>)
 800219a:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 800219e:	4770      	bx	lr
 80021a0:	1fff7000 	.word	0x1fff7000

080021a4 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80021a4:	4b01      	ldr	r3, [pc, #4]	; (80021ac <HAL_GetUIDw2+0x8>)
 80021a6:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80021aa:	4770      	bx	lr
 80021ac:	1fff7000 	.word	0x1fff7000

080021b0 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80021b0:	4a02      	ldr	r2, [pc, #8]	; (80021bc <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80021b2:	6853      	ldr	r3, [r2, #4]
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 80021ba:	4770      	bx	lr
 80021bc:	e0042000 	.word	0xe0042000

080021c0 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80021c0:	4a02      	ldr	r2, [pc, #8]	; (80021cc <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80021c2:	6853      	ldr	r3, [r2, #4]
 80021c4:	f023 0302 	bic.w	r3, r3, #2
 80021c8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 80021ca:	4770      	bx	lr
 80021cc:	e0042000 	.word	0xe0042000

080021d0 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80021d0:	4a02      	ldr	r2, [pc, #8]	; (80021dc <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80021d2:	6853      	ldr	r3, [r2, #4]
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 80021da:	4770      	bx	lr
 80021dc:	e0042000 	.word	0xe0042000

080021e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80021e8:	2800      	cmp	r0, #0
 80021ea:	f000 8128 	beq.w	800243e <HAL_ADC_Init+0x25e>
 80021ee:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80021f2:	b1bb      	cbz	r3, 8002224 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021f4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f6:	6893      	ldr	r3, [r2, #8]
 80021f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021fc:	d11f      	bne.n	800223e <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 80021fe:	6893      	ldr	r3, [r2, #8]
 8002200:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002204:	f023 0317 	bic.w	r3, r3, #23
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800220e:	4b8d      	ldr	r3, [pc, #564]	; (8002444 <HAL_ADC_Init+0x264>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	099b      	lsrs	r3, r3, #6
 8002214:	4a8c      	ldr	r2, [pc, #560]	; (8002448 <HAL_ADC_Init+0x268>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	099b      	lsrs	r3, r3, #6
 800221c:	3301      	adds	r3, #1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002222:	e009      	b.n	8002238 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002224:	f7fe fe44 	bl	8000eb0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002228:	2300      	movs	r3, #0
 800222a:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800222c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002230:	e7e0      	b.n	80021f4 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002232:	9b01      	ldr	r3, [sp, #4]
 8002234:	3b01      	subs	r3, #1
 8002236:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002238:	9b01      	ldr	r3, [sp, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800223e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002240:	6893      	ldr	r3, [r2, #8]
 8002242:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002246:	d14b      	bne.n	80022e0 <HAL_ADC_Init+0x100>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002248:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800224a:	f043 0310 	orr.w	r3, r3, #16
 800224e:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002250:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002258:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800225a:	6893      	ldr	r3, [r2, #8]
 800225c:	f013 0304 	ands.w	r3, r3, #4
 8002260:	d000      	beq.n	8002264 <HAL_ADC_Init+0x84>
 8002262:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002264:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002266:	f011 0f10 	tst.w	r1, #16
 800226a:	f040 80e1 	bne.w	8002430 <HAL_ADC_Init+0x250>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 80de 	bne.w	8002430 <HAL_ADC_Init+0x250>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002274:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002276:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 800227a:	f041 0102 	orr.w	r1, r1, #2
 800227e:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002280:	6891      	ldr	r1, [r2, #8]
 8002282:	f011 0f01 	tst.w	r1, #1
 8002286:	d138      	bne.n	80022fa <HAL_ADC_Init+0x11a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002288:	68d1      	ldr	r1, [r2, #12]
 800228a:	f021 0118 	bic.w	r1, r1, #24
 800228e:	68a5      	ldr	r5, [r4, #8]
 8002290:	4329      	orrs	r1, r5
 8002292:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002294:	6862      	ldr	r2, [r4, #4]
 8002296:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800229a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800229c:	ea42 0c01 	orr.w	ip, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80022a0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80022a4:	2901      	cmp	r1, #1
 80022a6:	d01d      	beq.n	80022e4 <HAL_ADC_Init+0x104>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80022a8:	6821      	ldr	r1, [r4, #0]
 80022aa:	690d      	ldr	r5, [r1, #16]
 80022ac:	4a67      	ldr	r2, [pc, #412]	; (800244c <HAL_ADC_Init+0x26c>)
 80022ae:	402a      	ands	r2, r5
 80022b0:	ea42 020c 	orr.w	r2, r2, ip
 80022b4:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022b6:	6862      	ldr	r2, [r4, #4]
 80022b8:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 80022bc:	d01e      	beq.n	80022fc <HAL_ADC_Init+0x11c>
 80022be:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80022c2:	d01b      	beq.n	80022fc <HAL_ADC_Init+0x11c>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80022c8:	d018      	beq.n	80022fc <HAL_ADC_Init+0x11c>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80022ca:	4d61      	ldr	r5, [pc, #388]	; (8002450 <HAL_ADC_Init+0x270>)
 80022cc:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 80022d0:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 80022d4:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 80022d8:	430a      	orrs	r2, r1
 80022da:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
 80022de:	e00d      	b.n	80022fc <HAL_ADC_Init+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e0:	2000      	movs	r0, #0
 80022e2:	e7ba      	b.n	800225a <HAL_ADC_Init+0x7a>
                     hadc->Init.Oversampling.Ratio         |
 80022e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022e6:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 80022e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80022ea:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 80022ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80022ee:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80022f0:	ea4c 0202 	orr.w	r2, ip, r2
 80022f4:	f042 0c01 	orr.w	ip, r2, #1
 80022f8:	e7d6      	b.n	80022a8 <HAL_ADC_Init+0xc8>
  uint32_t tmpCFGR2 = 0UL;
 80022fa:	469c      	mov	ip, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022fc:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022fe:	7e62      	ldrb	r2, [r4, #25]
 8002300:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002302:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002306:	7ea5      	ldrb	r5, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002308:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800230c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800230e:	b109      	cbz	r1, 8002314 <HAL_ADC_Init+0x134>
 8002310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002314:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 8002316:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002318:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800231a:	6921      	ldr	r1, [r4, #16]
 800231c:	2900      	cmp	r1, #0
 800231e:	db49      	blt.n	80023b4 <HAL_ADC_Init+0x1d4>
 8002320:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002324:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002326:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800232a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800232e:	f894 1020 	ldrb.w	r1, [r4, #32]
 8002332:	2901      	cmp	r1, #1
 8002334:	d041      	beq.n	80023ba <HAL_ADC_Init+0x1da>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002336:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002338:	b121      	cbz	r1, 8002344 <HAL_ADC_Init+0x164>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800233a:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 800233e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002340:	4329      	orrs	r1, r5
 8002342:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002344:	6825      	ldr	r5, [r4, #0]
 8002346:	68e9      	ldr	r1, [r5, #12]
 8002348:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 800234c:	f421 71f3 	bic.w	r1, r1, #486	; 0x1e6
 8002350:	4311      	orrs	r1, r2
 8002352:	60e9      	str	r1, [r5, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002354:	6825      	ldr	r5, [r4, #0]
 8002356:	692e      	ldr	r6, [r5, #16]
 8002358:	493e      	ldr	r1, [pc, #248]	; (8002454 <HAL_ADC_Init+0x274>)
 800235a:	4031      	ands	r1, r6
 800235c:	ea41 010c 	orr.w	r1, r1, ip
 8002360:	6129      	str	r1, [r5, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002362:	6826      	ldr	r6, [r4, #0]
 8002364:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002366:	6975      	ldr	r5, [r6, #20]
 8002368:	f025 0c07 	bic.w	ip, r5, #7
 800236c:	ea41 010c 	orr.w	r1, r1, ip
 8002370:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002372:	6825      	ldr	r5, [r4, #0]
 8002374:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002376:	6969      	ldr	r1, [r5, #20]
 8002378:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800237c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8002380:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002382:	6921      	ldr	r1, [r4, #16]
 8002384:	bb31      	cbnz	r1, 80023d4 <HAL_ADC_Init+0x1f4>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002386:	6821      	ldr	r1, [r4, #0]
 8002388:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800238a:	f063 030f 	orn	r3, r3, #15
 800238e:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	68d9      	ldr	r1, [r3, #12]
 8002394:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_ADC_Init+0x278>)
 8002396:	400b      	ands	r3, r1
 8002398:	4293      	cmp	r3, r2
 800239a:	d040      	beq.n	800241e <HAL_ADC_Init+0x23e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800239c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800239e:	f023 0312 	bic.w	r3, r3, #18
 80023a2:	f043 0310 	orr.w	r3, r3, #16
 80023a6:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80023b0:	2001      	movs	r0, #1
 80023b2:	e042      	b.n	800243a <HAL_ADC_Init+0x25a>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80023b8:	e7b4      	b.n	8002324 <HAL_ADC_Init+0x144>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023ba:	b915      	cbnz	r5, 80023c2 <HAL_ADC_Init+0x1e2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80023bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023c0:	e7b9      	b.n	8002336 <HAL_ADC_Init+0x156>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80023c4:	f041 0120 	orr.w	r1, r1, #32
 80023c8:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80023cc:	f041 0101 	orr.w	r1, r1, #1
 80023d0:	65e1      	str	r1, [r4, #92]	; 0x5c
 80023d2:	e7b0      	b.n	8002336 <HAL_ADC_Init+0x156>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80023d8:	d1da      	bne.n	8002390 <HAL_ADC_Init+0x1b0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80023da:	2b07      	cmp	r3, #7
 80023dc:	d808      	bhi.n	80023f0 <HAL_ADC_Init+0x210>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80023de:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80023e0:	009d      	lsls	r5, r3, #2
 80023e2:	40e9      	lsrs	r1, r5
 80023e4:	f001 010f 	and.w	r1, r1, #15
 80023e8:	290f      	cmp	r1, #15
 80023ea:	d001      	beq.n	80023f0 <HAL_ADC_Init+0x210>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80023ec:	3301      	adds	r3, #1
 80023ee:	e7f4      	b.n	80023da <HAL_ADC_Init+0x1fa>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d00e      	beq.n	8002412 <HAL_ADC_Init+0x232>
        MODIFY_REG(hadc->Instance->CHSELR,
 80023f4:	6825      	ldr	r5, [r4, #0]
 80023f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023f8:	69e3      	ldr	r3, [r4, #28]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f003 031c 	and.w	r3, r3, #28
 8002402:	f06f 010f 	mvn.w	r1, #15
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800240c:	430b      	orrs	r3, r1
 800240e:	62ab      	str	r3, [r5, #40]	; 0x28
 8002410:	e7be      	b.n	8002390 <HAL_ADC_Init+0x1b0>
        SET_BIT(hadc->Instance->CHSELR,
 8002412:	6821      	ldr	r1, [r4, #0]
 8002414:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002416:	f063 030f 	orn	r3, r3, #15
 800241a:	628b      	str	r3, [r1, #40]	; 0x28
 800241c:	e7b8      	b.n	8002390 <HAL_ADC_Init+0x1b0>
      ADC_CLEAR_ERRORCODE(hadc);
 800241e:	2300      	movs	r3, #0
 8002420:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002424:	f023 0303 	bic.w	r3, r3, #3
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	65a3      	str	r3, [r4, #88]	; 0x58
 800242e:	e004      	b.n	800243a <HAL_ADC_Init+0x25a>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002430:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002432:	f043 0310 	orr.w	r3, r3, #16
 8002436:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002438:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800243a:	b002      	add	sp, #8
 800243c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800243e:	2001      	movs	r0, #1
 8002440:	e7fb      	b.n	800243a <HAL_ADC_Init+0x25a>
 8002442:	bf00      	nop
 8002444:	2000004c 	.word	0x2000004c
 8002448:	053e2d63 	.word	0x053e2d63
 800244c:	1ffffc02 	.word	0x1ffffc02
 8002450:	40012000 	.word	0x40012000
 8002454:	dffffc02 	.word	0xdffffc02
 8002458:	833fffe7 	.word	0x833fffe7

0800245c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	4604      	mov	r4, r0
 8002460:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002462:	6946      	ldr	r6, [r0, #20]
 8002464:	2e08      	cmp	r6, #8
 8002466:	d005      	beq.n	8002474 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002468:	6803      	ldr	r3, [r0, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f013 0f01 	tst.w	r3, #1
 8002470:	d11e      	bne.n	80024b0 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002472:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002474:	f7ff f83e 	bl	80014f4 <HAL_GetTick>
 8002478:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4232      	tst	r2, r6
 8002480:	d11c      	bne.n	80024bc <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002486:	d0f8      	beq.n	800247a <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002488:	f7ff f834 	bl	80014f4 <HAL_GetTick>
 800248c:	1bc3      	subs	r3, r0, r7
 800248e:	42ab      	cmp	r3, r5
 8002490:	d801      	bhi.n	8002496 <HAL_ADC_PollForConversion+0x3a>
 8002492:	2d00      	cmp	r5, #0
 8002494:	d1f1      	bne.n	800247a <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4233      	tst	r3, r6
 800249c:	d1ed      	bne.n	800247a <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800249e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80024a6:	2300      	movs	r3, #0
 80024a8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 80024ac:	2003      	movs	r0, #3
 80024ae:	e028      	b.n	8002502 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80024b2:	f043 0320 	orr.w	r3, r3, #32
 80024b6:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
 80024ba:	e022      	b.n	8002502 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024bc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80024ca:	d115      	bne.n	80024f8 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024cc:	7ea2      	ldrb	r2, [r4, #26]
 80024ce:	b99a      	cbnz	r2, 80024f8 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f012 0f08 	tst.w	r2, #8
 80024d6:	d00f      	beq.n	80024f8 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	f012 0f04 	tst.w	r2, #4
 80024de:	d111      	bne.n	8002504 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	f022 020c 	bic.w	r2, r2, #12
 80024e6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80024e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80024f8:	7e20      	ldrb	r0, [r4, #24]
 80024fa:	b960      	cbnz	r0, 8002516 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	220c      	movs	r2, #12
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002506:	f043 0320 	orr.w	r3, r3, #32
 800250a:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002514:	e7f0      	b.n	80024f8 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002516:	2000      	movs	r0, #0
 8002518:	e7f3      	b.n	8002502 <HAL_ADC_PollForConversion+0xa6>

0800251a <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800251a:	6803      	ldr	r3, [r0, #0]
 800251c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800251e:	4770      	bx	lr

08002520 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002520:	b470      	push	{r4, r5, r6}
 8002522:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002524:	2200      	movs	r2, #0
 8002526:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002528:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800252a:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800252e:	2a01      	cmp	r2, #1
 8002530:	f000 8103 	beq.w	800273a <HAL_ADC_ConfigChannel+0x21a>
 8002534:	4603      	mov	r3, r0
 8002536:	2201      	movs	r2, #1
 8002538:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253c:	6802      	ldr	r2, [r0, #0]
 800253e:	6890      	ldr	r0, [r2, #8]
 8002540:	f010 0f04 	tst.w	r0, #4
 8002544:	d00a      	beq.n	800255c <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002546:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002548:	f042 0220 	orr.w	r2, r2, #32
 800254c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800254e:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002556:	b003      	add	sp, #12
 8002558:	bc70      	pop	{r4, r5, r6}
 800255a:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 800255c:	6848      	ldr	r0, [r1, #4]
 800255e:	2802      	cmp	r0, #2
 8002560:	f000 809c 	beq.w	800269c <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002564:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002568:	d027      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x9a>
 800256a:	4d75      	ldr	r5, [pc, #468]	; (8002740 <HAL_ADC_ConfigChannel+0x220>)
 800256c:	42ac      	cmp	r4, r5
 800256e:	d024      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002570:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002572:	f000 001f 	and.w	r0, r0, #31
 8002576:	250f      	movs	r5, #15
 8002578:	4085      	lsls	r5, r0
 800257a:	ea24 0505 	bic.w	r5, r4, r5
 800257e:	680c      	ldr	r4, [r1, #0]
 8002580:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002584:	2e00      	cmp	r6, #0
 8002586:	d131      	bne.n	80025ec <HAL_ADC_ConfigChannel+0xcc>
 8002588:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800258c:	4084      	lsls	r4, r0
 800258e:	432c      	orrs	r4, r5
 8002590:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002592:	684c      	ldr	r4, [r1, #4]
 8002594:	08a0      	lsrs	r0, r4, #2
 8002596:	3001      	adds	r0, #1
 8002598:	69dd      	ldr	r5, [r3, #28]
 800259a:	42a8      	cmp	r0, r5
 800259c:	d813      	bhi.n	80025c6 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800259e:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80025a0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80025a2:	f004 041f 	and.w	r4, r4, #31
 80025a6:	260f      	movs	r6, #15
 80025a8:	40a6      	lsls	r6, r4
 80025aa:	ea20 0006 	bic.w	r0, r0, r6
 80025ae:	f3c5 6583 	ubfx	r5, r5, #26, #4
 80025b2:	40a5      	lsls	r5, r4
 80025b4:	4328      	orrs	r0, r5
 80025b6:	6290      	str	r0, [r2, #40]	; 0x28
}
 80025b8:	e005      	b.n	80025c6 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80025ba:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80025bc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80025be:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80025c2:	4320      	orrs	r0, r4
 80025c4:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025c6:	681c      	ldr	r4, [r3, #0]
 80025c8:	680d      	ldr	r5, [r1, #0]
 80025ca:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80025cc:	6960      	ldr	r0, [r4, #20]
 80025ce:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 80025d2:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 80025d6:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 80025da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025de:	4302      	orrs	r2, r0
 80025e0:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025e2:	680a      	ldr	r2, [r1, #0]
 80025e4:	2a00      	cmp	r2, #0
 80025e6:	db09      	blt.n	80025fc <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	2000      	movs	r0, #0
 80025ea:	e7b1      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025f0:	b114      	cbz	r4, 80025f8 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80025f2:	fab4 f484 	clz	r4, r4
 80025f6:	e7c9      	b.n	800258c <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80025f8:	2420      	movs	r4, #32
 80025fa:	e7c7      	b.n	800258c <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025fc:	4951      	ldr	r1, [pc, #324]	; (8002744 <HAL_ADC_ConfigChannel+0x224>)
 80025fe:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8002602:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002606:	4c50      	ldr	r4, [pc, #320]	; (8002748 <HAL_ADC_ConfigChannel+0x228>)
 8002608:	42a2      	cmp	r2, r4
 800260a:	d007      	beq.n	800261c <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800260c:	4c4f      	ldr	r4, [pc, #316]	; (800274c <HAL_ADC_ConfigChannel+0x22c>)
 800260e:	42a2      	cmp	r2, r4
 8002610:	d026      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002612:	4c4f      	ldr	r4, [pc, #316]	; (8002750 <HAL_ADC_ConfigChannel+0x230>)
 8002614:	42a2      	cmp	r2, r4
 8002616:	d032      	beq.n	800267e <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002618:	2000      	movs	r0, #0
 800261a:	e799      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800261c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002620:	d1f4      	bne.n	800260c <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002622:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002626:	4847      	ldr	r0, [pc, #284]	; (8002744 <HAL_ADC_ConfigChannel+0x224>)
 8002628:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800262c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002630:	4311      	orrs	r1, r2
 8002632:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002636:	4a47      	ldr	r2, [pc, #284]	; (8002754 <HAL_ADC_ConfigChannel+0x234>)
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	0992      	lsrs	r2, r2, #6
 800263c:	4946      	ldr	r1, [pc, #280]	; (8002758 <HAL_ADC_ConfigChannel+0x238>)
 800263e:	fba1 1202 	umull	r1, r2, r1, r2
 8002642:	0992      	lsrs	r2, r2, #6
 8002644:	3201      	adds	r2, #1
 8002646:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800264e:	e002      	b.n	8002656 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8002650:	9a01      	ldr	r2, [sp, #4]
 8002652:	3a01      	subs	r2, #1
 8002654:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002656:	9a01      	ldr	r2, [sp, #4]
 8002658:	2a00      	cmp	r2, #0
 800265a:	d1f9      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2000      	movs	r0, #0
 800265e:	e777      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002660:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002664:	d1d5      	bne.n	8002612 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002666:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800266a:	4836      	ldr	r0, [pc, #216]	; (8002744 <HAL_ADC_ConfigChannel+0x224>)
 800266c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002670:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002674:	4311      	orrs	r1, r2
 8002676:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267a:	2000      	movs	r0, #0
}
 800267c:	e768      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800267e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002682:	d158      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002684:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002688:	482e      	ldr	r0, [pc, #184]	; (8002744 <HAL_ADC_ConfigChannel+0x224>)
 800268a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800268e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002692:	430a      	orrs	r2, r1
 8002694:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002698:	2000      	movs	r0, #0
}
 800269a:	e759      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800269c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80026a0:	d002      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x188>
 80026a2:	4827      	ldr	r0, [pc, #156]	; (8002740 <HAL_ADC_ConfigChannel+0x220>)
 80026a4:	4284      	cmp	r4, r0
 80026a6:	d106      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80026a8:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026aa:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80026ac:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80026b0:	ea20 0004 	bic.w	r0, r0, r4
 80026b4:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026b6:	680a      	ldr	r2, [r1, #0]
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	db01      	blt.n	80026c0 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026bc:	2000      	movs	r0, #0
 80026be:	e747      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026c0:	4920      	ldr	r1, [pc, #128]	; (8002744 <HAL_ADC_ConfigChannel+0x224>)
 80026c2:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c6:	4820      	ldr	r0, [pc, #128]	; (8002748 <HAL_ADC_ConfigChannel+0x228>)
 80026c8:	4282      	cmp	r2, r0
 80026ca:	d007      	beq.n	80026dc <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80026cc:	481f      	ldr	r0, [pc, #124]	; (800274c <HAL_ADC_ConfigChannel+0x22c>)
 80026ce:	4282      	cmp	r2, r0
 80026d0:	d013      	beq.n	80026fa <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026d2:	481f      	ldr	r0, [pc, #124]	; (8002750 <HAL_ADC_ConfigChannel+0x230>)
 80026d4:	4282      	cmp	r2, r0
 80026d6:	d01f      	beq.n	8002718 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d8:	2000      	movs	r0, #0
 80026da:	e739      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026dc:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026e0:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 80026e4:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 80026e8:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80026ec:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80026f0:	4311      	orrs	r1, r2
 80026f2:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f6:	2000      	movs	r0, #0
}
 80026f8:	e72a      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026fa:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026fe:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8002702:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8002706:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800270a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800270e:	430a      	orrs	r2, r1
 8002710:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002714:	2000      	movs	r0, #0
}
 8002716:	e71b      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002718:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800271c:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8002720:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002724:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002728:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800272c:	430a      	orrs	r2, r1
 800272e:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002732:	2000      	movs	r0, #0
}
 8002734:	e70c      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
 8002736:	2000      	movs	r0, #0
 8002738:	e70a      	b.n	8002550 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800273a:	2002      	movs	r0, #2
 800273c:	e70b      	b.n	8002556 <HAL_ADC_ConfigChannel+0x36>
 800273e:	bf00      	nop
 8002740:	80000004 	.word	0x80000004
 8002744:	40012000 	.word	0x40012000
 8002748:	b0001000 	.word	0xb0001000
 800274c:	b8004000 	.word	0xb8004000
 8002750:	b4002000 	.word	0xb4002000
 8002754:	2000004c 	.word	0x2000004c
 8002758:	053e2d63 	.word	0x053e2d63

0800275c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800275c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800275e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	f012 0f04 	tst.w	r2, #4
 8002766:	d02a      	beq.n	80027be <ADC_ConversionStop+0x62>
 8002768:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	f012 0f02 	tst.w	r2, #2
 8002770:	d107      	bne.n	8002782 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002778:	f022 0217 	bic.w	r2, r2, #23
 800277c:	f042 0210 	orr.w	r2, r2, #16
 8002780:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002782:	f7fe feb7 	bl	80014f4 <HAL_GetTick>
 8002786:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f013 0f04 	tst.w	r3, #4
 8002790:	d013      	beq.n	80027ba <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002792:	f7fe feaf 	bl	80014f4 <HAL_GetTick>
 8002796:	1b43      	subs	r3, r0, r5
 8002798:	2b02      	cmp	r3, #2
 800279a:	d9f5      	bls.n	8002788 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f013 0f04 	tst.w	r3, #4
 80027a4:	d0f0      	beq.n	8002788 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027a8:	f043 0310 	orr.w	r3, r3, #16
 80027ac:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80027b6:	2001      	movs	r0, #1
 80027b8:	e002      	b.n	80027c0 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80027ba:	2000      	movs	r0, #0
 80027bc:	e000      	b.n	80027c0 <ADC_ConversionStop+0x64>
 80027be:	2000      	movs	r0, #0
}
 80027c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080027c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027c4:	b530      	push	{r4, r5, lr}
 80027c6:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027cc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	f012 0f01 	tst.w	r2, #1
 80027d4:	d15b      	bne.n	800288e <ADC_Enable+0xca>
 80027d6:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027d8:	6899      	ldr	r1, [r3, #8]
 80027da:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <ADC_Enable+0xd0>)
 80027dc:	4211      	tst	r1, r2
 80027de:	d117      	bne.n	8002810 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027e6:	f022 0217 	bic.w	r2, r2, #23
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027f0:	4b29      	ldr	r3, [pc, #164]	; (8002898 <ADC_Enable+0xd4>)
 80027f2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027f6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80027fa:	d019      	beq.n	8002830 <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <ADC_Enable+0xd8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <ADC_Enable+0xdc>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	3301      	adds	r3, #1
 800280c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800280e:	e00c      	b.n	800282a <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002810:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002818:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002820:	2001      	movs	r0, #1
 8002822:	e035      	b.n	8002890 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8002824:	9b01      	ldr	r3, [sp, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800282a:	9b01      	ldr	r3, [sp, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f9      	bne.n	8002824 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002830:	7e63      	ldrb	r3, [r4, #25]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002836:	2000      	movs	r0, #0
 8002838:	e02a      	b.n	8002890 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 800283a:	f7fe fe5b 	bl	80014f4 <HAL_GetTick>
 800283e:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	f012 0f01 	tst.w	r2, #1
 8002848:	d11f      	bne.n	800288a <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	f012 0f01 	tst.w	r2, #1
 8002850:	d107      	bne.n	8002862 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002858:	f022 0217 	bic.w	r2, r2, #23
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002862:	f7fe fe47 	bl	80014f4 <HAL_GetTick>
 8002866:	1b40      	subs	r0, r0, r5
 8002868:	2802      	cmp	r0, #2
 800286a:	d9e9      	bls.n	8002840 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f013 0f01 	tst.w	r3, #1
 8002874:	d1e4      	bne.n	8002840 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002876:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8002886:	2001      	movs	r0, #1
 8002888:	e002      	b.n	8002890 <ADC_Enable+0xcc>
  return HAL_OK;
 800288a:	2000      	movs	r0, #0
 800288c:	e000      	b.n	8002890 <ADC_Enable+0xcc>
 800288e:	2000      	movs	r0, #0
}
 8002890:	b003      	add	sp, #12
 8002892:	bd30      	pop	{r4, r5, pc}
 8002894:	80000017 	.word	0x80000017
 8002898:	40012000 	.word	0x40012000
 800289c:	2000004c 	.word	0x2000004c
 80028a0:	053e2d63 	.word	0x053e2d63

080028a4 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f013 0f04 	tst.w	r3, #4
 80028ac:	d128      	bne.n	8002900 <HAL_ADC_Start+0x5c>
{
 80028ae:	b510      	push	{r4, lr}
 80028b0:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80028b2:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d024      	beq.n	8002904 <HAL_ADC_Start+0x60>
 80028ba:	2301      	movs	r3, #1
 80028bc:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80028c0:	f7ff ff80 	bl	80027c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80028c4:	b9c0      	cbnz	r0, 80028f8 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80028c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80028d6:	2300      	movs	r3, #0
 80028d8:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028da:	6822      	ldr	r2, [r4, #0]
 80028dc:	211c      	movs	r1, #28
 80028de:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80028e0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028e4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80028e6:	6893      	ldr	r3, [r2, #8]
 80028e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ec:	f023 0317 	bic.w	r3, r3, #23
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6093      	str	r3, [r2, #8]
}
 80028f6:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80028f8:	2300      	movs	r3, #0
 80028fa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80028fe:	e7fa      	b.n	80028f6 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8002900:	2002      	movs	r0, #2
}
 8002902:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002904:	2002      	movs	r0, #2
 8002906:	e7f6      	b.n	80028f6 <HAL_ADC_Start+0x52>

08002908 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002908:	b538      	push	{r3, r4, r5, lr}
 800290a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800290c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800290e:	6893      	ldr	r3, [r2, #8]
 8002910:	f013 0302 	ands.w	r3, r3, #2
 8002914:	d000      	beq.n	8002918 <ADC_Disable+0x10>
 8002916:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002918:	6891      	ldr	r1, [r2, #8]
 800291a:	f011 0f01 	tst.w	r1, #1
 800291e:	d039      	beq.n	8002994 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002920:	2b00      	cmp	r3, #0
 8002922:	d139      	bne.n	8002998 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002924:	6893      	ldr	r3, [r2, #8]
 8002926:	f003 0305 	and.w	r3, r3, #5
 800292a:	2b01      	cmp	r3, #1
 800292c:	d009      	beq.n	8002942 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002930:	f043 0310 	orr.w	r3, r3, #16
 8002934:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800293e:	2001      	movs	r0, #1
 8002940:	e029      	b.n	8002996 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002942:	6893      	ldr	r3, [r2, #8]
 8002944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002948:	f023 0317 	bic.w	r3, r3, #23
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	2203      	movs	r2, #3
 8002956:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002958:	f7fe fdcc 	bl	80014f4 <HAL_GetTick>
 800295c:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f013 0f01 	tst.w	r3, #1
 8002966:	d013      	beq.n	8002990 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002968:	f7fe fdc4 	bl	80014f4 <HAL_GetTick>
 800296c:	1b40      	subs	r0, r0, r5
 800296e:	2802      	cmp	r0, #2
 8002970:	d9f5      	bls.n	800295e <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f013 0f01 	tst.w	r3, #1
 800297a:	d0f0      	beq.n	800295e <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800297e:	f043 0310 	orr.w	r3, r3, #16
 8002982:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002984:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800298c:	2001      	movs	r0, #1
 800298e:	e002      	b.n	8002996 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002990:	2000      	movs	r0, #0
 8002992:	e000      	b.n	8002996 <ADC_Disable+0x8e>
 8002994:	2000      	movs	r0, #0
}
 8002996:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002998:	2000      	movs	r0, #0
 800299a:	e7fc      	b.n	8002996 <ADC_Disable+0x8e>

0800299c <HAL_ADC_DeInit>:
{
 800299c:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800299e:	2800      	cmp	r0, #0
 80029a0:	d04c      	beq.n	8002a3c <HAL_ADC_DeInit+0xa0>
 80029a2:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80029a4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80029ac:	f7ff fed6 	bl	800275c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80029b0:	4606      	mov	r6, r0
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d033      	beq.n	8002a1e <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	6853      	ldr	r3, [r2, #4]
 80029ba:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80029be:	f023 0303 	bic.w	r3, r3, #3
 80029c2:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	f240 329f 	movw	r2, #927	; 0x39f
 80029ca:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80029cc:	6822      	ldr	r2, [r4, #0]
 80029ce:	68d1      	ldr	r1, [r2, #12]
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_ADC_DeInit+0xa4>)
 80029d2:	400b      	ands	r3, r1
 80029d4:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	6913      	ldr	r3, [r2, #16]
 80029da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80029de:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	6953      	ldr	r3, [r2, #20]
 80029e4:	f023 0307 	bic.w	r3, r3, #7
 80029e8:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	6a13      	ldr	r3, [r2, #32]
 80029ee:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80029f2:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f8:	2500      	movs	r5, #0
 80029fa:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80029fc:	4a11      	ldr	r2, [pc, #68]	; (8002a44 <HAL_ADC_DeInit+0xa8>)
 80029fe:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8002a02:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002a06:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f7fe fa66 	bl	8000edc <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002a10:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8002a12:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8002a14:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8002a16:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff ff72 	bl	8002908 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002a24:	4606      	mov	r6, r0
 8002a26:	b908      	cbnz	r0, 8002a2c <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002a2c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002a2e:	6893      	ldr	r3, [r2, #8]
 8002a30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a34:	f023 0317 	bic.w	r3, r3, #23
 8002a38:	6093      	str	r3, [r2, #8]
}
 8002a3a:	e7bc      	b.n	80029b6 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8002a3c:	2601      	movs	r6, #1
 8002a3e:	e7ec      	b.n	8002a1a <HAL_ADC_DeInit+0x7e>
 8002a40:	833e0200 	.word	0x833e0200
 8002a44:	40012000 	.word	0x40012000

08002a48 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002a48:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d019      	beq.n	8002a84 <HAL_ADC_Stop+0x3c>
{
 8002a50:	b510      	push	{r4, lr}
 8002a52:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002a54:	2301      	movs	r3, #1
 8002a56:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002a5a:	f7ff fe7f 	bl	800275c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002a5e:	b118      	cbz	r0, 8002a68 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8002a60:	2300      	movs	r3, #0
 8002a62:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8002a66:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff ff4d 	bl	8002908 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d1f6      	bne.n	8002a60 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8002a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	65a3      	str	r3, [r4, #88]	; 0x58
 8002a82:	e7ed      	b.n	8002a60 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8002a84:	2002      	movs	r0, #2
}
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002a88:	b510      	push	{r4, lr}
 8002a8a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002a90:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d045      	beq.n	8002b24 <HAL_ADCEx_Calibration_Start+0x9c>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002aa0:	f7ff ff32 	bl	8002908 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	f012 0f01 	tst.w	r2, #1
 8002aac:	d008      	beq.n	8002ac0 <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ab0:	f043 0310 	orr.w	r3, r3, #16
 8002ab4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8002abc:	b002      	add	sp, #8
 8002abe:	bd10      	pop	{r4, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002ac0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002ac2:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8002ac6:	f042 0202 	orr.w	r2, r2, #2
 8002aca:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002acc:	68d9      	ldr	r1, [r3, #12]
 8002ace:	f001 0103 	and.w	r1, r1, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	f022 0203 	bic.w	r2, r2, #3
 8002ad8:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	6893      	ldr	r3, [r2, #8]
 8002ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae2:	6093      	str	r3, [r2, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ae4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	db09      	blt.n	8002b00 <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002af4:	f023 0303 	bic.w	r3, r3, #3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	65a3      	str	r3, [r4, #88]	; 0x58
 8002afe:	e7da      	b.n	8002ab6 <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 8002b00:	9b01      	ldr	r3, [sp, #4]
 8002b02:	3301      	adds	r3, #1
 8002b04:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b06:	9b01      	ldr	r3, [sp, #4]
 8002b08:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8002b0c:	d3ea      	bcc.n	8002ae4 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8002b0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b10:	f023 0312 	bic.w	r3, r3, #18
 8002b14:	f043 0310 	orr.w	r3, r3, #16
 8002b18:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002b20:	2001      	movs	r0, #1
 8002b22:	e7cb      	b.n	8002abc <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 8002b24:	2002      	movs	r0, #2
 8002b26:	e7c9      	b.n	8002abc <HAL_ADCEx_Calibration_Start+0x34>

08002b28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b28:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b2a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	0200      	lsls	r0, r0, #8
 8002b36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b3a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b44:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_NVIC_SetPriority+0x68>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b56:	f1c3 0c07 	rsb	ip, r3, #7
 8002b5a:	f1bc 0f04 	cmp.w	ip, #4
 8002b5e:	bf28      	it	cs
 8002b60:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b64:	f103 0e04 	add.w	lr, r3, #4
 8002b68:	f1be 0f06 	cmp.w	lr, #6
 8002b6c:	d918      	bls.n	8002ba0 <HAL_NVIC_SetPriority+0x54>
 8002b6e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8002b74:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b78:	ea21 010c 	bic.w	r1, r1, ip
 8002b7c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7e:	fa0e fe03 	lsl.w	lr, lr, r3
 8002b82:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b86:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	db0b      	blt.n	8002ba4 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b94:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b98:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b9c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e7e5      	b.n	8002b70 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	f000 000f 	and.w	r0, r0, #15
 8002ba8:	0112      	lsls	r2, r2, #4
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4b02      	ldr	r3, [pc, #8]	; (8002bb8 <HAL_NVIC_SetPriority+0x6c>)
 8002bae:	541a      	strb	r2, [r3, r0]
 8002bb0:	e7f4      	b.n	8002b9c <HAL_NVIC_SetPriority+0x50>
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00
 8002bb8:	e000ed14 	.word	0xe000ed14

08002bbc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	db07      	blt.n	8002bd0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc0:	f000 021f 	and.w	r2, r0, #31
 8002bc4:	0940      	lsrs	r0, r0, #5
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4093      	lsls	r3, r2
 8002bca:	4a02      	ldr	r2, [pc, #8]	; (8002bd4 <HAL_NVIC_EnableIRQ+0x18>)
 8002bcc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	db0c      	blt.n	8002bf6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bdc:	f000 021f 	and.w	r2, r0, #31
 8002be0:	0940      	lsrs	r0, r0, #5
 8002be2:	2301      	movs	r3, #1
 8002be4:	4093      	lsls	r3, r2
 8002be6:	3020      	adds	r0, #32
 8002be8:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <HAL_NVIC_DisableIRQ+0x20>)
 8002bea:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bf2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bfc:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bfe:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002c00:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8002c04:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c08:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002c0a:	b124      	cbz	r4, 8002c16 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c0c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002c0e:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8002c12:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c16:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002c18:	f004 0c1c 	and.w	ip, r4, #28
 8002c1c:	2401      	movs	r4, #1
 8002c1e:	fa04 f40c 	lsl.w	r4, r4, ip
 8002c22:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8002c26:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c2a:	6804      	ldr	r4, [r0, #0]
 8002c2c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c2e:	6883      	ldr	r3, [r0, #8]
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d005      	beq.n	8002c40 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c34:	6803      	ldr	r3, [r0, #0]
 8002c36:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c38:	6803      	ldr	r3, [r0, #0]
 8002c3a:	60da      	str	r2, [r3, #12]
  }
}
 8002c3c:	bc10      	pop	{r4}
 8002c3e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002c40:	6803      	ldr	r3, [r0, #0]
 8002c42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c44:	6803      	ldr	r3, [r0, #0]
 8002c46:	60d9      	str	r1, [r3, #12]
 8002c48:	e7f8      	b.n	8002c3c <DMA_SetConfig+0x40>
	...

08002c4c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c4c:	6803      	ldr	r3, [r0, #0]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d816      	bhi.n	8002c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002c54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c56:	f022 0203 	bic.w	r2, r2, #3
 8002c5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002c5e:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8002c62:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	3b08      	subs	r3, #8
 8002c68:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8002c72:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2201      	movs	r2, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002c80:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002c82:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c84:	f022 0103 	bic.w	r1, r2, #3
 8002c88:	4a08      	ldr	r2, [pc, #32]	; (8002cac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8002c8a:	440a      	add	r2, r1
 8002c8c:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3b08      	subs	r3, #8
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	3307      	adds	r3, #7
 8002c9c:	e7e8      	b.n	8002c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8002c9e:	bf00      	nop
 8002ca0:	40020407 	.word	0x40020407
 8002ca4:	cccccccd 	.word	0xcccccccd
 8002ca8:	40020880 	.word	0x40020880
 8002cac:	4002081c 	.word	0x4002081c

08002cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cb0:	6843      	ldr	r3, [r0, #4]
 8002cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002cb8:	441a      	add	r2, r3
 8002cba:	0092      	lsls	r2, r2, #2
 8002cbc:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cbe:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8002cc0:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2201      	movs	r2, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	1000823f 	.word	0x1000823f
 8002cd8:	40020940 	.word	0x40020940

08002cdc <HAL_DMA_Init>:
  if (hdma == NULL)
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d060      	beq.n	8002da2 <HAL_DMA_Init+0xc6>
{
 8002ce0:	b510      	push	{r4, lr}
 8002ce2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ce4:	6802      	ldr	r2, [r0, #0]
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <HAL_DMA_Init+0xcc>)
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d842      	bhi.n	8002d72 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cec:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_DMA_Init+0xd0>)
 8002cee:	4413      	add	r3, r2
 8002cf0:	492f      	ldr	r1, [pc, #188]	; (8002db0 <HAL_DMA_Init+0xd4>)
 8002cf2:	fba1 1303 	umull	r1, r3, r1, r3
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_DMA_Init+0xd8>)
 8002cfe:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d00:	2302      	movs	r3, #2
 8002d02:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d10:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002d12:	6821      	ldr	r1, [r4, #0]
 8002d14:	680a      	ldr	r2, [r1, #0]
 8002d16:	68a3      	ldr	r3, [r4, #8]
 8002d18:	68e0      	ldr	r0, [r4, #12]
 8002d1a:	4303      	orrs	r3, r0
 8002d1c:	6920      	ldr	r0, [r4, #16]
 8002d1e:	4303      	orrs	r3, r0
 8002d20:	6960      	ldr	r0, [r4, #20]
 8002d22:	4303      	orrs	r3, r0
 8002d24:	69a0      	ldr	r0, [r4, #24]
 8002d26:	4303      	orrs	r3, r0
 8002d28:	69e0      	ldr	r0, [r4, #28]
 8002d2a:	4303      	orrs	r3, r0
 8002d2c:	6a20      	ldr	r0, [r4, #32]
 8002d2e:	4303      	orrs	r3, r0
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7ff ff89 	bl	8002c4c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d3a:	68a3      	ldr	r3, [r4, #8]
 8002d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d40:	d022      	beq.n	8002d88 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d42:	6863      	ldr	r3, [r4, #4]
 8002d44:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d4a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002d50:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d919      	bls.n	8002d8e <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d5e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d60:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d62:	2000      	movs	r0, #0
 8002d64:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002d6c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002d70:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_DMA_Init+0xdc>)
 8002d74:	4413      	add	r3, r2
 8002d76:	490e      	ldr	r1, [pc, #56]	; (8002db0 <HAL_DMA_Init+0xd4>)
 8002d78:	fba1 1303 	umull	r1, r3, r1, r3
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_DMA_Init+0xe0>)
 8002d84:	6403      	str	r3, [r0, #64]	; 0x40
 8002d86:	e7bb      	b.n	8002d00 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6063      	str	r3, [r4, #4]
 8002d8c:	e7d9      	b.n	8002d42 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f7ff ff8e 	bl	8002cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d9c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	e7df      	b.n	8002d62 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8002da2:	2001      	movs	r0, #1
}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40020407 	.word	0x40020407
 8002dac:	bffdfff8 	.word	0xbffdfff8
 8002db0:	cccccccd 	.word	0xcccccccd
 8002db4:	40020000 	.word	0x40020000
 8002db8:	bffdfbf8 	.word	0xbffdfbf8
 8002dbc:	40020400 	.word	0x40020400

08002dc0 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d04b      	beq.n	8002e5c <HAL_DMA_DeInit+0x9c>
{
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8002dc8:	6802      	ldr	r2, [r0, #0]
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dd2:	6802      	ldr	r2, [r0, #0]
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_DMA_DeInit+0xa0>)
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d82c      	bhi.n	8002e34 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_DMA_DeInit+0xa4>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	4922      	ldr	r1, [pc, #136]	; (8002e68 <HAL_DMA_DeInit+0xa8>)
 8002de0:	fba1 1303 	umull	r1, r3, r1, r3
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_DMA_DeInit+0xac>)
 8002dec:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8002dee:	2500      	movs	r5, #0
 8002df0:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002df2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002df4:	f003 021c 	and.w	r2, r3, #28
 8002df8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	4093      	lsls	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7ff ff23 	bl	8002c4c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8002e06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e08:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002e0e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e10:	6863      	ldr	r3, [r4, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d918      	bls.n	8002e4a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8002e18:	2000      	movs	r0, #0
 8002e1a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002e1c:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e1e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8002e20:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002e22:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002e24:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002e26:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e28:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8002e2a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002e2e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002e32:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_DMA_DeInit+0xb0>)
 8002e36:	4413      	add	r3, r2
 8002e38:	490b      	ldr	r1, [pc, #44]	; (8002e68 <HAL_DMA_DeInit+0xa8>)
 8002e3a:	fba1 1303 	umull	r1, r3, r1, r3
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_DMA_DeInit+0xb4>)
 8002e46:	6403      	str	r3, [r0, #64]	; 0x40
 8002e48:	e7d1      	b.n	8002dee <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff ff30 	bl	8002cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e52:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e56:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	e7dd      	b.n	8002e18 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8002e5c:	2001      	movs	r0, #1
}
 8002e5e:	4770      	bx	lr
 8002e60:	40020407 	.word	0x40020407
 8002e64:	bffdfff8 	.word	0xbffdfff8
 8002e68:	cccccccd 	.word	0xcccccccd
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	bffdfbf8 	.word	0xbffdfbf8
 8002e74:	40020400 	.word	0x40020400

08002e78 <HAL_DMA_Start_IT>:
{
 8002e78:	b538      	push	{r3, r4, r5, lr}
 8002e7a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002e7c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002e80:	2801      	cmp	r0, #1
 8002e82:	d043      	beq.n	8002f0c <HAL_DMA_Start_IT+0x94>
 8002e84:	2001      	movs	r0, #1
 8002e86:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8002e8a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8002e8e:	b2c0      	uxtb	r0, r0
 8002e90:	2801      	cmp	r0, #1
 8002e92:	d006      	beq.n	8002ea2 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8002e9e:	2001      	movs	r0, #1
}
 8002ea0:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002eac:	6825      	ldr	r5, [r4, #0]
 8002eae:	6828      	ldr	r0, [r5, #0]
 8002eb0:	f020 0001 	bic.w	r0, r0, #1
 8002eb4:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7ff fea0 	bl	8002bfc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002ebc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ebe:	b1d3      	cbz	r3, 8002ef6 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	f043 030e 	orr.w	r3, r3, #14
 8002ec8:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002ed2:	d003      	beq.n	8002edc <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eda:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002edc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ede:	b11b      	cbz	r3, 8002ee8 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002ee8:	6822      	ldr	r2, [r4, #0]
 8002eea:	6813      	ldr	r3, [r2, #0]
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	e7d4      	b.n	8002ea0 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	6813      	ldr	r3, [r2, #0]
 8002efa:	f023 0304 	bic.w	r3, r3, #4
 8002efe:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f00:	6822      	ldr	r2, [r4, #0]
 8002f02:	6813      	ldr	r3, [r2, #0]
 8002f04:	f043 030a 	orr.w	r3, r3, #10
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e7de      	b.n	8002eca <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	e7c7      	b.n	8002ea0 <HAL_DMA_Start_IT+0x28>

08002f10 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002f10:	4603      	mov	r3, r0
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d034      	beq.n	8002f80 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f16:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	2a02      	cmp	r2, #2
 8002f1e:	d006      	beq.n	8002f2e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f20:	2204      	movs	r2, #4
 8002f22:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002f24:	2200      	movs	r2, #0
 8002f26:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f2e:	6801      	ldr	r1, [r0, #0]
 8002f30:	680a      	ldr	r2, [r1, #0]
 8002f32:	f022 020e 	bic.w	r2, r2, #14
 8002f36:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f38:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002f3a:	680a      	ldr	r2, [r1, #0]
 8002f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f40:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f42:	6801      	ldr	r1, [r0, #0]
 8002f44:	680a      	ldr	r2, [r1, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f4e:	f002 011c 	and.w	r1, r2, #28
 8002f52:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002f54:	2201      	movs	r2, #1
 8002f56:	408a      	lsls	r2, r1
 8002f58:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f5e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f62:	b132      	cbz	r2, 8002f72 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f64:	6811      	ldr	r1, [r2, #0]
 8002f66:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002f6a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f6e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002f70:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8002f7e:	4770      	bx	lr
    return HAL_ERROR;
 8002f80:	2001      	movs	r0, #1
}
 8002f82:	4770      	bx	lr

08002f84 <HAL_DMA_Abort_IT>:
{
 8002f84:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f86:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f90:	2304      	movs	r3, #4
 8002f92:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002f94:	2001      	movs	r0, #1
}
 8002f96:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f98:	6802      	ldr	r2, [r0, #0]
 8002f9a:	6813      	ldr	r3, [r2, #0]
 8002f9c:	f023 030e 	bic.w	r3, r3, #14
 8002fa0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002fa2:	6802      	ldr	r2, [r0, #0]
 8002fa4:	6813      	ldr	r3, [r2, #0]
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fac:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002fae:	6813      	ldr	r3, [r2, #0]
 8002fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fb6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fb8:	f003 021c 	and.w	r2, r3, #28
 8002fbc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fc4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002fc6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002fc8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002fca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002fcc:	b133      	cbz	r3, 8002fdc <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fd6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002fd8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002fda:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8002fe8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002fea:	b113      	cbz	r3, 8002ff2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8002fec:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2000      	movs	r0, #0
 8002ff0:	e7d1      	b.n	8002f96 <HAL_DMA_Abort_IT+0x12>
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	e7cf      	b.n	8002f96 <HAL_DMA_Abort_IT+0x12>
	...

08002ff8 <HAL_DMA_IRQHandler>:
{
 8002ff8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ffa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ffc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002ffe:	6804      	ldr	r4, [r0, #0]
 8003000:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003002:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003004:	f003 031c 	and.w	r3, r3, #28
 8003008:	2204      	movs	r2, #4
 800300a:	409a      	lsls	r2, r3
 800300c:	420a      	tst	r2, r1
 800300e:	d015      	beq.n	800303c <HAL_DMA_IRQHandler+0x44>
 8003010:	f015 0f04 	tst.w	r5, #4
 8003014:	d012      	beq.n	800303c <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	f013 0f20 	tst.w	r3, #32
 800301c:	d103      	bne.n	8003026 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	f023 0304 	bic.w	r3, r3, #4
 8003024:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003026:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003028:	f003 021c 	and.w	r2, r3, #28
 800302c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800302e:	2304      	movs	r3, #4
 8003030:	4093      	lsls	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003034:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003036:	b103      	cbz	r3, 800303a <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003038:	4798      	blx	r3
}
 800303a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800303c:	2202      	movs	r2, #2
 800303e:	409a      	lsls	r2, r3
 8003040:	420a      	tst	r2, r1
 8003042:	d028      	beq.n	8003096 <HAL_DMA_IRQHandler+0x9e>
 8003044:	f015 0f02 	tst.w	r5, #2
 8003048:	d025      	beq.n	8003096 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	f013 0f20 	tst.w	r3, #32
 8003050:	d106      	bne.n	8003060 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	f023 030a 	bic.w	r3, r3, #10
 8003058:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800305a:	2301      	movs	r3, #1
 800305c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003060:	6802      	ldr	r2, [r0, #0]
 8003062:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_DMA_IRQHandler+0xdc>)
 8003064:	429a      	cmp	r2, r3
 8003066:	d90e      	bls.n	8003086 <HAL_DMA_IRQHandler+0x8e>
 8003068:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800306a:	f003 021c 	and.w	r2, r3, #28
 800306e:	2302      	movs	r3, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_DMA_IRQHandler+0xe0>)
 8003074:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003076:	2300      	movs	r3, #0
 8003078:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 800307c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0db      	beq.n	800303a <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003082:	4798      	blx	r3
 8003084:	e7d9      	b.n	800303a <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003086:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003088:	f003 021c 	and.w	r2, r3, #28
 800308c:	2302      	movs	r3, #2
 800308e:	4093      	lsls	r3, r2
 8003090:	4a12      	ldr	r2, [pc, #72]	; (80030dc <HAL_DMA_IRQHandler+0xe4>)
 8003092:	6053      	str	r3, [r2, #4]
 8003094:	e7ef      	b.n	8003076 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003096:	2208      	movs	r2, #8
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	420b      	tst	r3, r1
 800309e:	d0cc      	beq.n	800303a <HAL_DMA_IRQHandler+0x42>
 80030a0:	f015 0f08 	tst.w	r5, #8
 80030a4:	d0c9      	beq.n	800303a <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	f023 030e 	bic.w	r3, r3, #14
 80030ac:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80030b0:	f003 031c 	and.w	r3, r3, #28
 80030b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80030b6:	2201      	movs	r2, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030be:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80030c0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80030c4:	2300      	movs	r3, #0
 80030c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80030ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0b4      	beq.n	800303a <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80030d0:	4798      	blx	r3
  return;
 80030d2:	e7b2      	b.n	800303a <HAL_DMA_IRQHandler+0x42>
 80030d4:	40020080 	.word	0x40020080
 80030d8:	40020400 	.word	0x40020400
 80030dc:	40020000 	.word	0x40020000

080030e0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80030e0:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80030e2:	4608      	mov	r0, r1
 80030e4:	b909      	cbnz	r1, 80030ea <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80030e6:	605a      	str	r2, [r3, #4]
      break;
 80030e8:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 80030ea:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 80030ec:	4770      	bx	lr

080030ee <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80030ee:	b110      	cbz	r0, 80030f6 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80030f0:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80030f2:	2000      	movs	r0, #0
 80030f4:	4770      	bx	lr
    return HAL_ERROR;
 80030f6:	2001      	movs	r0, #1
  }
}
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80030fe:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003100:	e069      	b.n	80031d6 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003102:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003104:	005e      	lsls	r6, r3, #1
 8003106:	2403      	movs	r4, #3
 8003108:	40b4      	lsls	r4, r6
 800310a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310e:	68cc      	ldr	r4, [r1, #12]
 8003110:	40b4      	lsls	r4, r6
 8003112:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003114:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003116:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003118:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311c:	684c      	ldr	r4, [r1, #4]
 800311e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003122:	409c      	lsls	r4, r3
 8003124:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003126:	6044      	str	r4, [r0, #4]
 8003128:	e066      	b.n	80031f8 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800312a:	08dd      	lsrs	r5, r3, #3
 800312c:	3508      	adds	r5, #8
 800312e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003132:	f003 0c07 	and.w	ip, r3, #7
 8003136:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800313a:	f04f 0e0f 	mov.w	lr, #15
 800313e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003142:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003146:	690c      	ldr	r4, [r1, #16]
 8003148:	fa04 f40c 	lsl.w	r4, r4, ip
 800314c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003150:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003154:	e067      	b.n	8003226 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003156:	2402      	movs	r4, #2
 8003158:	e000      	b.n	800315c <HAL_GPIO_Init+0x60>
 800315a:	2400      	movs	r4, #0
 800315c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003160:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003162:	f10c 0c02 	add.w	ip, ip, #2
 8003166:	4d4b      	ldr	r5, [pc, #300]	; (8003294 <HAL_GPIO_Init+0x198>)
 8003168:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800316c:	4c4a      	ldr	r4, [pc, #296]	; (8003298 <HAL_GPIO_Init+0x19c>)
 800316e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003172:	43d4      	mvns	r4, r2
 8003174:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003178:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800317c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8003180:	d001      	beq.n	8003186 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8003182:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003186:	4d44      	ldr	r5, [pc, #272]	; (8003298 <HAL_GPIO_Init+0x19c>)
 8003188:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800318c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003190:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003194:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003198:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
 800319c:	d001      	beq.n	80031a2 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800319e:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80031a2:	4d3d      	ldr	r5, [pc, #244]	; (8003298 <HAL_GPIO_Init+0x19c>)
 80031a4:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80031aa:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ae:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80031b2:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 80031b6:	d001      	beq.n	80031bc <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80031b8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80031bc:	4d36      	ldr	r5, [pc, #216]	; (8003298 <HAL_GPIO_Init+0x19c>)
 80031be:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80031c0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80031c2:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031c4:	684e      	ldr	r6, [r1, #4]
 80031c6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80031ca:	d001      	beq.n	80031d0 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 80031cc:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80031d0:	4a31      	ldr	r2, [pc, #196]	; (8003298 <HAL_GPIO_Init+0x19c>)
 80031d2:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80031d4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d6:	680a      	ldr	r2, [r1, #0]
 80031d8:	fa32 f403 	lsrs.w	r4, r2, r3
 80031dc:	d058      	beq.n	8003290 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031de:	f04f 0c01 	mov.w	ip, #1
 80031e2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80031e6:	ea1c 0202 	ands.w	r2, ip, r2
 80031ea:	d0f3      	beq.n	80031d4 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ec:	684c      	ldr	r4, [r1, #4]
 80031ee:	f004 0403 	and.w	r4, r4, #3
 80031f2:	3c01      	subs	r4, #1
 80031f4:	2c01      	cmp	r4, #1
 80031f6:	d984      	bls.n	8003102 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f8:	684c      	ldr	r4, [r1, #4]
 80031fa:	f004 0403 	and.w	r4, r4, #3
 80031fe:	2c03      	cmp	r4, #3
 8003200:	d00c      	beq.n	800321c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003202:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003204:	005d      	lsls	r5, r3, #1
 8003206:	f04f 0c03 	mov.w	ip, #3
 800320a:	fa0c fc05 	lsl.w	ip, ip, r5
 800320e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003212:	688c      	ldr	r4, [r1, #8]
 8003214:	40ac      	lsls	r4, r5
 8003216:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800321a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321c:	684c      	ldr	r4, [r1, #4]
 800321e:	f004 0403 	and.w	r4, r4, #3
 8003222:	2c02      	cmp	r4, #2
 8003224:	d081      	beq.n	800312a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003226:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003228:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800322c:	f04f 0c03 	mov.w	ip, #3
 8003230:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003234:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003238:	684c      	ldr	r4, [r1, #4]
 800323a:	f004 0403 	and.w	r4, r4, #3
 800323e:	fa04 f40e 	lsl.w	r4, r4, lr
 8003242:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003246:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003248:	684c      	ldr	r4, [r1, #4]
 800324a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800324e:	d0c1      	beq.n	80031d4 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003250:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003254:	f10c 0502 	add.w	r5, ip, #2
 8003258:	4c0e      	ldr	r4, [pc, #56]	; (8003294 <HAL_GPIO_Init+0x198>)
 800325a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800325e:	f003 0e03 	and.w	lr, r3, #3
 8003262:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003266:	2407      	movs	r4, #7
 8003268:	fa04 f40e 	lsl.w	r4, r4, lr
 800326c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003270:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003274:	f43f af71 	beq.w	800315a <HAL_GPIO_Init+0x5e>
 8003278:	4c08      	ldr	r4, [pc, #32]	; (800329c <HAL_GPIO_Init+0x1a0>)
 800327a:	42a0      	cmp	r0, r4
 800327c:	d006      	beq.n	800328c <HAL_GPIO_Init+0x190>
 800327e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003282:	42a0      	cmp	r0, r4
 8003284:	f43f af67 	beq.w	8003156 <HAL_GPIO_Init+0x5a>
 8003288:	2407      	movs	r4, #7
 800328a:	e767      	b.n	800315c <HAL_GPIO_Init+0x60>
 800328c:	2401      	movs	r4, #1
 800328e:	e765      	b.n	800315c <HAL_GPIO_Init+0x60>
  }
}
 8003290:	bd70      	pop	{r4, r5, r6, pc}
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	58000800 	.word	0x58000800
 800329c:	48000400 	.word	0x48000400

080032a0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80032a0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80032a2:	fa31 f203 	lsrs.w	r2, r1, r3
 80032a6:	d071      	beq.n	800338c <HAL_GPIO_DeInit+0xec>
{
 80032a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032aa:	e02e      	b.n	800330a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80032ac:	2502      	movs	r5, #2
 80032ae:	e000      	b.n	80032b2 <HAL_GPIO_DeInit+0x12>
 80032b0:	2500      	movs	r5, #0
 80032b2:	fa05 f50c 	lsl.w	r5, r5, ip
 80032b6:	42a5      	cmp	r5, r4
 80032b8:	d049      	beq.n	800334e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80032ba:	6804      	ldr	r4, [r0, #0]
 80032bc:	005d      	lsls	r5, r3, #1
 80032be:	f04f 0c03 	mov.w	ip, #3
 80032c2:	fa0c fc05 	lsl.w	ip, ip, r5
 80032c6:	ea44 040c 	orr.w	r4, r4, ip
 80032ca:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80032cc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80032d0:	f10e 0e08 	add.w	lr, lr, #8
 80032d4:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80032d8:	f003 0607 	and.w	r6, r3, #7
 80032dc:	00b6      	lsls	r6, r6, #2
 80032de:	250f      	movs	r5, #15
 80032e0:	40b5      	lsls	r5, r6
 80032e2:	ea24 0405 	bic.w	r4, r4, r5
 80032e6:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ea:	6884      	ldr	r4, [r0, #8]
 80032ec:	ea24 040c 	bic.w	r4, r4, ip
 80032f0:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80032f2:	6844      	ldr	r4, [r0, #4]
 80032f4:	ea24 0202 	bic.w	r2, r4, r2
 80032f8:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032fa:	68c2      	ldr	r2, [r0, #12]
 80032fc:	ea22 020c 	bic.w	r2, r2, ip
 8003300:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003302:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003304:	fa31 f203 	lsrs.w	r2, r1, r3
 8003308:	d03f      	beq.n	800338a <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800330a:	2201      	movs	r2, #1
 800330c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800330e:	ea12 0701 	ands.w	r7, r2, r1
 8003312:	d0f6      	beq.n	8003302 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003314:	089e      	lsrs	r6, r3, #2
 8003316:	1cb5      	adds	r5, r6, #2
 8003318:	4c1d      	ldr	r4, [pc, #116]	; (8003390 <HAL_GPIO_DeInit+0xf0>)
 800331a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800331e:	f003 0c03 	and.w	ip, r3, #3
 8003322:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003326:	f04f 0e07 	mov.w	lr, #7
 800332a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800332e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003332:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003336:	d0bb      	beq.n	80032b0 <HAL_GPIO_DeInit+0x10>
 8003338:	4d16      	ldr	r5, [pc, #88]	; (8003394 <HAL_GPIO_DeInit+0xf4>)
 800333a:	42a8      	cmp	r0, r5
 800333c:	d005      	beq.n	800334a <HAL_GPIO_DeInit+0xaa>
 800333e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003342:	42a8      	cmp	r0, r5
 8003344:	d0b2      	beq.n	80032ac <HAL_GPIO_DeInit+0xc>
 8003346:	2507      	movs	r5, #7
 8003348:	e7b3      	b.n	80032b2 <HAL_GPIO_DeInit+0x12>
 800334a:	2501      	movs	r5, #1
 800334c:	e7b1      	b.n	80032b2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800334e:	4c12      	ldr	r4, [pc, #72]	; (8003398 <HAL_GPIO_DeInit+0xf8>)
 8003350:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8003354:	ea25 0507 	bic.w	r5, r5, r7
 8003358:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800335c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8003360:	ea25 0507 	bic.w	r5, r5, r7
 8003364:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003368:	6825      	ldr	r5, [r4, #0]
 800336a:	ea25 0507 	bic.w	r5, r5, r7
 800336e:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003370:	6865      	ldr	r5, [r4, #4]
 8003372:	ea25 0507 	bic.w	r5, r5, r7
 8003376:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003378:	4d05      	ldr	r5, [pc, #20]	; (8003390 <HAL_GPIO_DeInit+0xf0>)
 800337a:	3602      	adds	r6, #2
 800337c:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8003380:	ea24 040e 	bic.w	r4, r4, lr
 8003384:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8003388:	e797      	b.n	80032ba <HAL_GPIO_DeInit+0x1a>
  }
}
 800338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	48000400 	.word	0x48000400
 8003398:	58000800 	.word	0x58000800

0800339c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800339c:	b10a      	cbz	r2, 80033a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800339e:	6181      	str	r1, [r0, #24]
 80033a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033a2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80033a4:	4770      	bx	lr

080033a6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033a6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033a8:	ea01 0203 	and.w	r2, r1, r3
 80033ac:	ea21 0103 	bic.w	r1, r1, r3
 80033b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80033b4:	6181      	str	r1, [r0, #24]
}
 80033b6:	4770      	bx	lr

080033b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	4203      	tst	r3, r0
 80033c0:	d100      	bne.n	80033c4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80033c2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033c4:	4b02      	ldr	r3, [pc, #8]	; (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80033c6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033c8:	f7fe fd52 	bl	8001e70 <HAL_GPIO_EXTI_Callback>
}
 80033cc:	e7f9      	b.n	80033c2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80033ce:	bf00      	nop
 80033d0:	58000800 	.word	0x58000800

080033d4 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d4:	4a02      	ldr	r2, [pc, #8]	; (80033e0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	6013      	str	r3, [r2, #0]
}
 80033de:	4770      	bx	lr
 80033e0:	58000400 	.word	0x58000400

080033e4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80033e4:	b510      	push	{r4, lr}
 80033e6:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80033e8:	b9a0      	cbnz	r0, 8003414 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80033ea:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_PWR_EnterSLEEPMode+0x44>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80033f2:	d10a      	bne.n	800340a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <HAL_PWR_EnterSLEEPMode+0x48>)
 80033f6:	6913      	ldr	r3, [r2, #16]
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80033fe:	2c01      	cmp	r4, #1
 8003400:	d010      	beq.n	8003424 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003402:	bf40      	sev
    __WFE();
 8003404:	bf20      	wfe
    __WFE();
 8003406:	bf20      	wfe
  }
}
 8003408:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800340a:	f000 f821 	bl	8003450 <HAL_PWREx_DisableLowPowerRunMode>
 800340e:	2800      	cmp	r0, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_PWR_EnterSLEEPMode+0x10>
 8003412:	e7f9      	b.n	8003408 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f413 7f00 	tst.w	r3, #512	; 0x200
 800341c:	d1ea      	bne.n	80033f4 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800341e:	f000 f80f 	bl	8003440 <HAL_PWREx_EnableLowPowerRunMode>
 8003422:	e7e7      	b.n	80033f4 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8003424:	bf30      	wfi
 8003426:	e7ef      	b.n	8003408 <HAL_PWR_EnterSLEEPMode+0x24>
 8003428:	58000400 	.word	0x58000400
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003430:	4b02      	ldr	r3, [pc, #8]	; (800343c <HAL_PWREx_GetVoltageRange+0xc>)
 8003432:	6818      	ldr	r0, [r3, #0]
}
 8003434:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	58000400 	.word	0x58000400

08003440 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003440:	4a02      	ldr	r2, [pc, #8]	; (800344c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8003442:	6813      	ldr	r3, [r2, #0]
 8003444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003448:	6013      	str	r3, [r2, #0]
}
 800344a:	4770      	bx	lr
 800344c:	58000400 	.word	0x58000400

08003450 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003450:	4a0f      	ldr	r2, [pc, #60]	; (8003490 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003458:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2232      	movs	r2, #50	; 0x32
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800346c:	e000      	b.n	8003470 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800346e:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003470:	4a07      	ldr	r2, [pc, #28]	; (8003490 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003472:	6952      	ldr	r2, [r2, #20]
 8003474:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003478:	d001      	beq.n	800347e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f7      	bne.n	800346e <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003486:	d101      	bne.n	800348c <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8003488:	2000      	movs	r0, #0
 800348a:	4770      	bx	lr
    return HAL_TIMEOUT;
 800348c:	2003      	movs	r0, #3
}
 800348e:	4770      	bx	lr
 8003490:	58000400 	.word	0x58000400
 8003494:	2000004c 	.word	0x2000004c
 8003498:	431bde83 	.word	0x431bde83

0800349c <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800349c:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	f023 0307 	bic.w	r3, r3, #7
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80034ac:	6913      	ldr	r3, [r2, #16]
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80034b4:	2801      	cmp	r0, #1
 80034b6:	d008      	beq.n	80034ca <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80034b8:	bf40      	sev
    __WFE();
 80034ba:	bf20      	wfe
    __WFE();
 80034bc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80034c0:	6913      	ldr	r3, [r2, #16]
 80034c2:	f023 0304 	bic.w	r3, r3, #4
 80034c6:	6113      	str	r3, [r2, #16]
}
 80034c8:	4770      	bx	lr
    __WFI();
 80034ca:	bf30      	wfi
 80034cc:	e7f7      	b.n	80034be <HAL_PWREx_EnterSTOP2Mode+0x22>
 80034ce:	bf00      	nop
 80034d0:	58000400 	.word	0x58000400
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80034d8:	b530      	push	{r4, r5, lr}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	4604      	mov	r4, r0
 80034de:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80034e0:	4b2a      	ldr	r3, [pc, #168]	; (800358c <RCC_SetFlashLatency+0xb4>)
 80034e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034e6:	9006      	str	r0, [sp, #24]
 80034e8:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80034ec:	f103 0208 	add.w	r2, r3, #8
 80034f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034f4:	9004      	str	r0, [sp, #16]
 80034f6:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80034fa:	ad01      	add	r5, sp, #4
 80034fc:	3310      	adds	r3, #16
 80034fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003502:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003506:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800350a:	d007      	beq.n	800351c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800350c:	2300      	movs	r3, #0
 800350e:	e014      	b.n	800353a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8003510:	aa08      	add	r2, sp, #32
 8003512:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003516:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800351a:	e01e      	b.n	800355a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800351c:	2300      	movs	r3, #0
 800351e:	2b02      	cmp	r3, #2
 8003520:	d808      	bhi.n	8003534 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003522:	aa08      	add	r2, sp, #32
 8003524:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003528:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800352c:	42a2      	cmp	r2, r4
 800352e:	d2ef      	bcs.n	8003510 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003530:	3301      	adds	r3, #1
 8003532:	e7f4      	b.n	800351e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003534:	2500      	movs	r5, #0
 8003536:	e010      	b.n	800355a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003538:	3301      	adds	r3, #1
 800353a:	2b02      	cmp	r3, #2
 800353c:	d80c      	bhi.n	8003558 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800353e:	aa08      	add	r2, sp, #32
 8003540:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003544:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8003548:	42a2      	cmp	r2, r4
 800354a:	d3f5      	bcc.n	8003538 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800354c:	aa08      	add	r2, sp, #32
 800354e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003552:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003556:	e000      	b.n	800355a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003558:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800355a:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <RCC_SetFlashLatency+0xb8>)
 800355c:	6813      	ldr	r3, [r2, #0]
 800355e:	f023 0307 	bic.w	r3, r3, #7
 8003562:	432b      	orrs	r3, r5
 8003564:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003566:	f7fd ffc5 	bl	80014f4 <HAL_GetTick>
 800356a:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <RCC_SetFlashLatency+0xb8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	42ab      	cmp	r3, r5
 8003576:	d006      	beq.n	8003586 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003578:	f7fd ffbc 	bl	80014f4 <HAL_GetTick>
 800357c:	1b00      	subs	r0, r0, r4
 800357e:	2802      	cmp	r0, #2
 8003580:	d9f4      	bls.n	800356c <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8003582:	2003      	movs	r0, #3
 8003584:	e000      	b.n	8003588 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8003586:	2000      	movs	r0, #0
}
 8003588:	b009      	add	sp, #36	; 0x24
 800358a:	bd30      	pop	{r4, r5, pc}
 800358c:	080112d0 	.word	0x080112d0
 8003590:	58004000 	.word	0x58004000

08003594 <RCC_SetFlashLatencyFromMSIRange>:
{
 8003594:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003596:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <RCC_SetFlashLatencyFromMSIRange+0x38>)
 800359c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80035a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80035ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b2:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80035b6:	f7ff ff3b 	bl	8003430 <HAL_PWREx_GetVoltageRange>
 80035ba:	4601      	mov	r1, r0
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80035be:	fba3 3404 	umull	r3, r4, r3, r4
 80035c2:	0ca0      	lsrs	r0, r4, #18
 80035c4:	f7ff ff88 	bl	80034d8 <RCC_SetFlashLatency>
}
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	080116cc 	.word	0x080116cc
 80035d0:	0801166c 	.word	0x0801166c
 80035d4:	431bde83 	.word	0x431bde83

080035d8 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035dc:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035e4:	f011 010c 	ands.w	r1, r1, #12
 80035e8:	d00a      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x28>
 80035ea:	290c      	cmp	r1, #12
 80035ec:	d006      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ee:	2904      	cmp	r1, #4
 80035f0:	d047      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035f2:	2908      	cmp	r1, #8
 80035f4:	d03b      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80035f6:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80035f8:	4610      	mov	r0, r2
 80035fa:	e026      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d1f6      	bne.n	80035ee <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f013 0308 	ands.w	r3, r3, #8
 800360a:	d00d      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x50>
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f013 0308 	ands.w	r3, r3, #8
 8003616:	d124      	bne.n	8003662 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800361c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003620:	4a2e      	ldr	r2, [pc, #184]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003622:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003626:	e00e      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	f012 0f08 	tst.w	r2, #8
 8003632:	d112      	bne.n	800365a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003640:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003642:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003646:	b1d1      	cbz	r1, 800367e <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8003648:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d01a      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0xb6>
}
 8003658:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800365a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	e7ee      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x68>
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003668:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800366c:	e7d8      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8003678:	d106      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800367a:	4819      	ldr	r0, [pc, #100]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800367c:	e7e5      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800367e:	4610      	mov	r0, r2
 8003680:	e7e3      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8003682:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8003684:	4817      	ldr	r0, [pc, #92]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003686:	e7e0      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8003688:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800368a:	4816      	ldr	r0, [pc, #88]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800368c:	e7dd      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003698:	2b02      	cmp	r3, #2
 800369a:	d009      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0xd8>
 800369c:	2b03      	cmp	r3, #3
 800369e:	d108      	bne.n	80036b2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80036a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80036aa:	d115      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80036ac:	4a0c      	ldr	r2, [pc, #48]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80036b0:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80036b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b6:	68cb      	ldr	r3, [r1, #12]
 80036b8:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80036bc:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80036c0:	68cb      	ldr	r3, [r1, #12]
 80036c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80036c6:	3301      	adds	r3, #1
 80036c8:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80036cc:	68c8      	ldr	r0, [r1, #12]
 80036ce:	0f40      	lsrs	r0, r0, #29
 80036d0:	3001      	adds	r0, #1
 80036d2:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80036d6:	e7bf      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80036d8:	4a02      	ldr	r2, [pc, #8]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036da:	e7ea      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0xda>
 80036dc:	080116cc 	.word	0x080116cc
 80036e0:	01e84800 	.word	0x01e84800
 80036e4:	00f42400 	.word	0x00f42400

080036e8 <HAL_RCC_GetHCLKFreq>:
{
 80036e8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80036ea:	f7ff ff75 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036f8:	4a02      	ldr	r2, [pc, #8]	; (8003704 <HAL_RCC_GetHCLKFreq+0x1c>)
 80036fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80036fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8003702:	bd08      	pop	{r3, pc}
 8003704:	0801166c 	.word	0x0801166c

08003708 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003708:	2800      	cmp	r0, #0
 800370a:	f000 8319 	beq.w	8003d40 <HAL_RCC_OscConfig+0x638>
{
 800370e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003710:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003716:	689d      	ldr	r5, [r3, #8]
 8003718:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800371c:	68de      	ldr	r6, [r3, #12]
 800371e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	f013 0f20 	tst.w	r3, #32
 8003728:	f000 808f 	beq.w	800384a <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800372c:	b1ed      	cbz	r5, 800376a <HAL_RCC_OscConfig+0x62>
 800372e:	2d0c      	cmp	r5, #12
 8003730:	d019      	beq.n	8003766 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003732:	6a23      	ldr	r3, [r4, #32]
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80bc 	beq.w	80038b2 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800373a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003746:	f7fd fed5 	bl	80014f4 <HAL_GetTick>
 800374a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800374c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f013 0f02 	tst.w	r3, #2
 8003756:	d165      	bne.n	8003824 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003758:	f7fd fecc 	bl	80014f4 <HAL_GetTick>
 800375c:	1bc0      	subs	r0, r0, r7
 800375e:	2802      	cmp	r0, #2
 8003760:	d9f4      	bls.n	800374c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8003762:	2003      	movs	r0, #3
 8003764:	e2f9      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003766:	2e01      	cmp	r6, #1
 8003768:	d1e3      	bne.n	8003732 <HAL_RCC_OscConfig+0x2a>
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f013 0f02 	tst.w	r3, #2
 8003774:	d003      	beq.n	800377e <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003776:	6a23      	ldr	r3, [r4, #32]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 82e3 	beq.w	8003d44 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800377e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f013 0f08 	tst.w	r3, #8
 800378a:	d029      	beq.n	80037e0 <HAL_RCC_OscConfig+0xd8>
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003796:	4298      	cmp	r0, r3
 8003798:	d92a      	bls.n	80037f0 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800379a:	f7ff fefb 	bl	8003594 <RCC_SetFlashLatencyFromMSIRange>
 800379e:	2800      	cmp	r0, #0
 80037a0:	f040 82d2 	bne.w	8003d48 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	f042 0208 	orr.w	r2, r2, #8
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80037b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80037c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037c8:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037ca:	f7ff ff8d 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 80037ce:	4bb0      	ldr	r3, [pc, #704]	; (8003a90 <HAL_RCC_OscConfig+0x388>)
 80037d0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80037d2:	4bb0      	ldr	r3, [pc, #704]	; (8003a94 <HAL_RCC_OscConfig+0x38c>)
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	f7fd fe8b 	bl	80014f0 <HAL_InitTick>
        if (status != HAL_OK)
 80037da:	2800      	cmp	r0, #0
 80037dc:	d035      	beq.n	800384a <HAL_RCC_OscConfig+0x142>
 80037de:	e2bc      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ee:	e7d2      	b.n	8003796 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	f042 0208 	orr.w	r2, r2, #8
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003802:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003808:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003810:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003814:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003816:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003818:	f7ff febc 	bl	8003594 <RCC_SetFlashLatencyFromMSIRange>
 800381c:	2800      	cmp	r0, #0
 800381e:	d0d4      	beq.n	80037ca <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8003820:	2001      	movs	r0, #1
 8003822:	e29a      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f042 0208 	orr.w	r2, r2, #8
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003836:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003838:	430a      	orrs	r2, r1
 800383a:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800383c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003844:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003848:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	f013 0f01 	tst.w	r3, #1
 8003850:	d051      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003852:	2d08      	cmp	r5, #8
 8003854:	d045      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1da>
 8003856:	2d0c      	cmp	r5, #12
 8003858:	d041      	beq.n	80038de <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800385a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003864:	68a1      	ldr	r1, [r4, #8]
 8003866:	430b      	orrs	r3, r1
 8003868:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386a:	6863      	ldr	r3, [r4, #4]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003870:	d063      	beq.n	800393a <HAL_RCC_OscConfig+0x232>
 8003872:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003876:	d065      	beq.n	8003944 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003882:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800388a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d063      	beq.n	800395a <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8003892:	f7fd fe2f 	bl	80014f4 <HAL_GetTick>
 8003896:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80038a2:	d128      	bne.n	80038f6 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fd fe26 	bl	80014f4 <HAL_GetTick>
 80038a8:	1bc0      	subs	r0, r0, r7
 80038aa:	2864      	cmp	r0, #100	; 0x64
 80038ac:	d9f4      	bls.n	8003898 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80038ae:	2003      	movs	r0, #3
 80038b0:	e253      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80038b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038be:	f7fd fe19 	bl	80014f4 <HAL_GetTick>
 80038c2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80038c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f013 0f02 	tst.w	r3, #2
 80038ce:	d0bc      	beq.n	800384a <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038d0:	f7fd fe10 	bl	80014f4 <HAL_GetTick>
 80038d4:	1bc0      	subs	r0, r0, r7
 80038d6:	2802      	cmp	r0, #2
 80038d8:	d9f4      	bls.n	80038c4 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80038da:	2003      	movs	r0, #3
 80038dc:	e23d      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038de:	2e03      	cmp	r6, #3
 80038e0:	d1bb      	bne.n	800385a <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ee:	6863      	ldr	r3, [r4, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 822b 	beq.w	8003d4c <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	f013 0f02 	tst.w	r3, #2
 80038fc:	d052      	beq.n	80039a4 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038fe:	2d04      	cmp	r5, #4
 8003900:	d03d      	beq.n	800397e <HAL_RCC_OscConfig+0x276>
 8003902:	2d0c      	cmp	r5, #12
 8003904:	d039      	beq.n	800397a <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003906:	6923      	ldr	r3, [r4, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8091 	beq.w	8003a30 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800390e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800391a:	f7fd fdeb 	bl	80014f4 <HAL_GetTick>
 800391e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800392a:	d177      	bne.n	8003a1c <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392c:	f7fd fde2 	bl	80014f4 <HAL_GetTick>
 8003930:	1b80      	subs	r0, r0, r6
 8003932:	2802      	cmp	r0, #2
 8003934:	d9f4      	bls.n	8003920 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8003936:	2003      	movs	r0, #3
 8003938:	e20f      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	e7a3      	b.n	800388c <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800394e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003956:	601a      	str	r2, [r3, #0]
}
 8003958:	e798      	b.n	800388c <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 800395a:	f7fd fdcb 	bl	80014f4 <HAL_GetTick>
 800395e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800396a:	d0c4      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800396c:	f7fd fdc2 	bl	80014f4 <HAL_GetTick>
 8003970:	1bc0      	subs	r0, r0, r7
 8003972:	2864      	cmp	r0, #100	; 0x64
 8003974:	d9f4      	bls.n	8003960 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8003976:	2003      	movs	r0, #3
 8003978:	e1ef      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800397a:	2e02      	cmp	r6, #2
 800397c:	d1c3      	bne.n	8003906 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003988:	d003      	beq.n	8003992 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800398a:	6923      	ldr	r3, [r4, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 81df 	beq.w	8003d50 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003998:	6853      	ldr	r3, [r2, #4]
 800399a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800399e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80039a2:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	f013 0f08 	tst.w	r3, #8
 80039aa:	f000 808e 	beq.w	8003aca <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ae:	69a3      	ldr	r3, [r4, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d071      	beq.n	8003a98 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80039bc:	69e1      	ldr	r1, [r4, #28]
 80039be:	f003 0210 	and.w	r2, r3, #16
 80039c2:	4291      	cmp	r1, r2
 80039c4:	d011      	beq.n	80039ea <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039c6:	f003 0203 	and.w	r2, r3, #3
 80039ca:	2a02      	cmp	r2, #2
 80039cc:	f000 81c2 	beq.w	8003d54 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80039d0:	f013 0f01 	tst.w	r3, #1
 80039d4:	d142      	bne.n	8003a5c <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80039d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039da:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80039de:	f023 0310 	bic.w	r3, r3, #16
 80039e2:	69e1      	ldr	r1, [r4, #28]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80039ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ee:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80039fa:	f7fd fd7b 	bl	80014f4 <HAL_GetTick>
 80039fe:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a08:	f013 0f02 	tst.w	r3, #2
 8003a0c:	d15d      	bne.n	8003aca <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fd fd71 	bl	80014f4 <HAL_GetTick>
 8003a12:	1b80      	subs	r0, r0, r6
 8003a14:	2811      	cmp	r0, #17
 8003a16:	d9f3      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8003a18:	2003      	movs	r0, #3
 8003a1a:	e19e      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a22:	6853      	ldr	r3, [r2, #4]
 8003a24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a28:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003a2c:	6053      	str	r3, [r2, #4]
}
 8003a2e:	e7b9      	b.n	80039a4 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a34:	6813      	ldr	r3, [r2, #0]
 8003a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fd5a 	bl	80014f4 <HAL_GetTick>
 8003a40:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003a4c:	d0aa      	beq.n	80039a4 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4e:	f7fd fd51 	bl	80014f4 <HAL_GetTick>
 8003a52:	1b80      	subs	r0, r0, r6
 8003a54:	2802      	cmp	r0, #2
 8003a56:	d9f4      	bls.n	8003a42 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8003a58:	2003      	movs	r0, #3
 8003a5a:	e17e      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a60:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003a6c:	f7fd fd42 	bl	80014f4 <HAL_GetTick>
 8003a70:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7a:	f013 0f02 	tst.w	r3, #2
 8003a7e:	d0aa      	beq.n	80039d6 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a80:	f7fd fd38 	bl	80014f4 <HAL_GetTick>
 8003a84:	1b80      	subs	r0, r0, r6
 8003a86:	2811      	cmp	r0, #17
 8003a88:	d9f3      	bls.n	8003a72 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8003a8a:	2003      	movs	r0, #3
 8003a8c:	e165      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
 8003a8e:	bf00      	nop
 8003a90:	2000004c 	.word	0x2000004c
 8003a94:	20000054 	.word	0x20000054
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003aa8:	f7fd fd24 	bl	80014f4 <HAL_GetTick>
 8003aac:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab6:	f013 0f02 	tst.w	r3, #2
 8003aba:	d006      	beq.n	8003aca <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fd fd1a 	bl	80014f4 <HAL_GetTick>
 8003ac0:	1b80      	subs	r0, r0, r6
 8003ac2:	2811      	cmp	r0, #17
 8003ac4:	d9f3      	bls.n	8003aae <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8003ac6:	2003      	movs	r0, #3
 8003ac8:	e147      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	f013 0f04 	tst.w	r3, #4
 8003ad0:	f000 80b1 	beq.w	8003c36 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003ad4:	4ba8      	ldr	r3, [pc, #672]	; (8003d78 <HAL_RCC_OscConfig+0x670>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003adc:	d110      	bne.n	8003b00 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 8003ade:	f7ff fc79 	bl	80033d4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8003ae2:	f7fd fd07 	bl	80014f4 <HAL_GetTick>
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	4ba3      	ldr	r3, [pc, #652]	; (8003d78 <HAL_RCC_OscConfig+0x670>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af2:	f7fd fcff 	bl	80014f4 <HAL_GetTick>
 8003af6:	1b80      	subs	r0, r0, r6
 8003af8:	2802      	cmp	r0, #2
 8003afa:	d9f5      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8003afc:	2003      	movs	r0, #3
 8003afe:	e12c      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b00:	68e3      	ldr	r3, [r4, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d061      	beq.n	8003bca <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003b06:	2b85      	cmp	r3, #133	; 0x85
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003b0a:	2b05      	cmp	r3, #5
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b16:	f043 0304 	orr.w	r3, r3, #4
 8003b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fce9 	bl	80014f4 <HAL_GetTick>
 8003b22:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b28:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	f013 0f02 	tst.w	r3, #2
 8003b40:	d108      	bne.n	8003b54 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fd fcd7 	bl	80014f4 <HAL_GetTick>
 8003b46:	1b80      	subs	r0, r0, r6
 8003b48:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b4c:	4298      	cmp	r0, r3
 8003b4e:	d9f1      	bls.n	8003b34 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 8003b50:	2003      	movs	r0, #3
 8003b52:	e102      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003b54:	68e3      	ldr	r3, [r4, #12]
 8003b56:	2b81      	cmp	r3, #129	; 0x81
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003b5a:	2b85      	cmp	r3, #133	; 0x85
 8003b5c:	d11a      	bne.n	8003b94 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fcc9 	bl	80014f4 <HAL_GetTick>
 8003b62:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003b80:	d159      	bne.n	8003c36 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fd fcb7 	bl	80014f4 <HAL_GetTick>
 8003b86:	1b80      	subs	r0, r0, r6
 8003b88:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b8c:	4298      	cmp	r0, r3
 8003b8e:	d9f1      	bls.n	8003b74 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8003b90:	2003      	movs	r0, #3
 8003b92:	e0e2      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8003b94:	f7fd fcae 	bl	80014f4 <HAL_GetTick>
 8003b98:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003bb6:	d03e      	beq.n	8003c36 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb8:	f7fd fc9c 	bl	80014f4 <HAL_GetTick>
 8003bbc:	1b80      	subs	r0, r0, r6
 8003bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bc2:	4298      	cmp	r0, r3
 8003bc4:	d9f1      	bls.n	8003baa <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 8003bc6:	2003      	movs	r0, #3
 8003bc8:	e0c7      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8003bca:	f7fd fc93 	bl	80014f4 <HAL_GetTick>
 8003bce:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003bec:	d008      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fd fc81 	bl	80014f4 <HAL_GetTick>
 8003bf2:	1b80      	subs	r0, r0, r6
 8003bf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bf8:	4298      	cmp	r0, r3
 8003bfa:	d9f1      	bls.n	8003be0 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	e0ac      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8003c00:	f7fd fc78 	bl	80014f4 <HAL_GetTick>
 8003c04:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f013 0f02 	tst.w	r3, #2
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fd fc66 	bl	80014f4 <HAL_GetTick>
 8003c28:	1b80      	subs	r0, r0, r6
 8003c2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c2e:	4298      	cmp	r0, r3
 8003c30:	d9f1      	bls.n	8003c16 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8003c32:	2003      	movs	r0, #3
 8003c34:	e091      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 808d 	beq.w	8003d58 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c3e:	2d0c      	cmp	r5, #12
 8003c40:	d062      	beq.n	8003d08 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d01f      	beq.n	8003c86 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003c50:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	f022 0203 	bic.w	r2, r2, #3
 8003c58:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003c60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c64:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003c66:	f7fd fc45 	bl	80014f4 <HAL_GetTick>
 8003c6a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c76:	d073      	beq.n	8003d60 <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fd fc3c 	bl	80014f4 <HAL_GetTick>
 8003c7c:	1b00      	subs	r0, r0, r4
 8003c7e:	280a      	cmp	r0, #10
 8003c80:	d9f4      	bls.n	8003c6c <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8003c82:	2003      	movs	r0, #3
 8003c84:	e069      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c92:	f7fd fc2f 	bl	80014f4 <HAL_GetTick>
 8003c96:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ca2:	d12a      	bne.n	8003cfa <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca8:	68d3      	ldr	r3, [r2, #12]
 8003caa:	4934      	ldr	r1, [pc, #208]	; (8003d7c <HAL_RCC_OscConfig+0x674>)
 8003cac:	4019      	ands	r1, r3
 8003cae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cb0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003cb2:	4303      	orrs	r3, r0
 8003cb4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cb6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003cba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003cbc:	4303      	orrs	r3, r0
 8003cbe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003cc0:	4303      	orrs	r3, r0
 8003cc2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003cc4:	4303      	orrs	r3, r0
 8003cc6:	4319      	orrs	r1, r3
 8003cc8:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003cca:	6813      	ldr	r3, [r2, #0]
 8003ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cd2:	68d3      	ldr	r3, [r2, #12]
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003cda:	f7fd fc0b 	bl	80014f4 <HAL_GetTick>
 8003cde:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cea:	d137      	bne.n	8003d5c <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fd fc02 	bl	80014f4 <HAL_GetTick>
 8003cf0:	1b00      	subs	r0, r0, r4
 8003cf2:	280a      	cmp	r0, #10
 8003cf4:	d9f4      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 8003cf6:	2003      	movs	r0, #3
 8003cf8:	e02f      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fd fbfb 	bl	80014f4 <HAL_GetTick>
 8003cfe:	1b40      	subs	r0, r0, r5
 8003d00:	280a      	cmp	r0, #10
 8003d02:	d9c9      	bls.n	8003c98 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8003d04:	2003      	movs	r0, #3
 8003d06:	e028      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d02b      	beq.n	8003d64 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d10:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003d12:	f003 0103 	and.w	r1, r3, #3
 8003d16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d18:	4291      	cmp	r1, r2
 8003d1a:	d125      	bne.n	8003d68 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003d1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d22:	428a      	cmp	r2, r1
 8003d24:	d122      	bne.n	8003d6c <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003d26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d2c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003d30:	d11e      	bne.n	8003d70 <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003d32:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003d36:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d11b      	bne.n	8003d74 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	e00c      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 8003d40:	2001      	movs	r0, #1
}
 8003d42:	4770      	bx	lr
        return HAL_ERROR;
 8003d44:	2001      	movs	r0, #1
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8003d48:	2001      	movs	r0, #1
 8003d4a:	e006      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	e004      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8003d50:	2001      	movs	r0, #1
 8003d52:	e002      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8003d54:	2001      	movs	r0, #1
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8003d58:	2000      	movs	r0, #0
}
 8003d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	e7fc      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
 8003d60:	2000      	movs	r0, #0
 8003d62:	e7fa      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8003d64:	2001      	movs	r0, #1
 8003d66:	e7f8      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8003d68:	2001      	movs	r0, #1
 8003d6a:	e7f6      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	e7f4      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
 8003d70:	2001      	movs	r0, #1
 8003d72:	e7f2      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
 8003d74:	2001      	movs	r0, #1
 8003d76:	e7f0      	b.n	8003d5a <HAL_RCC_OscConfig+0x652>
 8003d78:	58000400 	.word	0x58000400
 8003d7c:	11c1808c 	.word	0x11c1808c

08003d80 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003d80:	2800      	cmp	r0, #0
 8003d82:	f000 8104 	beq.w	8003f8e <HAL_RCC_ClockConfig+0x20e>
{
 8003d86:	b570      	push	{r4, r5, r6, lr}
 8003d88:	460c      	mov	r4, r1
 8003d8a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b82      	ldr	r3, [pc, #520]	; (8003f98 <HAL_RCC_ClockConfig+0x218>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	428b      	cmp	r3, r1
 8003d96:	d327      	bcc.n	8003de8 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	f013 0f02 	tst.w	r3, #2
 8003d9e:	d139      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x94>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003da6:	d14d      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xc4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	f013 0f04 	tst.w	r3, #4
 8003dae:	d165      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xfc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	f013 0f08 	tst.w	r3, #8
 8003db6:	d179      	bne.n	8003eac <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	f013 0f01 	tst.w	r3, #1
 8003dbe:	f000 80c1 	beq.w	8003f44 <HAL_RCC_ClockConfig+0x1c4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc2:	686b      	ldr	r3, [r5, #4]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	f000 808b 	beq.w	8003ee0 <HAL_RCC_ClockConfig+0x160>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	f000 8090 	beq.w	8003ef0 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 8095 	bne.w	8003f00 <HAL_RCC_ClockConfig+0x180>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	f012 0f02 	tst.w	r2, #2
 8003de0:	f040 8094 	bne.w	8003f0c <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 8003de4:	2001      	movs	r0, #1
 8003de6:	e0d1      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de8:	4a6b      	ldr	r2, [pc, #428]	; (8003f98 <HAL_RCC_ClockConfig+0x218>)
 8003dea:	6813      	ldr	r3, [r2, #0]
 8003dec:	f023 0307 	bic.w	r3, r3, #7
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003df4:	f7fd fb7e 	bl	80014f4 <HAL_GetTick>
 8003df8:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfa:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <HAL_RCC_ClockConfig+0x218>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	d0c8      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e06:	f7fd fb75 	bl	80014f4 <HAL_GetTick>
 8003e0a:	1b80      	subs	r0, r0, r6
 8003e0c:	2802      	cmp	r0, #2
 8003e0e:	d9f4      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 8003e10:	2003      	movs	r0, #3
 8003e12:	e0bb      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e1a:	688a      	ldr	r2, [r1, #8]
 8003e1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003e24:	f7fd fb66 	bl	80014f4 <HAL_GetTick>
 8003e28:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e34:	d1b4      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e36:	f7fd fb5d 	bl	80014f4 <HAL_GetTick>
 8003e3a:	1b80      	subs	r0, r0, r6
 8003e3c:	2802      	cmp	r0, #2
 8003e3e:	d9f4      	bls.n	8003e2a <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8003e40:	2003      	movs	r0, #3
 8003e42:	e0a3      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003e44:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003e4e:	f023 030f 	bic.w	r3, r3, #15
 8003e52:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8003e56:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003e5a:	f7fd fb4b 	bl	80014f4 <HAL_GetTick>
 8003e5e:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e6c:	d19c      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e6e:	f7fd fb41 	bl	80014f4 <HAL_GetTick>
 8003e72:	1b80      	subs	r0, r0, r6
 8003e74:	2802      	cmp	r0, #2
 8003e76:	d9f3      	bls.n	8003e60 <HAL_RCC_ClockConfig+0xe0>
        return HAL_TIMEOUT;
 8003e78:	2003      	movs	r0, #3
 8003e7a:	e087      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003e7c:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e82:	688a      	ldr	r2, [r1, #8]
 8003e84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003e8c:	f7fd fb32 	bl	80014f4 <HAL_GetTick>
 8003e90:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e9c:	d188      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e9e:	f7fd fb29 	bl	80014f4 <HAL_GetTick>
 8003ea2:	1b80      	subs	r0, r0, r6
 8003ea4:	2802      	cmp	r0, #2
 8003ea6:	d9f4      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8003ea8:	2003      	movs	r0, #3
 8003eaa:	e06f      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003eac:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb2:	6893      	ldr	r3, [r2, #8]
 8003eb4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003eb8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ebc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003ebe:	f7fd fb19 	bl	80014f4 <HAL_GetTick>
 8003ec2:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003ece:	f47f af73 	bne.w	8003db8 <HAL_RCC_ClockConfig+0x38>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ed2:	f7fd fb0f 	bl	80014f4 <HAL_GetTick>
 8003ed6:	1b80      	subs	r0, r0, r6
 8003ed8:	2802      	cmp	r0, #2
 8003eda:	d9f3      	bls.n	8003ec4 <HAL_RCC_ClockConfig+0x144>
        return HAL_TIMEOUT;
 8003edc:	2003      	movs	r0, #3
 8003ede:	e055      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003eea:	d10f      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 8003eec:	2001      	movs	r0, #1
 8003eee:	e04d      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003efa:	d107      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 8003efc:	2001      	movs	r0, #1
 8003efe:	e045      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003f0a:	d042      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x212>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f10:	688a      	ldr	r2, [r1, #8]
 8003f12:	f022 0203 	bic.w	r2, r2, #3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003f1a:	f7fd faeb 	bl	80014f4 <HAL_GetTick>
 8003f1e:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	686a      	ldr	r2, [r5, #4]
 8003f2c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003f30:	d008      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x1c4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f32:	f7fd fadf 	bl	80014f4 <HAL_GetTick>
 8003f36:	1b80      	subs	r0, r0, r6
 8003f38:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f3c:	4298      	cmp	r0, r3
 8003f3e:	d9ef      	bls.n	8003f20 <HAL_RCC_ClockConfig+0x1a0>
        return HAL_TIMEOUT;
 8003f40:	2003      	movs	r0, #3
 8003f42:	e023      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <HAL_RCC_ClockConfig+0x218>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	42a3      	cmp	r3, r4
 8003f4e:	d915      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x1fc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f50:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <HAL_RCC_ClockConfig+0x218>)
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	f023 0307 	bic.w	r3, r3, #7
 8003f58:	4323      	orrs	r3, r4
 8003f5a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f5c:	f7fd faca 	bl	80014f4 <HAL_GetTick>
 8003f60:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <HAL_RCC_ClockConfig+0x218>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	42a3      	cmp	r3, r4
 8003f6c:	d006      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x1fc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f6e:	f7fd fac1 	bl	80014f4 <HAL_GetTick>
 8003f72:	1b40      	subs	r0, r0, r5
 8003f74:	2802      	cmp	r0, #2
 8003f76:	d9f4      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x1e2>
        return HAL_TIMEOUT;
 8003f78:	2003      	movs	r0, #3
 8003f7a:	e007      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f7c:	f7ff fbb4 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_ClockConfig+0x21c>)
 8003f82:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_ClockConfig+0x220>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	f7fd fab2 	bl	80014f0 <HAL_InitTick>
}
 8003f8c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003f8e:	2001      	movs	r0, #1
}
 8003f90:	4770      	bx	lr
        return HAL_ERROR;
 8003f92:	2001      	movs	r0, #1
 8003f94:	e7fa      	b.n	8003f8c <HAL_RCC_ClockConfig+0x20c>
 8003f96:	bf00      	nop
 8003f98:	58004000 	.word	0x58004000
 8003f9c:	2000004c 	.word	0x2000004c
 8003fa0:	20000054 	.word	0x20000054

08003fa4 <HAL_RCC_GetPCLK1Freq>:
{
 8003fa4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003fa6:	f7ff fb9f 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003fb4:	4a02      	ldr	r2, [pc, #8]	; (8003fc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003fba:	40d8      	lsrs	r0, r3
 8003fbc:	bd08      	pop	{r3, pc}
 8003fbe:	bf00      	nop
 8003fc0:	080116ac 	.word	0x080116ac

08003fc4 <HAL_RCC_GetPCLK2Freq>:
{
 8003fc4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003fc6:	f7ff fb8f 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003fd4:	4a02      	ldr	r2, [pc, #8]	; (8003fe0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003fda:	40d8      	lsrs	r0, r3
 8003fdc:	bd08      	pop	{r3, pc}
 8003fde:	bf00      	nop
 8003fe0:	080116ac 	.word	0x080116ac

08003fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe8:	6803      	ldr	r3, [r0, #0]
 8003fea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003fee:	f040 80ab 	bne.w	8004148 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ff2:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	f013 0f01 	tst.w	r3, #1
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ffc:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004002:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004006:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800400a:	b292      	uxth	r2, r2
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	f013 0f02 	tst.w	r3, #2
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800401a:	68a2      	ldr	r2, [r4, #8]
 800401c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004020:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004024:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004028:	b292      	uxth	r2, r2
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f013 0f20 	tst.w	r3, #32
 8004036:	d009      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004038:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800403a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800403e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004042:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004052:	d00c      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004054:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800405a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800405e:	0c02      	lsrs	r2, r0, #16
 8004060:	0412      	lsls	r2, r2, #16
 8004062:	ea23 0302 	bic.w	r3, r3, r2
 8004066:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004074:	d00c      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004076:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800407c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004080:	0c02      	lsrs	r2, r0, #16
 8004082:	0412      	lsls	r2, r2, #16
 8004084:	ea23 0302 	bic.w	r3, r3, r2
 8004088:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004096:	d00c      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004098:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800409a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800409e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80040a2:	0c02      	lsrs	r2, r0, #16
 80040a4:	0412      	lsls	r2, r2, #16
 80040a6:	ea23 0302 	bic.w	r3, r3, r2
 80040aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80040b8:	f040 809e 	bne.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80040c2:	f040 80aa 	bne.w	800421a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040cc:	f040 80b6 	bne.w	800423c <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	f013 0f10 	tst.w	r3, #16
 80040d6:	d00e      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80040d8:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80040da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80040e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80040ec:	68e3      	ldr	r3, [r4, #12]
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f2:	f000 80b4 	beq.w	800425e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80040fc:	d00f      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004104:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004108:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004112:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004114:	b91b      	cbnz	r3, 800411e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004116:	68cb      	ldr	r3, [r1, #12]
 8004118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004124:	d00e      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004126:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800412c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800413a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800413c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004140:	f000 8092 	beq.w	8004268 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004144:	4628      	mov	r0, r5
 8004146:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004148:	f7ff f944 	bl	80033d4 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800414c:	f7fd f9d2 	bl	80014f4 <HAL_GetTick>
 8004150:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004152:	4b48      	ldr	r3, [pc, #288]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f413 7f80 	tst.w	r3, #256	; 0x100
 800415a:	d106      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415c:	f7fd f9ca 	bl	80014f4 <HAL_GetTick>
 8004160:	1b40      	subs	r0, r0, r5
 8004162:	2802      	cmp	r0, #2
 8004164:	d9f5      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8004166:	2503      	movs	r5, #3
 8004168:	e000      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800416a:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800416c:	2d00      	cmp	r5, #0
 800416e:	f47f af41 	bne.w	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800417e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004180:	429a      	cmp	r2, r3
 8004182:	d024      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004188:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800418c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004190:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004194:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004198:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800419c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80041a0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80041a4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80041a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80041ac:	f012 0f02 	tst.w	r2, #2
 80041b0:	d10f      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	f47f af1e 	bne.w	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80041ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041be:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80041c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041cc:	e712      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 80041ce:	2200      	movs	r2, #0
 80041d0:	e7ec      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 80041d2:	f7fd f98f 	bl	80014f4 <HAL_GetTick>
 80041d6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e0:	f013 0f02 	tst.w	r3, #2
 80041e4:	d1e5      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fd f985 	bl	80014f4 <HAL_GetTick>
 80041ea:	1b80      	subs	r0, r0, r6
 80041ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80041f0:	4298      	cmp	r0, r3
 80041f2:	d9f1      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 80041f4:	2503      	movs	r5, #3
 80041f6:	e7dc      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041f8:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80041fa:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80041fe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004202:	0919      	lsrs	r1, r3, #4
 8004204:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004208:	ea22 0201 	bic.w	r2, r2, r1
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004218:	e750      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800421a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800421c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004220:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004224:	0919      	lsrs	r1, r3, #4
 8004226:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800422a:	ea22 0201 	bic.w	r2, r2, r1
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800423a:	e744      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800423c:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800423e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004242:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004246:	0919      	lsrs	r1, r3, #4
 8004248:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800424c:	ea22 0201 	bic.w	r2, r2, r1
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800425c:	e738      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800425e:	68cb      	ldr	r3, [r1, #12]
 8004260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004264:	60cb      	str	r3, [r1, #12]
 8004266:	e746      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004268:	68cb      	ldr	r3, [r1, #12]
 800426a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426e:	60cb      	str	r3, [r1, #12]
 8004270:	e768      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004272:	bf00      	nop
 8004274:	58000400 	.word	0x58000400

08004278 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004278:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800427a:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 800427e:	2a01      	cmp	r2, #1
 8004280:	d035      	beq.n	80042ee <HAL_RTC_DeactivateAlarm+0x76>
 8004282:	2201      	movs	r2, #1
 8004284:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004288:	2202      	movs	r2, #2
 800428a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800428e:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004290:	20ca      	movs	r0, #202	; 0xca
 8004292:	6250      	str	r0, [r2, #36]	; 0x24
 8004294:	2053      	movs	r0, #83	; 0x53
 8004296:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004298:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800429c:	d018      	beq.n	80042d0 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800429e:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <HAL_RTC_DeactivateAlarm+0x7c>)
 80042a0:	6991      	ldr	r1, [r2, #24]
 80042a2:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 80042a6:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80042a8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80042aa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80042ae:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80042b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042b2:	f021 0102 	bic.w	r1, r1, #2
 80042b6:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80042b8:	2102      	movs	r1, #2
 80042ba:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042bc:	4a0d      	ldr	r2, [pc, #52]	; (80042f4 <HAL_RTC_DeactivateAlarm+0x7c>)
 80042be:	21ff      	movs	r1, #255	; 0xff
 80042c0:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042c8:	2000      	movs	r0, #0
 80042ca:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 80042ce:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80042d0:	6991      	ldr	r1, [r2, #24]
 80042d2:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80042d6:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80042d8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80042da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80042de:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80042e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042e2:	f021 0101 	bic.w	r1, r1, #1
 80042e6:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80042e8:	2101      	movs	r1, #1
 80042ea:	65d1      	str	r1, [r2, #92]	; 0x5c
 80042ec:	e7e6      	b.n	80042bc <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 80042ee:	2002      	movs	r0, #2
}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40002800 	.word	0x40002800

080042f8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80042fe:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004300:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004302:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004304:	f015 0f01 	tst.w	r5, #1
 8004308:	d106      	bne.n	8004318 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800430a:	f015 0f02 	tst.w	r5, #2
 800430e:	d109      	bne.n	8004324 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004310:	2301      	movs	r3, #1
 8004312:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004316:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800431a:	2201      	movs	r2, #1
 800431c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800431e:	f7fd fa3f 	bl	80017a0 <HAL_RTC_AlarmAEventCallback>
 8004322:	e7f2      	b.n	800430a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004326:	2202      	movs	r2, #2
 8004328:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800432a:	4620      	mov	r0, r4
 800432c:	f000 f9e4 	bl	80046f8 <HAL_RTCEx_AlarmBEventCallback>
 8004330:	e7ee      	b.n	8004310 <HAL_RTC_AlarmIRQHandler+0x18>
 8004332:	bf00      	nop
 8004334:	40002800 	.word	0x40002800

08004338 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004338:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800433a:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <HAL_RTC_WaitForSynchro+0x30>)
 800433c:	68d3      	ldr	r3, [r2, #12]
 800433e:	f023 0320 	bic.w	r3, r3, #32
 8004342:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004344:	f7fd f8d6 	bl	80014f4 <HAL_GetTick>
 8004348:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <HAL_RTC_WaitForSynchro+0x30>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f013 0f20 	tst.w	r3, #32
 8004352:	d107      	bne.n	8004364 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004354:	f7fd f8ce 	bl	80014f4 <HAL_GetTick>
 8004358:	1b00      	subs	r0, r0, r4
 800435a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800435e:	d9f4      	bls.n	800434a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004360:	2003      	movs	r0, #3
 8004362:	e000      	b.n	8004366 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004364:	2000      	movs	r0, #0
}
 8004366:	bd10      	pop	{r4, pc}
 8004368:	40002800 	.word	0x40002800

0800436c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800436c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <RTC_EnterInitMode+0x48>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004376:	d002      	beq.n	800437e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800437a:	4620      	mov	r0, r4
 800437c:	bd70      	pop	{r4, r5, r6, pc}
 800437e:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004380:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <RTC_EnterInitMode+0x48>)
 8004382:	68d3      	ldr	r3, [r2, #12]
 8004384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004388:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800438a:	f7fd f8b3 	bl	80014f4 <HAL_GetTick>
 800438e:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004390:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <RTC_EnterInitMode+0x48>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f013 0f40 	tst.w	r3, #64	; 0x40
 800439a:	d1ee      	bne.n	800437a <RTC_EnterInitMode+0xe>
 800439c:	2c03      	cmp	r4, #3
 800439e:	d0ec      	beq.n	800437a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043a0:	f7fd f8a8 	bl	80014f4 <HAL_GetTick>
 80043a4:	1b43      	subs	r3, r0, r5
 80043a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043aa:	d9f2      	bls.n	8004392 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043ac:	2403      	movs	r4, #3
 80043ae:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 80043b2:	e7ee      	b.n	8004392 <RTC_EnterInitMode+0x26>
 80043b4:	40002800 	.word	0x40002800

080043b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043b8:	b510      	push	{r4, lr}
 80043ba:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <RTC_ExitInitMode+0x48>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f013 0f20 	tst.w	r3, #32
 80043cc:	d106      	bne.n	80043dc <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043ce:	f7ff ffb3 	bl	8004338 <HAL_RTC_WaitForSynchro>
 80043d2:	b198      	cbz	r0, 80043fc <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043d4:	2003      	movs	r0, #3
 80043d6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80043da:	e00f      	b.n	80043fc <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043dc:	4a08      	ldr	r2, [pc, #32]	; (8004400 <RTC_ExitInitMode+0x48>)
 80043de:	6993      	ldr	r3, [r2, #24]
 80043e0:	f023 0320 	bic.w	r3, r3, #32
 80043e4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043e6:	f7ff ffa7 	bl	8004338 <HAL_RTC_WaitForSynchro>
 80043ea:	b110      	cbz	r0, 80043f2 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043ec:	2003      	movs	r0, #3
 80043ee:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043f2:	4a03      	ldr	r2, [pc, #12]	; (8004400 <RTC_ExitInitMode+0x48>)
 80043f4:	6993      	ldr	r3, [r2, #24]
 80043f6:	f043 0320 	orr.w	r3, r3, #32
 80043fa:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80043fc:	bd10      	pop	{r4, pc}
 80043fe:	bf00      	nop
 8004400:	40002800 	.word	0x40002800

08004404 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8004404:	2800      	cmp	r0, #0
 8004406:	d04a      	beq.n	800449e <HAL_RTC_Init+0x9a>
{
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800440c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004410:	b19b      	cbz	r3, 800443a <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004412:	2302      	movs	r3, #2
 8004414:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004418:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_RTC_Init+0xa0>)
 800441a:	22ca      	movs	r2, #202	; 0xca
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
 800441e:	2253      	movs	r2, #83	; 0x53
 8004420:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004422:	4620      	mov	r0, r4
 8004424:	f7ff ffa2 	bl	800436c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004428:	b160      	cbz	r0, 8004444 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800442a:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <HAL_RTC_Init+0xa0>)
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004430:	b910      	cbnz	r0, 8004438 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8004432:	2301      	movs	r3, #1
 8004434:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004438:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800443a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800443e:	f7fc febf 	bl	80011c0 <HAL_RTC_MspInit>
 8004442:	e7e6      	b.n	8004412 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004444:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <HAL_RTC_Init+0xa0>)
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 800444c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004450:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004452:	6999      	ldr	r1, [r3, #24]
 8004454:	6862      	ldr	r2, [r4, #4]
 8004456:	6920      	ldr	r0, [r4, #16]
 8004458:	4302      	orrs	r2, r0
 800445a:	69a0      	ldr	r0, [r4, #24]
 800445c:	4302      	orrs	r2, r0
 800445e:	430a      	orrs	r2, r1
 8004460:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004462:	68e2      	ldr	r2, [r4, #12]
 8004464:	68a1      	ldr	r1, [r4, #8]
 8004466:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800446a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004472:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004474:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004476:	4301      	orrs	r1, r0
 8004478:	430a      	orrs	r2, r1
 800447a:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff ff9b 	bl	80043b8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004482:	2800      	cmp	r0, #0
 8004484:	d1d1      	bne.n	800442a <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8004486:	4907      	ldr	r1, [pc, #28]	; (80044a4 <HAL_RTC_Init+0xa0>)
 8004488:	698b      	ldr	r3, [r1, #24]
 800448a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800448e:	6a22      	ldr	r2, [r4, #32]
 8004490:	69e5      	ldr	r5, [r4, #28]
 8004492:	432a      	orrs	r2, r5
 8004494:	6965      	ldr	r5, [r4, #20]
 8004496:	432a      	orrs	r2, r5
 8004498:	4313      	orrs	r3, r2
 800449a:	618b      	str	r3, [r1, #24]
 800449c:	e7c5      	b.n	800442a <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 800449e:	2001      	movs	r0, #1
}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40002800 	.word	0x40002800

080044a8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80044a8:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80044aa:	e002      	b.n	80044b2 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80044ac:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80044ae:	380a      	subs	r0, #10
 80044b0:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80044b2:	2809      	cmp	r0, #9
 80044b4:	d8fa      	bhi.n	80044ac <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	b2db      	uxtb	r3, r3
}
 80044ba:	4318      	orrs	r0, r3
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80044c0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	f000 80b0 	beq.w	800462a <HAL_RTC_SetAlarm_IT+0x16a>
{
 80044ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ce:	4605      	mov	r5, r0
 80044d0:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80044d2:	2301      	movs	r3, #1
 80044d4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044d8:	2302      	movs	r3, #2
 80044da:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80044de:	4b54      	ldr	r3, [pc, #336]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 80044e0:	68de      	ldr	r6, [r3, #12]
 80044e2:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80044e6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80044ea:	d043      	beq.n	8004574 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80044ec:	bb12      	cbnz	r2, 8004534 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044f4:	d101      	bne.n	80044fa <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80044fa:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044fe:	7820      	ldrb	r0, [r4, #0]
 8004500:	f7ff ffd2 	bl	80044a8 <RTC_ByteToBcd2>
 8004504:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004506:	7860      	ldrb	r0, [r4, #1]
 8004508:	f7ff ffce 	bl	80044a8 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800450c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004510:	78a0      	ldrb	r0, [r4, #2]
 8004512:	f7ff ffc9 	bl	80044a8 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004516:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004518:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800451a:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800451e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8004522:	f7ff ffc1 	bl	80044a8 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004526:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800452a:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800452c:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800452e:	ea48 0000 	orr.w	r0, r8, r0
 8004532:	e020      	b.n	8004576 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004534:	6948      	ldr	r0, [r1, #20]
 8004536:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800453a:	d009      	beq.n	8004550 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800453c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004540:	d006      	beq.n	8004550 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004542:	4b3b      	ldr	r3, [pc, #236]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f013 0f40 	tst.w	r3, #64	; 0x40
 800454a:	d101      	bne.n	8004550 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800454c:	2300      	movs	r3, #0
 800454e:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004550:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004552:	7863      	ldrb	r3, [r4, #1]
 8004554:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800455a:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800455c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800455e:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004560:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004564:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004568:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800456c:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800456e:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004570:	4318      	orrs	r0, r3
 8004572:	e000      	b.n	8004576 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8004574:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004576:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 8004578:	22ca      	movs	r2, #202	; 0xca
 800457a:	625a      	str	r2, [r3, #36]	; 0x24
 800457c:	2253      	movs	r2, #83	; 0x53
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	d02a      	beq.n	80045de <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004588:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 800458a:	699a      	ldr	r2, [r3, #24]
 800458c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004590:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004592:	2202      	movs	r2, #2
 8004594:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004596:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800459a:	d040      	beq.n	800461e <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800459c:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 800459e:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80045a0:	69a2      	ldr	r2, [r4, #24]
 80045a2:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80045a4:	6862      	ldr	r2, [r4, #4]
 80045a6:	4b22      	ldr	r3, [pc, #136]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 80045a8:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80045aa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80045ac:	f042 0202 	orr.w	r2, r2, #2
 80045b0:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80045b8:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80045ba:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <HAL_RTC_SetAlarm_IT+0x174>)
 80045bc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80045c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 80045ca:	22ff      	movs	r2, #255	; 0xff
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80045d4:	2000      	movs	r0, #0
 80045d6:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80045da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80045e6:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80045e8:	2201      	movs	r2, #1
 80045ea:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80045ec:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80045f0:	d00f      	beq.n	8004612 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 80045f4:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80045f6:	69a2      	ldr	r2, [r4, #24]
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80045fa:	6862      	ldr	r2, [r4, #4]
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 80045fe:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004600:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800460e:	619a      	str	r2, [r3, #24]
 8004610:	e7d3      	b.n	80045ba <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004612:	69a3      	ldr	r3, [r4, #24]
 8004614:	69e2      	ldr	r2, [r4, #28]
 8004616:	4313      	orrs	r3, r2
 8004618:	4a05      	ldr	r2, [pc, #20]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 800461a:	6453      	str	r3, [r2, #68]	; 0x44
 800461c:	e7ed      	b.n	80045fa <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800461e:	69a3      	ldr	r3, [r4, #24]
 8004620:	69e2      	ldr	r2, [r4, #28]
 8004622:	4313      	orrs	r3, r2
 8004624:	4a02      	ldr	r2, [pc, #8]	; (8004630 <HAL_RTC_SetAlarm_IT+0x170>)
 8004626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004628:	e7bc      	b.n	80045a4 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800462a:	2002      	movs	r0, #2
}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40002800 	.word	0x40002800
 8004634:	58000800 	.word	0x58000800

08004638 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004638:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d017      	beq.n	8004670 <HAL_RTCEx_EnableBypassShadow+0x38>
 8004640:	2101      	movs	r1, #1
 8004642:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004646:	2302      	movs	r3, #2
 8004648:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800464e:	22ca      	movs	r2, #202	; 0xca
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
 8004652:	2253      	movs	r2, #83	; 0x53
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	f042 0220 	orr.w	r2, r2, #32
 800465c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800465e:	22ff      	movs	r2, #255	; 0xff
 8004660:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004662:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004666:	2300      	movs	r3, #0
 8004668:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800466c:	4618      	mov	r0, r3
 800466e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004670:	2002      	movs	r0, #2
}
 8004672:	4770      	bx	lr
 8004674:	40002800 	.word	0x40002800

08004678 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004678:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d020      	beq.n	80046c2 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8004680:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8004682:	2101      	movs	r1, #1
 8004684:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004688:	2302      	movs	r3, #2
 800468a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8004690:	22ca      	movs	r2, #202	; 0xca
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
 8004694:	2253      	movs	r2, #83	; 0x53
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800469e:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80046a0:	4c0a      	ldr	r4, [pc, #40]	; (80046cc <HAL_RTCEx_SetSSRU_IT+0x54>)
 80046a2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80046a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80046aa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ae:	22ff      	movs	r2, #255	; 0xff
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046b2:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046b6:	2300      	movs	r3, #0
 80046b8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80046bc:	4618      	mov	r0, r3
}
 80046be:	bc10      	pop	{r4}
 80046c0:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80046c2:	2002      	movs	r0, #2
}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40002800 	.word	0x40002800
 80046cc:	58000800 	.word	0x58000800

080046d0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80046dc:	d103      	bne.n	80046e6 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80046de:	2301      	movs	r3, #1
 80046e0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80046e4:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80046e6:	4b03      	ldr	r3, [pc, #12]	; (80046f4 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80046e8:	2240      	movs	r2, #64	; 0x40
 80046ea:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80046ec:	f7fd f85c 	bl	80017a8 <HAL_RTCEx_SSRUEventCallback>
 80046f0:	e7f5      	b.n	80046de <HAL_RTCEx_SSRUIRQHandler+0xe>
 80046f2:	bf00      	nop
 80046f4:	40002800 	.word	0x40002800

080046f8 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80046f8:	4770      	bx	lr

080046fa <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80046fa:	0089      	lsls	r1, r1, #2
 80046fc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004700:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004704:	600a      	str	r2, [r1, #0]
}
 8004706:	4770      	bx	lr

08004708 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8004708:	0089      	lsls	r1, r1, #2
 800470a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800470e:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004712:	6808      	ldr	r0, [r1, #0]
}
 8004714:	4770      	bx	lr
	...

08004718 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <SUBGHZSPI_Init+0x20>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004720:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004722:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8004726:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004728:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800472c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	4770      	bx	lr
 8004738:	58010000 	.word	0x58010000

0800473c <HAL_SUBGHZ_Init>:
{
 800473c:	b530      	push	{r4, r5, lr}
 800473e:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8004740:	2800      	cmp	r0, #0
 8004742:	d04e      	beq.n	80047e2 <HAL_SUBGHZ_Init+0xa6>
 8004744:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8004746:	7983      	ldrb	r3, [r0, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d03b      	beq.n	80047c4 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004754:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800475c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004760:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <HAL_SUBGHZ_Init+0xac>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004768:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800476c:	2264      	movs	r2, #100	; 0x64
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8004774:	9b01      	ldr	r3, [sp, #4]
 8004776:	b34b      	cbz	r3, 80047cc <HAL_SUBGHZ_Init+0x90>
    count--;
 8004778:	9b01      	ldr	r3, [sp, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004786:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800478a:	d1f3      	bne.n	8004774 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 800478c:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <HAL_SUBGHZ_Init+0xb0>)
 8004790:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004798:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800479c:	4914      	ldr	r1, [pc, #80]	; (80047f0 <HAL_SUBGHZ_Init+0xb4>)
 800479e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80047a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b0:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80047b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047b6:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80047b8:	b15d      	cbz	r5, 80047d2 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80047ba:	2301      	movs	r3, #1
 80047bc:	71a3      	strb	r3, [r4, #6]
}
 80047be:	4628      	mov	r0, r5
 80047c0:	b003      	add	sp, #12
 80047c2:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80047c4:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80047c6:	f7fc fda5 	bl	8001314 <HAL_SUBGHZ_MspInit>
 80047ca:	e7bf      	b.n	800474c <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80047cc:	2501      	movs	r5, #1
 80047ce:	60a5      	str	r5, [r4, #8]
      break;
 80047d0:	e7dd      	b.n	800478e <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80047d2:	6820      	ldr	r0, [r4, #0]
 80047d4:	f7ff ffa0 	bl	8004718 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80047d8:	2301      	movs	r3, #1
 80047da:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80047dc:	2300      	movs	r3, #0
 80047de:	60a3      	str	r3, [r4, #8]
 80047e0:	e7eb      	b.n	80047ba <HAL_SUBGHZ_Init+0x7e>
    return status;
 80047e2:	2501      	movs	r5, #1
 80047e4:	e7eb      	b.n	80047be <HAL_SUBGHZ_Init+0x82>
 80047e6:	bf00      	nop
 80047e8:	2000004c 	.word	0x2000004c
 80047ec:	58000400 	.word	0x58000400
 80047f0:	58000800 	.word	0x58000800

080047f4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80047f4:	b082      	sub	sp, #8
 80047f6:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80047f8:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <SUBGHZSPI_Transmit+0x70>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004800:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004804:	2064      	movs	r0, #100	; 0x64
 8004806:	fb00 f303 	mul.w	r3, r0, r3
 800480a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800480c:	9b01      	ldr	r3, [sp, #4]
 800480e:	b14b      	cbz	r3, 8004824 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004810:	9b01      	ldr	r3, [sp, #4]
 8004812:	3b01      	subs	r3, #1
 8004814:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <SUBGHZSPI_Transmit+0x74>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f013 0f02 	tst.w	r3, #2
 800481e:	d0f5      	beq.n	800480c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004820:	2000      	movs	r0, #0
 8004822:	e001      	b.n	8004828 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004824:	2001      	movs	r0, #1
 8004826:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8004828:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <SUBGHZSPI_Transmit+0x74>)
 800482a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <SUBGHZSPI_Transmit+0x70>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004834:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004838:	2164      	movs	r1, #100	; 0x64
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004840:	9b01      	ldr	r3, [sp, #4]
 8004842:	b143      	cbz	r3, 8004856 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004844:	9b01      	ldr	r3, [sp, #4]
 8004846:	3b01      	subs	r3, #1
 8004848:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800484a:	4b07      	ldr	r3, [pc, #28]	; (8004868 <SUBGHZSPI_Transmit+0x74>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f013 0f01 	tst.w	r3, #1
 8004852:	d0f5      	beq.n	8004840 <SUBGHZSPI_Transmit+0x4c>
 8004854:	e001      	b.n	800485a <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004856:	2001      	movs	r0, #1
 8004858:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800485a:	4b03      	ldr	r3, [pc, #12]	; (8004868 <SUBGHZSPI_Transmit+0x74>)
 800485c:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800485e:	b002      	add	sp, #8
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	2000004c 	.word	0x2000004c
 8004868:	58010000 	.word	0x58010000

0800486c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800486c:	b082      	sub	sp, #8
 800486e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <SUBGHZSPI_Receive+0x78>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004878:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800487c:	2064      	movs	r0, #100	; 0x64
 800487e:	fb00 f303 	mul.w	r3, r0, r3
 8004882:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004884:	9b01      	ldr	r3, [sp, #4]
 8004886:	b14b      	cbz	r3, 800489c <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004888:	9b01      	ldr	r3, [sp, #4]
 800488a:	3b01      	subs	r3, #1
 800488c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <SUBGHZSPI_Receive+0x7c>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f013 0f02 	tst.w	r3, #2
 8004896:	d0f5      	beq.n	8004884 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004898:	2000      	movs	r0, #0
 800489a:	e001      	b.n	80048a0 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800489c:	2001      	movs	r0, #1
 800489e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <SUBGHZSPI_Receive+0x7c>)
 80048a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80048a6:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <SUBGHZSPI_Receive+0x78>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80048b2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80048b6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80048ba:	fb0c f303 	mul.w	r3, ip, r3
 80048be:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80048c0:	9b01      	ldr	r3, [sp, #4]
 80048c2:	b143      	cbz	r3, 80048d6 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80048c4:	9b01      	ldr	r3, [sp, #4]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <SUBGHZSPI_Receive+0x7c>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f013 0f01 	tst.w	r3, #1
 80048d2:	d0f5      	beq.n	80048c0 <SUBGHZSPI_Receive+0x54>
 80048d4:	e001      	b.n	80048da <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048d6:	2001      	movs	r0, #1
 80048d8:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80048da:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <SUBGHZSPI_Receive+0x7c>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	700b      	strb	r3, [r1, #0]

  return status;
}
 80048e0:	b002      	add	sp, #8
 80048e2:	4770      	bx	lr
 80048e4:	2000004c 	.word	0x2000004c
 80048e8:	58010000 	.word	0x58010000

080048ec <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80048ec:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <SUBGHZ_WaitOnBusy+0x50>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80048f6:	f3c3 434b 	ubfx	r3, r3, #17, #12
 80048fa:	2264      	movs	r2, #100	; 0x64
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	e006      	b.n	8004912 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004904:	2302      	movs	r3, #2
 8004906:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8004908:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800490a:	b002      	add	sp, #8
 800490c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800490e:	4213      	tst	r3, r2
 8004910:	d012      	beq.n	8004938 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <SUBGHZ_WaitOnBusy+0x54>)
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f013 0304 	ands.w	r3, r3, #4
 800491a:	d000      	beq.n	800491e <SUBGHZ_WaitOnBusy+0x32>
 800491c:	2301      	movs	r3, #1
    if (count == 0U)
 800491e:	9a01      	ldr	r2, [sp, #4]
 8004920:	2a00      	cmp	r2, #0
 8004922:	d0ef      	beq.n	8004904 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8004924:	9a01      	ldr	r2, [sp, #4]
 8004926:	3a01      	subs	r2, #1
 8004928:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800492a:	4a05      	ldr	r2, [pc, #20]	; (8004940 <SUBGHZ_WaitOnBusy+0x54>)
 800492c:	6952      	ldr	r2, [r2, #20]
 800492e:	f012 0202 	ands.w	r2, r2, #2
 8004932:	d0ec      	beq.n	800490e <SUBGHZ_WaitOnBusy+0x22>
 8004934:	2201      	movs	r2, #1
 8004936:	e7ea      	b.n	800490e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8004938:	2000      	movs	r0, #0
 800493a:	e7e6      	b.n	800490a <SUBGHZ_WaitOnBusy+0x1e>
 800493c:	2000004c 	.word	0x2000004c
 8004940:	58000400 	.word	0x58000400

08004944 <SUBGHZ_CheckDeviceReady>:
{
 8004944:	b500      	push	{lr}
 8004946:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004948:	7903      	ldrb	r3, [r0, #4]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d004      	beq.n	8004958 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800494e:	f7ff ffcd 	bl	80048ec <SUBGHZ_WaitOnBusy>
}
 8004952:	b003      	add	sp, #12
 8004954:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004958:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <SUBGHZ_CheckDeviceReady+0x4c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004960:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8004964:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004966:	4a0b      	ldr	r2, [pc, #44]	; (8004994 <SUBGHZ_CheckDeviceReady+0x50>)
 8004968:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800496c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8004974:	9b01      	ldr	r3, [sp, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 800497a:	9b01      	ldr	r3, [sp, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f9      	bne.n	8004974 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004980:	4a04      	ldr	r2, [pc, #16]	; (8004994 <SUBGHZ_CheckDeviceReady+0x50>)
 8004982:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800498e:	e7de      	b.n	800494e <SUBGHZ_CheckDeviceReady+0xa>
 8004990:	2000004c 	.word	0x2000004c
 8004994:	58000400 	.word	0x58000400

08004998 <HAL_SUBGHZ_WriteRegisters>:
{
 8004998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800499e:	7980      	ldrb	r0, [r0, #6]
 80049a0:	fa5f f880 	uxtb.w	r8, r0
 80049a4:	f1b8 0f01 	cmp.w	r8, #1
 80049a8:	d13e      	bne.n	8004a28 <HAL_SUBGHZ_WriteRegisters+0x90>
 80049aa:	460c      	mov	r4, r1
 80049ac:	4617      	mov	r7, r2
 80049ae:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80049b0:	796b      	ldrb	r3, [r5, #5]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d03b      	beq.n	8004a2e <HAL_SUBGHZ_WriteRegisters+0x96>
 80049b6:	2301      	movs	r3, #1
 80049b8:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80049ba:	2302      	movs	r3, #2
 80049bc:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80049be:	4628      	mov	r0, r5
 80049c0:	f7ff ffc0 	bl	8004944 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80049c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80049d2:	210d      	movs	r1, #13
 80049d4:	4628      	mov	r0, r5
 80049d6:	f7ff ff0d 	bl	80047f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80049da:	0a21      	lsrs	r1, r4, #8
 80049dc:	4628      	mov	r0, r5
 80049de:	f7ff ff09 	bl	80047f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80049e2:	b2e1      	uxtb	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f7ff ff05 	bl	80047f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80049ea:	2400      	movs	r4, #0
 80049ec:	e005      	b.n	80049fa <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80049ee:	5d39      	ldrb	r1, [r7, r4]
 80049f0:	4628      	mov	r0, r5
 80049f2:	f7ff feff 	bl	80047f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80049f6:	3401      	adds	r4, #1
 80049f8:	b2a4      	uxth	r4, r4
 80049fa:	42b4      	cmp	r4, r6
 80049fc:	d3f7      	bcc.n	80049ee <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80049fe:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8004a00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7ff ff6d 	bl	80048ec <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a12:	68ab      	ldr	r3, [r5, #8]
 8004a14:	b90b      	cbnz	r3, 8004a1a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8004a16:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	716b      	strb	r3, [r5, #5]
}
 8004a22:	4640      	mov	r0, r8
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004a28:	f04f 0802 	mov.w	r8, #2
 8004a2c:	e7f9      	b.n	8004a22 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8004a2e:	f04f 0802 	mov.w	r8, #2
 8004a32:	e7f6      	b.n	8004a22 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8004a34:	58000400 	.word	0x58000400

08004a38 <HAL_SUBGHZ_ReadRegisters>:
{
 8004a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a3c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a3e:	7980      	ldrb	r0, [r0, #6]
 8004a40:	fa5f f880 	uxtb.w	r8, r0
 8004a44:	f1b8 0f01 	cmp.w	r8, #1
 8004a48:	d141      	bne.n	8004ace <HAL_SUBGHZ_ReadRegisters+0x96>
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	4615      	mov	r5, r2
 8004a4e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004a50:	7973      	ldrb	r3, [r6, #5]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d03e      	beq.n	8004ad4 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8004a56:	2301      	movs	r3, #1
 8004a58:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7ff ff72 	bl	8004944 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004a60:	4a1e      	ldr	r2, [pc, #120]	; (8004adc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8004a62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004a6e:	211d      	movs	r1, #29
 8004a70:	4630      	mov	r0, r6
 8004a72:	f7ff febf 	bl	80047f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004a76:	0a21      	lsrs	r1, r4, #8
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7ff febb 	bl	80047f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004a7e:	b2e1      	uxtb	r1, r4
 8004a80:	4630      	mov	r0, r6
 8004a82:	f7ff feb7 	bl	80047f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004a86:	2100      	movs	r1, #0
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f7ff feb3 	bl	80047f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004a8e:	2400      	movs	r4, #0
 8004a90:	e006      	b.n	8004aa0 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a92:	4629      	mov	r1, r5
 8004a94:	4630      	mov	r0, r6
 8004a96:	f7ff fee9 	bl	800486c <SUBGHZSPI_Receive>
      pData++;
 8004a9a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004a9c:	3401      	adds	r4, #1
 8004a9e:	b2a4      	uxth	r4, r4
 8004aa0:	42bc      	cmp	r4, r7
 8004aa2:	d3f6      	bcc.n	8004a92 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004aa4:	4a0d      	ldr	r2, [pc, #52]	; (8004adc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8004aa6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f7ff ff1a 	bl	80048ec <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004ab8:	68b3      	ldr	r3, [r6, #8]
 8004aba:	b90b      	cbnz	r3, 8004ac0 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8004abc:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	7173      	strb	r3, [r6, #5]
}
 8004ac8:	4640      	mov	r0, r8
 8004aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004ace:	f04f 0802 	mov.w	r8, #2
 8004ad2:	e7f9      	b.n	8004ac8 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8004ad4:	f04f 0802 	mov.w	r8, #2
 8004ad8:	e7f6      	b.n	8004ac8 <HAL_SUBGHZ_ReadRegisters+0x90>
 8004ada:	bf00      	nop
 8004adc:	58000400 	.word	0x58000400

08004ae0 <HAL_SUBGHZ_ExecSetCmd>:
{
 8004ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ae4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004ae6:	7980      	ldrb	r0, [r0, #6]
 8004ae8:	fa5f f980 	uxtb.w	r9, r0
 8004aec:	f1b9 0f01 	cmp.w	r9, #1
 8004af0:	d143      	bne.n	8004b7a <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8004af2:	4688      	mov	r8, r1
 8004af4:	4617      	mov	r7, r2
 8004af6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004af8:	796b      	ldrb	r3, [r5, #5]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d040      	beq.n	8004b80 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8004afe:	2301      	movs	r3, #1
 8004b00:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7ff ff1e 	bl	8004944 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004b08:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8004b0c:	d005      	beq.n	8004b1a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8004b0e:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8004b12:	d002      	beq.n	8004b1a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	712b      	strb	r3, [r5, #4]
 8004b18:	e001      	b.n	8004b1e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8004b20:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f7ff fe60 	bl	80047f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b34:	2400      	movs	r4, #0
 8004b36:	e005      	b.n	8004b44 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004b38:	5d39      	ldrb	r1, [r7, r4]
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f7ff fe5a 	bl	80047f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b40:	3401      	adds	r4, #1
 8004b42:	b2a4      	uxth	r4, r4
 8004b44:	42b4      	cmp	r4, r6
 8004b46:	d3f7      	bcc.n	8004b38 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b48:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8004b4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8004b56:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8004b5a:	d10a      	bne.n	8004b72 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b5c:	68ab      	ldr	r3, [r5, #8]
 8004b5e:	b90b      	cbnz	r3, 8004b64 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8004b60:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b64:	2301      	movs	r3, #1
 8004b66:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	716b      	strb	r3, [r5, #5]
}
 8004b6c:	4648      	mov	r0, r9
 8004b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b72:	4628      	mov	r0, r5
 8004b74:	f7ff feba 	bl	80048ec <SUBGHZ_WaitOnBusy>
 8004b78:	e7f0      	b.n	8004b5c <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8004b7a:	f04f 0902 	mov.w	r9, #2
 8004b7e:	e7f5      	b.n	8004b6c <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8004b80:	f04f 0902 	mov.w	r9, #2
 8004b84:	e7f2      	b.n	8004b6c <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8004b86:	bf00      	nop
 8004b88:	58000400 	.word	0x58000400

08004b8c <HAL_SUBGHZ_ExecGetCmd>:
{
 8004b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b90:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b92:	7980      	ldrb	r0, [r0, #6]
 8004b94:	fa5f f880 	uxtb.w	r8, r0
 8004b98:	f1b8 0f01 	cmp.w	r8, #1
 8004b9c:	d139      	bne.n	8004c12 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	4615      	mov	r5, r2
 8004ba2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004ba4:	7973      	ldrb	r3, [r6, #5]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d036      	beq.n	8004c18 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8004baa:	2301      	movs	r3, #1
 8004bac:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7ff fec8 	bl	8004944 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004bb4:	4a1a      	ldr	r2, [pc, #104]	; (8004c20 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004bb6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f7ff fe15 	bl	80047f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7ff fe11 	bl	80047f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004bd2:	2400      	movs	r4, #0
 8004bd4:	e006      	b.n	8004be4 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f7ff fe47 	bl	800486c <SUBGHZSPI_Receive>
      pData++;
 8004bde:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004be0:	3401      	adds	r4, #1
 8004be2:	b2a4      	uxth	r4, r4
 8004be4:	42bc      	cmp	r4, r7
 8004be6:	d3f6      	bcc.n	8004bd6 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004be8:	4a0d      	ldr	r2, [pc, #52]	; (8004c20 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004bea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f7ff fe78 	bl	80048ec <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004bfc:	68b3      	ldr	r3, [r6, #8]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8004c00:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004c04:	2301      	movs	r3, #1
 8004c06:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004c08:	2300      	movs	r3, #0
 8004c0a:	7173      	strb	r3, [r6, #5]
}
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004c12:	f04f 0802 	mov.w	r8, #2
 8004c16:	e7f9      	b.n	8004c0c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8004c18:	f04f 0802 	mov.w	r8, #2
 8004c1c:	e7f6      	b.n	8004c0c <HAL_SUBGHZ_ExecGetCmd+0x80>
 8004c1e:	bf00      	nop
 8004c20:	58000400 	.word	0x58000400

08004c24 <HAL_SUBGHZ_IRQHandler>:
{
 8004c24:	b530      	push	{r4, r5, lr}
 8004c26:	b083      	sub	sp, #12
 8004c28:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004c30:	2302      	movs	r3, #2
 8004c32:	aa01      	add	r2, sp, #4
 8004c34:	2112      	movs	r1, #18
 8004c36:	f7ff ffa9 	bl	8004b8c <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004c3a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 8004c3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004c42:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004c46:	f013 0f01 	tst.w	r3, #1
 8004c4a:	d126      	bne.n	8004c9a <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004c4c:	f014 0f02 	tst.w	r4, #2
 8004c50:	d127      	bne.n	8004ca2 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004c52:	f014 0f04 	tst.w	r4, #4
 8004c56:	d128      	bne.n	8004caa <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004c58:	f014 0f08 	tst.w	r4, #8
 8004c5c:	d129      	bne.n	8004cb2 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004c5e:	f014 0f10 	tst.w	r4, #16
 8004c62:	d12a      	bne.n	8004cba <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004c64:	f014 0f20 	tst.w	r4, #32
 8004c68:	d12b      	bne.n	8004cc2 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004c6a:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004c6e:	d12c      	bne.n	8004cca <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004c70:	f014 0f80 	tst.w	r4, #128	; 0x80
 8004c74:	d006      	beq.n	8004c84 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004c76:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004c7a:	d02a      	beq.n	8004cd2 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f00b fb40 	bl	8010304 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004c84:	f414 7f00 	tst.w	r4, #512	; 0x200
 8004c88:	d128      	bne.n	8004cdc <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	aa01      	add	r2, sp, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4628      	mov	r0, r5
 8004c92:	f7ff ff25 	bl	8004ae0 <HAL_SUBGHZ_ExecSetCmd>
}
 8004c96:	b003      	add	sp, #12
 8004c98:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f00b fb1a 	bl	80102d4 <HAL_SUBGHZ_TxCpltCallback>
 8004ca0:	e7d4      	b.n	8004c4c <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f00b fb1e 	bl	80102e4 <HAL_SUBGHZ_RxCpltCallback>
 8004ca8:	e7d3      	b.n	8004c52 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004caa:	4628      	mov	r0, r5
 8004cac:	f00b fb4e 	bl	801034c <HAL_SUBGHZ_PreambleDetectedCallback>
 8004cb0:	e7d2      	b.n	8004c58 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f00b fb52 	bl	801035c <HAL_SUBGHZ_SyncWordValidCallback>
 8004cb8:	e7d1      	b.n	8004c5e <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f00b fb56 	bl	801036c <HAL_SUBGHZ_HeaderValidCallback>
 8004cc0:	e7d0      	b.n	8004c64 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f00b fb3a 	bl	801033c <HAL_SUBGHZ_HeaderErrorCallback>
 8004cc8:	e7cf      	b.n	8004c6a <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f00b fb12 	bl	80102f4 <HAL_SUBGHZ_CRCErrorCallback>
 8004cd0:	e7ce      	b.n	8004c70 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f00b fb15 	bl	8010304 <HAL_SUBGHZ_CADStatusCallback>
 8004cda:	e7d3      	b.n	8004c84 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f00b fb23 	bl	8010328 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8004ce2:	e7d2      	b.n	8004c8a <HAL_SUBGHZ_IRQHandler+0x66>

08004ce4 <HAL_SUBGHZ_WriteBuffer>:
{
 8004ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004cea:	7980      	ldrb	r0, [r0, #6]
 8004cec:	fa5f f880 	uxtb.w	r8, r0
 8004cf0:	f1b8 0f01 	cmp.w	r8, #1
 8004cf4:	d138      	bne.n	8004d68 <HAL_SUBGHZ_WriteBuffer+0x84>
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4617      	mov	r7, r2
 8004cfa:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004cfc:	796b      	ldrb	r3, [r5, #5]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d035      	beq.n	8004d6e <HAL_SUBGHZ_WriteBuffer+0x8a>
 8004d02:	2301      	movs	r3, #1
 8004d04:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004d06:	4628      	mov	r0, r5
 8004d08:	f7ff fe1c 	bl	8004944 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d0c:	4a19      	ldr	r2, [pc, #100]	; (8004d74 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004d0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004d1a:	210e      	movs	r1, #14
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f7ff fd69 	bl	80047f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004d22:	4621      	mov	r1, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	f7ff fd65 	bl	80047f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004d2a:	2400      	movs	r4, #0
 8004d2c:	e005      	b.n	8004d3a <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004d2e:	5d39      	ldrb	r1, [r7, r4]
 8004d30:	4628      	mov	r0, r5
 8004d32:	f7ff fd5f 	bl	80047f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004d36:	3401      	adds	r4, #1
 8004d38:	b2a4      	uxth	r4, r4
 8004d3a:	42b4      	cmp	r4, r6
 8004d3c:	d3f7      	bcc.n	8004d2e <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d3e:	4a0d      	ldr	r2, [pc, #52]	; (8004d74 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004d40:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f7ff fdcd 	bl	80048ec <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004d52:	68ab      	ldr	r3, [r5, #8]
 8004d54:	b90b      	cbnz	r3, 8004d5a <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8004d56:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	716b      	strb	r3, [r5, #5]
}
 8004d62:	4640      	mov	r0, r8
 8004d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004d68:	f04f 0802 	mov.w	r8, #2
 8004d6c:	e7f9      	b.n	8004d62 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8004d6e:	f04f 0802 	mov.w	r8, #2
 8004d72:	e7f6      	b.n	8004d62 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004d74:	58000400 	.word	0x58000400

08004d78 <HAL_SUBGHZ_ReadBuffer>:
{
 8004d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d7c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004d7e:	7980      	ldrb	r0, [r0, #6]
 8004d80:	fa5f f880 	uxtb.w	r8, r0
 8004d84:	f1b8 0f01 	cmp.w	r8, #1
 8004d88:	d13d      	bne.n	8004e06 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	4615      	mov	r5, r2
 8004d8e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004d90:	7973      	ldrb	r3, [r6, #5]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d03a      	beq.n	8004e0c <HAL_SUBGHZ_ReadBuffer+0x94>
 8004d96:	2301      	movs	r3, #1
 8004d98:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f7ff fdd2 	bl	8004944 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004da0:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004da2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004da6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004dae:	211e      	movs	r1, #30
 8004db0:	4630      	mov	r0, r6
 8004db2:	f7ff fd1f 	bl	80047f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004db6:	4621      	mov	r1, r4
 8004db8:	4630      	mov	r0, r6
 8004dba:	f7ff fd1b 	bl	80047f4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f7ff fd17 	bl	80047f4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004dc6:	2400      	movs	r4, #0
 8004dc8:	e006      	b.n	8004dd8 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7ff fd4d 	bl	800486c <SUBGHZSPI_Receive>
      pData++;
 8004dd2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004dd4:	3401      	adds	r4, #1
 8004dd6:	b2a4      	uxth	r4, r4
 8004dd8:	42bc      	cmp	r4, r7
 8004dda:	d3f6      	bcc.n	8004dca <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ddc:	4a0d      	ldr	r2, [pc, #52]	; (8004e14 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004dde:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004dea:	4630      	mov	r0, r6
 8004dec:	f7ff fd7e 	bl	80048ec <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004df0:	68b3      	ldr	r3, [r6, #8]
 8004df2:	b90b      	cbnz	r3, 8004df8 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8004df4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	7173      	strb	r3, [r6, #5]
}
 8004e00:	4640      	mov	r0, r8
 8004e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004e06:	f04f 0802 	mov.w	r8, #2
 8004e0a:	e7f9      	b.n	8004e00 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8004e0c:	f04f 0802 	mov.w	r8, #2
 8004e10:	e7f6      	b.n	8004e00 <HAL_SUBGHZ_ReadBuffer+0x88>
 8004e12:	bf00      	nop
 8004e14:	58000400 	.word	0x58000400

08004e18 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004e18:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	e852 3f00 	ldrex	r3, [r2]
 8004e1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	e842 3100 	strex	r1, r3, [r2]
 8004e26:	2900      	cmp	r1, #0
 8004e28:	d1f6      	bne.n	8004e18 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004e2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	f102 0308 	add.w	r3, r2, #8
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	3208      	adds	r2, #8
 8004e3a:	e842 3100 	strex	r1, r3, [r2]
 8004e3e:	2900      	cmp	r1, #0
 8004e40:	d1f3      	bne.n	8004e2a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e42:	2320      	movs	r3, #32
 8004e44:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8004e48:	4770      	bx	lr

08004e4a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e4a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	e852 3f00 	ldrex	r3, [r2]
 8004e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	e842 3100 	strex	r1, r3, [r2]
 8004e58:	2900      	cmp	r1, #0
 8004e5a:	d1f6      	bne.n	8004e4a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	f102 0308 	add.w	r3, r2, #8
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	3208      	adds	r2, #8
 8004e70:	e842 3100 	strex	r1, r3, [r2]
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d1f1      	bne.n	8004e5c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e78:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d006      	beq.n	8004e8c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	2320      	movs	r3, #32
 8004e80:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e84:	2300      	movs	r3, #0
 8004e86:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e88:	6703      	str	r3, [r0, #112]	; 0x70
}
 8004e8a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	e852 3f00 	ldrex	r3, [r2]
 8004e92:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	e842 3100 	strex	r1, r3, [r2]
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	d1f6      	bne.n	8004e8c <UART_EndRxTransfer+0x42>
 8004e9e:	e7ee      	b.n	8004e7e <UART_EndRxTransfer+0x34>

08004ea0 <HAL_UART_Transmit_DMA>:
{
 8004ea0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8004ea6:	2a20      	cmp	r2, #32
 8004ea8:	d14a      	bne.n	8004f40 <HAL_UART_Transmit_DMA+0xa0>
{
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	d048      	beq.n	8004f44 <HAL_UART_Transmit_DMA+0xa4>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d048      	beq.n	8004f48 <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 8004eb6:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8004eba:	2a01      	cmp	r2, #1
 8004ebc:	d046      	beq.n	8004f4c <HAL_UART_Transmit_DMA+0xac>
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8004ec4:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004ec6:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8004eca:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ed4:	2221      	movs	r2, #33	; 0x21
 8004ed6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8004eda:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004edc:	b1e2      	cbz	r2, 8004f18 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ede:	491c      	ldr	r1, [pc, #112]	; (8004f50 <HAL_UART_Transmit_DMA+0xb0>)
 8004ee0:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ee2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004ee4:	491b      	ldr	r1, [pc, #108]	; (8004f54 <HAL_UART_Transmit_DMA+0xb4>)
 8004ee6:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ee8:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004eea:	491b      	ldr	r1, [pc, #108]	; (8004f58 <HAL_UART_Transmit_DMA+0xb8>)
 8004eec:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8004eee:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004ef4:	6802      	ldr	r2, [r0, #0]
 8004ef6:	3228      	adds	r2, #40	; 0x28
 8004ef8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004efa:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8004efc:	f7fd ffbc 	bl	8002e78 <HAL_DMA_Start_IT>
 8004f00:	b150      	cbz	r0, 8004f18 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f02:	2310      	movs	r3, #16
 8004f04:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8004f0e:	2320      	movs	r3, #32
 8004f10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8004f14:	2001      	movs	r0, #1
 8004f16:	e012      	b.n	8004f3e <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	2240      	movs	r2, #64	; 0x40
 8004f1c:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	f102 0308 	add.w	r3, r2, #8
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	3208      	adds	r2, #8
 8004f34:	e842 3100 	strex	r1, r3, [r2]
 8004f38:	2900      	cmp	r1, #0
 8004f3a:	d1f3      	bne.n	8004f24 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 8004f3c:	2000      	movs	r0, #0
}
 8004f3e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004f40:	2002      	movs	r0, #2
}
 8004f42:	4770      	bx	lr
      return HAL_ERROR;
 8004f44:	2001      	movs	r0, #1
 8004f46:	e7fa      	b.n	8004f3e <HAL_UART_Transmit_DMA+0x9e>
 8004f48:	2001      	movs	r0, #1
 8004f4a:	e7f8      	b.n	8004f3e <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 8004f4c:	2002      	movs	r0, #2
 8004f4e:	e7f6      	b.n	8004f3e <HAL_UART_Transmit_DMA+0x9e>
 8004f50:	08004f5d 	.word	0x08004f5d
 8004f54:	08004fcb 	.word	0x08004fcb
 8004f58:	08004fd7 	.word	0x08004fd7

08004f5c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b508      	push	{r3, lr}
 8004f5e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f60:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f013 0f20 	tst.w	r3, #32
 8004f6a:	d118      	bne.n	8004f9e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	f102 0308 	add.w	r3, r2, #8
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	3208      	adds	r2, #8
 8004f82:	e842 3100 	strex	r1, r3, [r2]
 8004f86:	2900      	cmp	r1, #0
 8004f88:	d1f3      	bne.n	8004f72 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f8a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	e852 3f00 	ldrex	r3, [r2]
 8004f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	e842 3100 	strex	r1, r3, [r2]
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	d1f6      	bne.n	8004f8a <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f9c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004f9e:	f7fc fd3b 	bl	8001a18 <HAL_UART_TxCpltCallback>
}
 8004fa2:	e7fb      	b.n	8004f9c <UART_DMATransmitCplt+0x40>

08004fa4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fa4:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fa6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	e852 3f00 	ldrex	r3, [r2]
 8004fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	e842 3100 	strex	r1, r3, [r2]
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	d1f6      	bne.n	8004fa6 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb8:	2320      	movs	r3, #32
 8004fba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fc2:	f7fc fd29 	bl	8001a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fc6:	bd08      	pop	{r3, pc}

08004fc8 <HAL_UART_TxHalfCpltCallback>:
}
 8004fc8:	4770      	bx	lr

08004fca <UART_DMATxHalfCplt>:
{
 8004fca:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004fcc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004fce:	f7ff fffb 	bl	8004fc8 <HAL_UART_TxHalfCpltCallback>
}
 8004fd2:	bd08      	pop	{r3, pc}

08004fd4 <HAL_UART_ErrorCallback>:
}
 8004fd4:	4770      	bx	lr

08004fd6 <UART_DMAError>:
{
 8004fd6:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fd8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004fda:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004fde:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fea:	d001      	beq.n	8004ff0 <UART_DMAError+0x1a>
 8004fec:	2a21      	cmp	r2, #33	; 0x21
 8004fee:	d010      	beq.n	8005012 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ff8:	d001      	beq.n	8004ffe <UART_DMAError+0x28>
 8004ffa:	2d22      	cmp	r5, #34	; 0x22
 8004ffc:	d010      	beq.n	8005020 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ffe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005002:	f043 0310 	orr.w	r3, r3, #16
 8005006:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff ffe2 	bl	8004fd4 <HAL_UART_ErrorCallback>
}
 8005010:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff fefd 	bl	8004e18 <UART_EndTxTransfer>
 800501e:	e7e7      	b.n	8004ff0 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff ff0f 	bl	8004e4a <UART_EndRxTransfer>
 800502c:	e7e7      	b.n	8004ffe <UART_DMAError+0x28>

0800502e <UART_DMAAbortOnError>:
{
 800502e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005030:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005038:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800503c:	f7ff ffca 	bl	8004fd4 <HAL_UART_ErrorCallback>
}
 8005040:	bd08      	pop	{r3, pc}

08005042 <HAL_UARTEx_RxEventCallback>:
}
 8005042:	4770      	bx	lr

08005044 <HAL_UART_IRQHandler>:
{
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005048:	6801      	ldr	r1, [r0, #0]
 800504a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800504c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800504e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005050:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005054:	401a      	ands	r2, r3
 8005056:	d108      	bne.n	800506a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005058:	f013 0f20 	tst.w	r3, #32
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800505e:	f010 0f20 	tst.w	r0, #32
 8005062:	d134      	bne.n	80050ce <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005064:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005068:	d131      	bne.n	80050ce <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800506a:	b12a      	cbz	r2, 8005078 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800506c:	4a95      	ldr	r2, [pc, #596]	; (80052c4 <HAL_UART_IRQHandler+0x280>)
 800506e:	402a      	ands	r2, r5
 8005070:	d133      	bne.n	80050da <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005072:	4e95      	ldr	r6, [pc, #596]	; (80052c8 <HAL_UART_IRQHandler+0x284>)
 8005074:	4230      	tst	r0, r6
 8005076:	d130      	bne.n	80050da <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005078:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800507a:	2a01      	cmp	r2, #1
 800507c:	f000 80c3 	beq.w	8005206 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005080:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005084:	d003      	beq.n	800508e <HAL_UART_IRQHandler+0x4a>
 8005086:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800508a:	f040 815b 	bne.w	8005344 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800508e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005092:	d007      	beq.n	80050a4 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005094:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005098:	f040 815b 	bne.w	8005352 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800509c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80050a0:	f040 8157 	bne.w	8005352 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050a8:	d003      	beq.n	80050b2 <HAL_UART_IRQHandler+0x6e>
 80050aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050ae:	f040 8157 	bne.w	8005360 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050b2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80050b6:	d003      	beq.n	80050c0 <HAL_UART_IRQHandler+0x7c>
 80050b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80050bc:	f040 8154 	bne.w	8005368 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80050c4:	d002      	beq.n	80050cc <HAL_UART_IRQHandler+0x88>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f2c0 8152 	blt.w	8005370 <HAL_UART_IRQHandler+0x32c>
}
 80050cc:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80050ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0fb      	beq.n	80050cc <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 80050d4:	4620      	mov	r0, r4
 80050d6:	4798      	blx	r3
      return;
 80050d8:	e7f8      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050da:	f013 0f01 	tst.w	r3, #1
 80050de:	d009      	beq.n	80050f4 <HAL_UART_IRQHandler+0xb0>
 80050e0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80050e4:	d006      	beq.n	80050f4 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050e6:	2601      	movs	r6, #1
 80050e8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ea:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80050ee:	4331      	orrs	r1, r6
 80050f0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f4:	f013 0f02 	tst.w	r3, #2
 80050f8:	d00b      	beq.n	8005112 <HAL_UART_IRQHandler+0xce>
 80050fa:	f015 0f01 	tst.w	r5, #1
 80050fe:	d008      	beq.n	8005112 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005100:	6821      	ldr	r1, [r4, #0]
 8005102:	2602      	movs	r6, #2
 8005104:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005106:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800510a:	f041 0104 	orr.w	r1, r1, #4
 800510e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005112:	f013 0f04 	tst.w	r3, #4
 8005116:	d00b      	beq.n	8005130 <HAL_UART_IRQHandler+0xec>
 8005118:	f015 0f01 	tst.w	r5, #1
 800511c:	d008      	beq.n	8005130 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800511e:	6821      	ldr	r1, [r4, #0]
 8005120:	2604      	movs	r6, #4
 8005122:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005124:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005128:	f041 0102 	orr.w	r1, r1, #2
 800512c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005130:	f013 0f08 	tst.w	r3, #8
 8005134:	d00b      	beq.n	800514e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005136:	f010 0f20 	tst.w	r0, #32
 800513a:	d100      	bne.n	800513e <HAL_UART_IRQHandler+0xfa>
 800513c:	b13a      	cbz	r2, 800514e <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	2108      	movs	r1, #8
 8005142:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005144:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005148:	430a      	orrs	r2, r1
 800514a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800514e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005152:	d00c      	beq.n	800516e <HAL_UART_IRQHandler+0x12a>
 8005154:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005158:	d009      	beq.n	800516e <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800515a:	6822      	ldr	r2, [r4, #0]
 800515c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005160:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005162:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005166:	f042 0220 	orr.w	r2, r2, #32
 800516a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800516e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005172:	2a00      	cmp	r2, #0
 8005174:	d0aa      	beq.n	80050cc <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005176:	f013 0f20 	tst.w	r3, #32
 800517a:	d009      	beq.n	8005190 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800517c:	f010 0f20 	tst.w	r0, #32
 8005180:	d102      	bne.n	8005188 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005182:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005186:	d003      	beq.n	8005190 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005188:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800518a:	b10b      	cbz	r3, 8005190 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800518c:	4620      	mov	r0, r4
 800518e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005190:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f013 0f40 	tst.w	r3, #64	; 0x40
 800519c:	d102      	bne.n	80051a4 <HAL_UART_IRQHandler+0x160>
 800519e:	f012 0f28 	tst.w	r2, #40	; 0x28
 80051a2:	d029      	beq.n	80051f8 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 80051a4:	4620      	mov	r0, r4
 80051a6:	f7ff fe50 	bl	8004e4a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051b2:	d01d      	beq.n	80051f0 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	f102 0308 	add.w	r3, r2, #8
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	3208      	adds	r2, #8
 80051c4:	e842 3100 	strex	r1, r3, [r2]
 80051c8:	2900      	cmp	r1, #0
 80051ca:	d1f3      	bne.n	80051b4 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 80051cc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80051ce:	b15b      	cbz	r3, 80051e8 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051d0:	4a3e      	ldr	r2, [pc, #248]	; (80052cc <HAL_UART_IRQHandler+0x288>)
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80051d6:	f7fd fed5 	bl	8002f84 <HAL_DMA_Abort_IT>
 80051da:	2800      	cmp	r0, #0
 80051dc:	f43f af76 	beq.w	80050cc <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80051e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80051e4:	4798      	blx	r3
 80051e6:	e771      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 80051e8:	4620      	mov	r0, r4
 80051ea:	f7ff fef3 	bl	8004fd4 <HAL_UART_ErrorCallback>
 80051ee:	e76d      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7ff feef 	bl	8004fd4 <HAL_UART_ErrorCallback>
 80051f6:	e769      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 80051f8:	4620      	mov	r0, r4
 80051fa:	f7ff feeb 	bl	8004fd4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fe:	2300      	movs	r3, #0
 8005200:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005204:	e762      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005206:	f013 0f10 	tst.w	r3, #16
 800520a:	f43f af39 	beq.w	8005080 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800520e:	f010 0f10 	tst.w	r0, #16
 8005212:	f43f af35 	beq.w	8005080 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005216:	2310      	movs	r3, #16
 8005218:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005222:	d055      	beq.n	80052d0 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005224:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005226:	6813      	ldr	r3, [r2, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800522c:	2b00      	cmp	r3, #0
 800522e:	f43f af4d 	beq.w	80050cc <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005232:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005236:	4299      	cmp	r1, r3
 8005238:	f67f af48 	bls.w	80050cc <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800523c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005240:	6813      	ldr	r3, [r2, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f013 0f20 	tst.w	r3, #32
 8005248:	d131      	bne.n	80052ae <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	e852 3f00 	ldrex	r3, [r2]
 8005250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	e842 3100 	strex	r1, r3, [r2]
 8005258:	2900      	cmp	r1, #0
 800525a:	d1f6      	bne.n	800524a <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	f102 0308 	add.w	r3, r2, #8
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	3208      	adds	r2, #8
 800526c:	e842 3100 	strex	r1, r3, [r2]
 8005270:	2900      	cmp	r1, #0
 8005272:	d1f3      	bne.n	800525c <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005274:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	f102 0308 	add.w	r3, r2, #8
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	3208      	adds	r2, #8
 8005284:	e842 3100 	strex	r1, r3, [r2]
 8005288:	2900      	cmp	r1, #0
 800528a:	d1f3      	bne.n	8005274 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 800528c:	2320      	movs	r3, #32
 800528e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	2300      	movs	r3, #0
 8005294:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005296:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	e852 3f00 	ldrex	r3, [r2]
 800529c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	e842 3100 	strex	r1, r3, [r2]
 80052a4:	2900      	cmp	r1, #0
 80052a6:	d1f6      	bne.n	8005296 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80052aa:	f7fd fe31 	bl	8002f10 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80052b2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	1ac9      	subs	r1, r1, r3
 80052ba:	b289      	uxth	r1, r1
 80052bc:	4620      	mov	r0, r4
 80052be:	f7ff fec0 	bl	8005042 <HAL_UARTEx_RxEventCallback>
      return;
 80052c2:	e703      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
 80052c4:	10000001 	.word	0x10000001
 80052c8:	04000120 	.word	0x04000120
 80052cc:	0800502f 	.word	0x0800502f
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052d0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80052d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	1ac9      	subs	r1, r1, r3
 80052dc:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80052de:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f43f aef1 	beq.w	80050cc <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 80052ea:	2900      	cmp	r1, #0
 80052ec:	f43f aeee 	beq.w	80050cc <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052f0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	e852 3f00 	ldrex	r3, [r2]
 80052f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	e842 3000 	strex	r0, r3, [r2]
 80052fe:	2800      	cmp	r0, #0
 8005300:	d1f6      	bne.n	80052f0 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005302:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	f102 0308 	add.w	r3, r2, #8
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005310:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	3208      	adds	r2, #8
 8005316:	e842 3000 	strex	r0, r3, [r2]
 800531a:	2800      	cmp	r0, #0
 800531c:	d1f1      	bne.n	8005302 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 800531e:	2320      	movs	r3, #32
 8005320:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005324:	2300      	movs	r3, #0
 8005326:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005328:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	e852 3f00 	ldrex	r3, [r2]
 8005330:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	e842 3000 	strex	r0, r3, [r2]
 8005338:	2800      	cmp	r0, #0
 800533a:	d1f6      	bne.n	800532a <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800533c:	4620      	mov	r0, r4
 800533e:	f7ff fe80 	bl	8005042 <HAL_UARTEx_RxEventCallback>
      return;
 8005342:	e6c3      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005348:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800534a:	4620      	mov	r0, r4
 800534c:	f000 fe0a 	bl	8005f64 <HAL_UARTEx_WakeupCallback>
    return;
 8005350:	e6bc      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005352:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005354:	2b00      	cmp	r3, #0
 8005356:	f43f aeb9 	beq.w	80050cc <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800535a:	4620      	mov	r0, r4
 800535c:	4798      	blx	r3
    return;
 800535e:	e6b5      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005360:	4620      	mov	r0, r4
 8005362:	f7ff fe1f 	bl	8004fa4 <UART_EndTransmit_IT>
    return;
 8005366:	e6b1      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005368:	4620      	mov	r0, r4
 800536a:	f000 fdfd 	bl	8005f68 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800536e:	e6ad      	b.n	80050cc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005370:	4620      	mov	r0, r4
 8005372:	f000 fdf8 	bl	8005f66 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005376:	e6a9      	b.n	80050cc <HAL_UART_IRQHandler+0x88>

08005378 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005378:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800537a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800537e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005382:	2a22      	cmp	r2, #34	; 0x22
 8005384:	d005      	beq.n	8005392 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005386:	6802      	ldr	r2, [r0, #0]
 8005388:	6993      	ldr	r3, [r2, #24]
 800538a:	f043 0308 	orr.w	r3, r3, #8
 800538e:	6193      	str	r3, [r2, #24]
  }
}
 8005390:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005392:	6802      	ldr	r2, [r0, #0]
 8005394:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005396:	b2db      	uxtb	r3, r3
 8005398:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800539a:	400b      	ands	r3, r1
 800539c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800539e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80053a0:	3301      	adds	r3, #1
 80053a2:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80053a4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80053b2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e9      	bne.n	8005390 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	e852 3f00 	ldrex	r3, [r2]
 80053c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	e842 3100 	strex	r1, r3, [r2]
 80053ca:	2900      	cmp	r1, #0
 80053cc:	d1f6      	bne.n	80053bc <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	f102 0308 	add.w	r3, r2, #8
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	3208      	adds	r2, #8
 80053de:	e842 3100 	strex	r1, r3, [r2]
 80053e2:	2900      	cmp	r1, #0
 80053e4:	d1f3      	bne.n	80053ce <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80053e6:	2320      	movs	r3, #32
 80053e8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d116      	bne.n	8005424 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f6:	2300      	movs	r3, #0
 80053f8:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	e852 3f00 	ldrex	r3, [r2]
 8005400:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	e842 3100 	strex	r1, r3, [r2]
 8005408:	2900      	cmp	r1, #0
 800540a:	d1f6      	bne.n	80053fa <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800540c:	6803      	ldr	r3, [r0, #0]
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	f012 0f10 	tst.w	r2, #16
 8005414:	d001      	beq.n	800541a <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005416:	2210      	movs	r2, #16
 8005418:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800541a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800541e:	f7ff fe10 	bl	8005042 <HAL_UARTEx_RxEventCallback>
 8005422:	e7b5      	b.n	8005390 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005424:	f7fc fb00 	bl	8001a28 <HAL_UART_RxCpltCallback>
 8005428:	e7b2      	b.n	8005390 <UART_RxISR_8BIT+0x18>

0800542a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800542a:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800542c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005430:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005434:	2b22      	cmp	r3, #34	; 0x22
 8005436:	d005      	beq.n	8005444 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005438:	6802      	ldr	r2, [r0, #0]
 800543a:	6993      	ldr	r3, [r2, #24]
 800543c:	f043 0308 	orr.w	r3, r3, #8
 8005440:	6193      	str	r3, [r2, #24]
  }
}
 8005442:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005444:	6803      	ldr	r3, [r0, #0]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005448:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800544a:	4013      	ands	r3, r2
 800544c:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800544e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005450:	3302      	adds	r3, #2
 8005452:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005454:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29b      	uxth	r3, r3
 800545e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005462:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ea      	bne.n	8005442 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800546c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	e852 3f00 	ldrex	r3, [r2]
 8005472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	e842 3100 	strex	r1, r3, [r2]
 800547a:	2900      	cmp	r1, #0
 800547c:	d1f6      	bne.n	800546c <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	f102 0308 	add.w	r3, r2, #8
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	3208      	adds	r2, #8
 800548e:	e842 3100 	strex	r1, r3, [r2]
 8005492:	2900      	cmp	r1, #0
 8005494:	d1f3      	bne.n	800547e <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8005496:	2320      	movs	r3, #32
 8005498:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 800549c:	2300      	movs	r3, #0
 800549e:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d116      	bne.n	80054d4 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	2300      	movs	r3, #0
 80054a8:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	e852 3f00 	ldrex	r3, [r2]
 80054b0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	e842 3100 	strex	r1, r3, [r2]
 80054b8:	2900      	cmp	r1, #0
 80054ba:	d1f6      	bne.n	80054aa <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054bc:	6803      	ldr	r3, [r0, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	f012 0f10 	tst.w	r2, #16
 80054c4:	d001      	beq.n	80054ca <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054c6:	2210      	movs	r2, #16
 80054c8:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ca:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80054ce:	f7ff fdb8 	bl	8005042 <HAL_UARTEx_RxEventCallback>
 80054d2:	e7b6      	b.n	8005442 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80054d4:	f7fc faa8 	bl	8001a28 <HAL_UART_RxCpltCallback>
 80054d8:	e7b3      	b.n	8005442 <UART_RxISR_16BIT+0x18>
	...

080054dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80054e0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80054e4:	6803      	ldr	r3, [r0, #0]
 80054e6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80054e8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80054ec:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80054f4:	2a22      	cmp	r2, #34	; 0x22
 80054f6:	d005      	beq.n	8005504 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	f042 0208 	orr.w	r2, r2, #8
 80054fe:	619a      	str	r2, [r3, #24]
  }
}
 8005500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005504:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005506:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800550a:	e008      	b.n	800551e <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800550c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d14c      	bne.n	80055ae <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8005514:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d04e      	beq.n	80055bc <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800551e:	2f00      	cmp	r7, #0
 8005520:	f000 8087 	beq.w	8005632 <UART_RxISR_8BIT_FIFOEN+0x156>
 8005524:	f015 0f20 	tst.w	r5, #32
 8005528:	f000 8083 	beq.w	8005632 <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005530:	b2f3      	uxtb	r3, r6
 8005532:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005534:	400b      	ands	r3, r1
 8005536:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8005538:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800553a:	3301      	adds	r3, #1
 800553c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800553e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005550:	f015 0f07 	tst.w	r5, #7
 8005554:	d0de      	beq.n	8005514 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005556:	f015 0f01 	tst.w	r5, #1
 800555a:	d009      	beq.n	8005570 <UART_RxISR_8BIT_FIFOEN+0x94>
 800555c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005560:	d006      	beq.n	8005570 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005562:	2201      	movs	r2, #1
 8005564:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005566:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005570:	f015 0f02 	tst.w	r5, #2
 8005574:	d00b      	beq.n	800558e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005576:	f018 0f01 	tst.w	r8, #1
 800557a:	d008      	beq.n	800558e <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	2202      	movs	r2, #2
 8005580:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005582:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005586:	f043 0304 	orr.w	r3, r3, #4
 800558a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800558e:	f015 0f04 	tst.w	r5, #4
 8005592:	d0bb      	beq.n	800550c <UART_RxISR_8BIT_FIFOEN+0x30>
 8005594:	f018 0f01 	tst.w	r8, #1
 8005598:	d0b8      	beq.n	800550c <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	2204      	movs	r2, #4
 800559e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055a0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80055ac:	e7ae      	b.n	800550c <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7ff fd10 	bl	8004fd4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80055ba:	e7ab      	b.n	8005514 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	e852 3f00 	ldrex	r3, [r2]
 80055c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	e842 3100 	strex	r1, r3, [r2]
 80055ca:	2900      	cmp	r1, #0
 80055cc:	d1f6      	bne.n	80055bc <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	f102 0308 	add.w	r3, r2, #8
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	3208      	adds	r2, #8
 80055e2:	e842 3100 	strex	r1, r3, [r2]
 80055e6:	2900      	cmp	r1, #0
 80055e8:	d1f1      	bne.n	80055ce <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80055ea:	2320      	movs	r3, #32
 80055ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d003      	beq.n	8005602 <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 80055fa:	4620      	mov	r0, r4
 80055fc:	f7fc fa14 	bl	8001a28 <HAL_UART_RxCpltCallback>
 8005600:	e78d      	b.n	800551e <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	2300      	movs	r3, #0
 8005604:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005606:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	e852 3f00 	ldrex	r3, [r2]
 800560c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	e842 3100 	strex	r1, r3, [r2]
 8005614:	2900      	cmp	r1, #0
 8005616:	d1f6      	bne.n	8005606 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	f012 0f10 	tst.w	r2, #16
 8005620:	d001      	beq.n	8005626 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005622:	2210      	movs	r2, #16
 8005624:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005626:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800562a:	4620      	mov	r0, r4
 800562c:	f7ff fd09 	bl	8005042 <HAL_UARTEx_RxEventCallback>
 8005630:	e775      	b.n	800551e <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8005632:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005636:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005638:	2b00      	cmp	r3, #0
 800563a:	f43f af61 	beq.w	8005500 <UART_RxISR_8BIT_FIFOEN+0x24>
 800563e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8005642:	429a      	cmp	r2, r3
 8005644:	f67f af5c 	bls.w	8005500 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005648:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	f102 0308 	add.w	r3, r2, #8
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	3208      	adds	r2, #8
 8005658:	e842 3100 	strex	r1, r3, [r2]
 800565c:	2900      	cmp	r1, #0
 800565e:	d1f3      	bne.n	8005648 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8005662:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005664:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	e852 3f00 	ldrex	r3, [r2]
 800566a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	e842 3100 	strex	r1, r3, [r2]
 8005672:	2900      	cmp	r1, #0
 8005674:	d1f6      	bne.n	8005664 <UART_RxISR_8BIT_FIFOEN+0x188>
 8005676:	e743      	b.n	8005500 <UART_RxISR_8BIT_FIFOEN+0x24>
 8005678:	08005379 	.word	0x08005379

0800567c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800567c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005680:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005684:	6803      	ldr	r3, [r0, #0]
 8005686:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005688:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800568c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005690:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005694:	2a22      	cmp	r2, #34	; 0x22
 8005696:	d005      	beq.n	80056a4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	f042 0208 	orr.w	r2, r2, #8
 800569e:	619a      	str	r2, [r3, #24]
  }
}
 80056a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056a4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80056a6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056aa:	e008      	b.n	80056be <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d14b      	bne.n	800574c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80056b4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d04d      	beq.n	800575a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056be:	2f00      	cmp	r7, #0
 80056c0:	f000 8086 	beq.w	80057d0 <UART_RxISR_16BIT_FIFOEN+0x154>
 80056c4:	f015 0f20 	tst.w	r5, #32
 80056c8:	f000 8082 	beq.w	80057d0 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056d0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80056d2:	4033      	ands	r3, r6
 80056d4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80056d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056d8:	3302      	adds	r3, #2
 80056da:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80056dc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056ee:	f015 0f07 	tst.w	r5, #7
 80056f2:	d0df      	beq.n	80056b4 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056f4:	f015 0f01 	tst.w	r5, #1
 80056f8:	d009      	beq.n	800570e <UART_RxISR_16BIT_FIFOEN+0x92>
 80056fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80056fe:	d006      	beq.n	800570e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005700:	2201      	movs	r2, #1
 8005702:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005704:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800570e:	f015 0f02 	tst.w	r5, #2
 8005712:	d00b      	beq.n	800572c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8005714:	f018 0f01 	tst.w	r8, #1
 8005718:	d008      	beq.n	800572c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	2202      	movs	r2, #2
 800571e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005720:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005724:	f043 0304 	orr.w	r3, r3, #4
 8005728:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800572c:	f015 0f04 	tst.w	r5, #4
 8005730:	d0bc      	beq.n	80056ac <UART_RxISR_16BIT_FIFOEN+0x30>
 8005732:	f018 0f01 	tst.w	r8, #1
 8005736:	d0b9      	beq.n	80056ac <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	2204      	movs	r2, #4
 800573c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800573e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005742:	f043 0302 	orr.w	r3, r3, #2
 8005746:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800574a:	e7af      	b.n	80056ac <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800574c:	4620      	mov	r0, r4
 800574e:	f7ff fc41 	bl	8004fd4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005752:	2300      	movs	r3, #0
 8005754:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005758:	e7ac      	b.n	80056b4 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800575a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	e852 3f00 	ldrex	r3, [r2]
 8005760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	e842 3100 	strex	r1, r3, [r2]
 8005768:	2900      	cmp	r1, #0
 800576a:	d1f6      	bne.n	800575a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800576c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	f102 0308 	add.w	r3, r2, #8
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	3208      	adds	r2, #8
 8005780:	e842 3100 	strex	r1, r3, [r2]
 8005784:	2900      	cmp	r1, #0
 8005786:	d1f1      	bne.n	800576c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8005788:	2320      	movs	r3, #32
 800578a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005792:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d003      	beq.n	80057a0 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8005798:	4620      	mov	r0, r4
 800579a:	f7fc f945 	bl	8001a28 <HAL_UART_RxCpltCallback>
 800579e:	e78e      	b.n	80056be <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a0:	2300      	movs	r3, #0
 80057a2:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	e852 3f00 	ldrex	r3, [r2]
 80057aa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	e842 3100 	strex	r1, r3, [r2]
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d1f6      	bne.n	80057a4 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	69da      	ldr	r2, [r3, #28]
 80057ba:	f012 0f10 	tst.w	r2, #16
 80057be:	d001      	beq.n	80057c4 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057c0:	2210      	movs	r2, #16
 80057c2:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fc3a 	bl	8005042 <HAL_UARTEx_RxEventCallback>
 80057ce:	e776      	b.n	80056be <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80057d0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80057d4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f43f af62 	beq.w	80056a0 <UART_RxISR_16BIT_FIFOEN+0x24>
 80057dc:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80057e0:	429a      	cmp	r2, r3
 80057e2:	f67f af5d 	bls.w	80056a0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	f102 0308 	add.w	r3, r2, #8
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	3208      	adds	r2, #8
 80057f6:	e842 3100 	strex	r1, r3, [r2]
 80057fa:	2900      	cmp	r1, #0
 80057fc:	d1f3      	bne.n	80057e6 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8005800:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005802:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	e852 3f00 	ldrex	r3, [r2]
 8005808:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	e842 3100 	strex	r1, r3, [r2]
 8005810:	2900      	cmp	r1, #0
 8005812:	d1f6      	bne.n	8005802 <UART_RxISR_16BIT_FIFOEN+0x186>
 8005814:	e744      	b.n	80056a0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8005816:	bf00      	nop
 8005818:	0800542b 	.word	0x0800542b

0800581c <UART_SetConfig>:
{
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005820:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005822:	6883      	ldr	r3, [r0, #8]
 8005824:	6902      	ldr	r2, [r0, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	6942      	ldr	r2, [r0, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	69c2      	ldr	r2, [r0, #28]
 800582e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	4a9d      	ldr	r2, [pc, #628]	; (8005aa8 <UART_SetConfig+0x28c>)
 8005834:	4002      	ands	r2, r0
 8005836:	431a      	orrs	r2, r3
 8005838:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	6853      	ldr	r3, [r2, #4]
 800583e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005842:	68e1      	ldr	r1, [r4, #12]
 8005844:	430b      	orrs	r3, r1
 8005846:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005848:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	4b97      	ldr	r3, [pc, #604]	; (8005aac <UART_SetConfig+0x290>)
 800584e:	429a      	cmp	r2, r3
 8005850:	d001      	beq.n	8005856 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8005852:	6a23      	ldr	r3, [r4, #32]
 8005854:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005856:	6893      	ldr	r3, [r2, #8]
 8005858:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800585c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005860:	430b      	orrs	r3, r1
 8005862:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005864:	6822      	ldr	r2, [r4, #0]
 8005866:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005868:	f023 030f 	bic.w	r3, r3, #15
 800586c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800586e:	430b      	orrs	r3, r1
 8005870:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	4a8e      	ldr	r2, [pc, #568]	; (8005ab0 <UART_SetConfig+0x294>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01c      	beq.n	80058b4 <UART_SetConfig+0x98>
 800587a:	4a8e      	ldr	r2, [pc, #568]	; (8005ab4 <UART_SetConfig+0x298>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d031      	beq.n	80058e4 <UART_SetConfig+0xc8>
 8005880:	4a8a      	ldr	r2, [pc, #552]	; (8005aac <UART_SetConfig+0x290>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d04b      	beq.n	800591e <UART_SetConfig+0x102>
 8005886:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8005888:	4988      	ldr	r1, [pc, #544]	; (8005aac <UART_SetConfig+0x290>)
 800588a:	428b      	cmp	r3, r1
 800588c:	d068      	beq.n	8005960 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800588e:	69e0      	ldr	r0, [r4, #28]
 8005890:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005894:	f000 80a5 	beq.w	80059e2 <UART_SetConfig+0x1c6>
    switch (clocksource)
 8005898:	2a08      	cmp	r2, #8
 800589a:	f200 811f 	bhi.w	8005adc <UART_SetConfig+0x2c0>
 800589e:	e8df f012 	tbh	[pc, r2, lsl #1]
 80058a2:	00d3      	.short	0x00d3
 80058a4:	00d100f5 	.word	0x00d100f5
 80058a8:	00f8011d 	.word	0x00f8011d
 80058ac:	011d011d 	.word	0x011d011d
 80058b0:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80058b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80058bc:	f002 0203 	and.w	r2, r2, #3
 80058c0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c4:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 80058c8:	2a03      	cmp	r2, #3
 80058ca:	d809      	bhi.n	80058e0 <UART_SetConfig+0xc4>
 80058cc:	e8df f002 	tbb	[pc, r2]
 80058d0:	063c0402 	.word	0x063c0402
 80058d4:	2201      	movs	r2, #1
 80058d6:	e7d7      	b.n	8005888 <UART_SetConfig+0x6c>
 80058d8:	2204      	movs	r2, #4
 80058da:	e7d5      	b.n	8005888 <UART_SetConfig+0x6c>
 80058dc:	2208      	movs	r2, #8
 80058de:	e7d3      	b.n	8005888 <UART_SetConfig+0x6c>
 80058e0:	2210      	movs	r2, #16
 80058e2:	e7d1      	b.n	8005888 <UART_SetConfig+0x6c>
 80058e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058e8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80058ec:	f002 020c 	and.w	r2, r2, #12
 80058f0:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80058f4:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 80058f8:	2a0c      	cmp	r2, #12
 80058fa:	d80e      	bhi.n	800591a <UART_SetConfig+0xfe>
 80058fc:	e8df f002 	tbb	[pc, r2]
 8005900:	0d0d0d07 	.word	0x0d0d0d07
 8005904:	0d0d0d09 	.word	0x0d0d0d09
 8005908:	0d0d0d26 	.word	0x0d0d0d26
 800590c:	0b          	.byte	0x0b
 800590d:	00          	.byte	0x00
 800590e:	2200      	movs	r2, #0
 8005910:	e7ba      	b.n	8005888 <UART_SetConfig+0x6c>
 8005912:	2204      	movs	r2, #4
 8005914:	e7b8      	b.n	8005888 <UART_SetConfig+0x6c>
 8005916:	2208      	movs	r2, #8
 8005918:	e7b6      	b.n	8005888 <UART_SetConfig+0x6c>
 800591a:	2210      	movs	r2, #16
 800591c:	e7b4      	b.n	8005888 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800591e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005922:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005926:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800592a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800592e:	d00f      	beq.n	8005950 <UART_SetConfig+0x134>
 8005930:	d805      	bhi.n	800593e <UART_SetConfig+0x122>
 8005932:	b17a      	cbz	r2, 8005954 <UART_SetConfig+0x138>
 8005934:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005938:	d10e      	bne.n	8005958 <UART_SetConfig+0x13c>
 800593a:	2204      	movs	r2, #4
 800593c:	e7a4      	b.n	8005888 <UART_SetConfig+0x6c>
 800593e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005942:	d10b      	bne.n	800595c <UART_SetConfig+0x140>
 8005944:	2208      	movs	r2, #8
 8005946:	e79f      	b.n	8005888 <UART_SetConfig+0x6c>
 8005948:	2202      	movs	r2, #2
 800594a:	e79d      	b.n	8005888 <UART_SetConfig+0x6c>
 800594c:	2202      	movs	r2, #2
 800594e:	e79b      	b.n	8005888 <UART_SetConfig+0x6c>
 8005950:	2202      	movs	r2, #2
 8005952:	e799      	b.n	8005888 <UART_SetConfig+0x6c>
 8005954:	2200      	movs	r2, #0
 8005956:	e797      	b.n	8005888 <UART_SetConfig+0x6c>
 8005958:	2210      	movs	r2, #16
 800595a:	e795      	b.n	8005888 <UART_SetConfig+0x6c>
 800595c:	2210      	movs	r2, #16
 800595e:	e793      	b.n	8005888 <UART_SetConfig+0x6c>
    switch (clocksource)
 8005960:	2a08      	cmp	r2, #8
 8005962:	f200 809c 	bhi.w	8005a9e <UART_SetConfig+0x282>
 8005966:	e8df f002 	tbb	[pc, r2]
 800596a:	9a08      	.short	0x9a08
 800596c:	9a379a3a 	.word	0x9a379a3a
 8005970:	9a9a      	.short	0x9a9a
 8005972:	05          	.byte	0x05
 8005973:	00          	.byte	0x00
 8005974:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005978:	e004      	b.n	8005984 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800597a:	f7fe fb13 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800597e:	2800      	cmp	r0, #0
 8005980:	f000 808f 	beq.w	8005aa2 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005984:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005986:	4b4c      	ldr	r3, [pc, #304]	; (8005ab8 <UART_SetConfig+0x29c>)
 8005988:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800598c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005990:	6865      	ldr	r5, [r4, #4]
 8005992:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005996:	4299      	cmp	r1, r3
 8005998:	f200 8094 	bhi.w	8005ac4 <UART_SetConfig+0x2a8>
 800599c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80059a0:	f200 8092 	bhi.w	8005ac8 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059a4:	2600      	movs	r6, #0
 80059a6:	4633      	mov	r3, r6
 80059a8:	4631      	mov	r1, r6
 80059aa:	f7fb f8d7 	bl	8000b5c <__aeabi_uldivmod>
 80059ae:	0209      	lsls	r1, r1, #8
 80059b0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80059b4:	0200      	lsls	r0, r0, #8
 80059b6:	086b      	lsrs	r3, r5, #1
 80059b8:	18c0      	adds	r0, r0, r3
 80059ba:	462a      	mov	r2, r5
 80059bc:	4633      	mov	r3, r6
 80059be:	f141 0100 	adc.w	r1, r1, #0
 80059c2:	f7fb f8cb 	bl	8000b5c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059c6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80059ca:	4b3c      	ldr	r3, [pc, #240]	; (8005abc <UART_SetConfig+0x2a0>)
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d87d      	bhi.n	8005acc <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	60d8      	str	r0, [r3, #12]
 80059d4:	4630      	mov	r0, r6
 80059d6:	e050      	b.n	8005a7a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 80059d8:	f7fd fdfe 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
        break;
 80059dc:	e7cf      	b.n	800597e <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 80059de:	4838      	ldr	r0, [pc, #224]	; (8005ac0 <UART_SetConfig+0x2a4>)
 80059e0:	e7d0      	b.n	8005984 <UART_SetConfig+0x168>
    switch (clocksource)
 80059e2:	2a08      	cmp	r2, #8
 80059e4:	d874      	bhi.n	8005ad0 <UART_SetConfig+0x2b4>
 80059e6:	e8df f002 	tbb	[pc, r2]
 80059ea:	2707      	.short	0x2707
 80059ec:	732a7305 	.word	0x732a7305
 80059f0:	7373      	.short	0x7373
 80059f2:	0b          	.byte	0x0b
 80059f3:	00          	.byte	0x00
 80059f4:	4832      	ldr	r0, [pc, #200]	; (8005ac0 <UART_SetConfig+0x2a4>)
 80059f6:	e003      	b.n	8005a00 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f8:	f7fe fad4 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d069      	beq.n	8005ad4 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a02:	4b2d      	ldr	r3, [pc, #180]	; (8005ab8 <UART_SetConfig+0x29c>)
 8005a04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005a08:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a0c:	6862      	ldr	r2, [r4, #4]
 8005a0e:	0853      	lsrs	r3, r2, #1
 8005a10:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a18:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1a:	f1a3 0110 	sub.w	r1, r3, #16
 8005a1e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005a22:	4291      	cmp	r1, r2
 8005a24:	d858      	bhi.n	8005ad8 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a26:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a2a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005a2e:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	60d3      	str	r3, [r2, #12]
 8005a34:	2000      	movs	r0, #0
 8005a36:	e020      	b.n	8005a7a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a38:	f7fe fac4 	bl	8003fc4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005a3c:	e7de      	b.n	80059fc <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3e:	f7fd fdcb 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
        break;
 8005a42:	e7db      	b.n	80059fc <UART_SetConfig+0x1e0>
    switch (clocksource)
 8005a44:	481e      	ldr	r0, [pc, #120]	; (8005ac0 <UART_SetConfig+0x2a4>)
 8005a46:	e003      	b.n	8005a50 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fe faac 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d047      	beq.n	8005ae0 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a52:	4b19      	ldr	r3, [pc, #100]	; (8005ab8 <UART_SetConfig+0x29c>)
 8005a54:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005a58:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005a62:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a66:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a68:	f1a0 0210 	sub.w	r2, r0, #16
 8005a6c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d837      	bhi.n	8005ae4 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	60d8      	str	r0, [r3, #12]
 8005a78:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a80:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005a88:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fe fa9a 	bl	8003fc4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005a90:	e7dc      	b.n	8005a4c <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a92:	f7fd fda1 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
        break;
 8005a96:	e7d9      	b.n	8005a4c <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8005a98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a9c:	e7d8      	b.n	8005a50 <UART_SetConfig+0x234>
    switch (clocksource)
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	e7eb      	b.n	8005a7a <UART_SetConfig+0x25e>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e7e9      	b.n	8005a7a <UART_SetConfig+0x25e>
 8005aa6:	bf00      	nop
 8005aa8:	cfff69f3 	.word	0xcfff69f3
 8005aac:	40008000 	.word	0x40008000
 8005ab0:	40013800 	.word	0x40013800
 8005ab4:	40004400 	.word	0x40004400
 8005ab8:	0801170c 	.word	0x0801170c
 8005abc:	000ffcff 	.word	0x000ffcff
 8005ac0:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	e7d8      	b.n	8005a7a <UART_SetConfig+0x25e>
 8005ac8:	2001      	movs	r0, #1
 8005aca:	e7d6      	b.n	8005a7a <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8005acc:	2001      	movs	r0, #1
 8005ace:	e7d4      	b.n	8005a7a <UART_SetConfig+0x25e>
    switch (clocksource)
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	e7d2      	b.n	8005a7a <UART_SetConfig+0x25e>
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e7d0      	b.n	8005a7a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8005ad8:	2001      	movs	r0, #1
 8005ada:	e7ce      	b.n	8005a7a <UART_SetConfig+0x25e>
    switch (clocksource)
 8005adc:	2001      	movs	r0, #1
 8005ade:	e7cc      	b.n	8005a7a <UART_SetConfig+0x25e>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e7ca      	b.n	8005a7a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	e7c8      	b.n	8005a7a <UART_SetConfig+0x25e>

08005ae8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ae8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005aea:	f013 0f01 	tst.w	r3, #1
 8005aee:	d006      	beq.n	8005afe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005af0:	6802      	ldr	r2, [r0, #0]
 8005af2:	6853      	ldr	r3, [r2, #4]
 8005af4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005af8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005afa:	430b      	orrs	r3, r1
 8005afc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005afe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b00:	f013 0f02 	tst.w	r3, #2
 8005b04:	d006      	beq.n	8005b14 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b06:	6802      	ldr	r2, [r0, #0]
 8005b08:	6853      	ldr	r3, [r2, #4]
 8005b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b16:	f013 0f04 	tst.w	r3, #4
 8005b1a:	d006      	beq.n	8005b2a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b1c:	6802      	ldr	r2, [r0, #0]
 8005b1e:	6853      	ldr	r3, [r2, #4]
 8005b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b24:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005b26:	430b      	orrs	r3, r1
 8005b28:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b2c:	f013 0f08 	tst.w	r3, #8
 8005b30:	d006      	beq.n	8005b40 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b32:	6802      	ldr	r2, [r0, #0]
 8005b34:	6853      	ldr	r3, [r2, #4]
 8005b36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b3a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b42:	f013 0f10 	tst.w	r3, #16
 8005b46:	d006      	beq.n	8005b56 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b48:	6802      	ldr	r2, [r0, #0]
 8005b4a:	6893      	ldr	r3, [r2, #8]
 8005b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b50:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005b52:	430b      	orrs	r3, r1
 8005b54:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b58:	f013 0f20 	tst.w	r3, #32
 8005b5c:	d006      	beq.n	8005b6c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b5e:	6802      	ldr	r2, [r0, #0]
 8005b60:	6893      	ldr	r3, [r2, #8]
 8005b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b66:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b6e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b72:	d00a      	beq.n	8005b8a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b74:	6802      	ldr	r2, [r0, #0]
 8005b76:	6853      	ldr	r3, [r2, #4]
 8005b78:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b7c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b82:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b88:	d00b      	beq.n	8005ba2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b90:	d006      	beq.n	8005ba0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b92:	6802      	ldr	r2, [r0, #0]
 8005b94:	6853      	ldr	r3, [r2, #4]
 8005b96:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005b9a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	6053      	str	r3, [r2, #4]
}
 8005ba0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ba2:	6802      	ldr	r2, [r0, #0]
 8005ba4:	6853      	ldr	r3, [r2, #4]
 8005ba6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005baa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005bac:	430b      	orrs	r3, r1
 8005bae:	6053      	str	r3, [r2, #4]
 8005bb0:	e7eb      	b.n	8005b8a <UART_AdvFeatureConfig+0xa2>

08005bb2 <UART_WaitOnFlagUntilTimeout>:
{
 8005bb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	460f      	mov	r7, r1
 8005bba:	4616      	mov	r6, r2
 8005bbc:	4699      	mov	r9, r3
 8005bbe:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc2:	682b      	ldr	r3, [r5, #0]
 8005bc4:	69dc      	ldr	r4, [r3, #28]
 8005bc6:	ea37 0404 	bics.w	r4, r7, r4
 8005bca:	bf0c      	ite	eq
 8005bcc:	2401      	moveq	r4, #1
 8005bce:	2400      	movne	r4, #0
 8005bd0:	42b4      	cmp	r4, r6
 8005bd2:	d157      	bne.n	8005c84 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8005bd4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005bd8:	d0f3      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bda:	f7fb fc8b 	bl	80014f4 <HAL_GetTick>
 8005bde:	eba0 0009 	sub.w	r0, r0, r9
 8005be2:	4540      	cmp	r0, r8
 8005be4:	d82f      	bhi.n	8005c46 <UART_WaitOnFlagUntilTimeout+0x94>
 8005be6:	f1b8 0f00 	cmp.w	r8, #0
 8005bea:	d02c      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	f012 0f04 	tst.w	r2, #4
 8005bf4:	d0e5      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005bfc:	d0e1      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c02:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c04:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	e852 3f00 	ldrex	r3, [r2]
 8005c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	e842 3100 	strex	r1, r3, [r2]
 8005c12:	2900      	cmp	r1, #0
 8005c14:	d1f6      	bne.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	f102 0308 	add.w	r3, r2, #8
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	3208      	adds	r2, #8
 8005c26:	e842 3100 	strex	r1, r3, [r2]
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	d1f3      	bne.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005c2e:	2320      	movs	r3, #32
 8005c30:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005c34:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c38:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005c42:	2003      	movs	r0, #3
 8005c44:	e01f      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c46:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	e852 3f00 	ldrex	r3, [r2]
 8005c4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	e842 3100 	strex	r1, r3, [r2]
 8005c54:	2900      	cmp	r1, #0
 8005c56:	d1f6      	bne.n	8005c46 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c58:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	f102 0308 	add.w	r3, r2, #8
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	3208      	adds	r2, #8
 8005c68:	e842 3100 	strex	r1, r3, [r2]
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	d1f3      	bne.n	8005c58 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005c70:	2320      	movs	r3, #32
 8005c72:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c76:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8005c80:	2003      	movs	r0, #3
 8005c82:	e000      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8005c84:	2000      	movs	r0, #0
}
 8005c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005c8a <UART_CheckIdleState>:
{
 8005c8a:	b530      	push	{r4, r5, lr}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005c96:	f7fb fc2d 	bl	80014f4 <HAL_GetTick>
 8005c9a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c9c:	6822      	ldr	r2, [r4, #0]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	f012 0f08 	tst.w	r2, #8
 8005ca4:	d10f      	bne.n	8005cc6 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f013 0f04 	tst.w	r3, #4
 8005cae:	d118      	bne.n	8005ce2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005cb0:	2320      	movs	r3, #32
 8005cb2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	2000      	movs	r0, #0
 8005cbc:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005cbe:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005cc2:	b003      	add	sp, #12
 8005cc4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f7ff ff6c 	bl	8005bb2 <UART_WaitOnFlagUntilTimeout>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d0e3      	beq.n	8005ca6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005cde:	2003      	movs	r0, #3
 8005ce0:	e7ef      	b.n	8005cc2 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	462b      	mov	r3, r5
 8005cea:	2200      	movs	r2, #0
 8005cec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f7ff ff5e 	bl	8005bb2 <UART_WaitOnFlagUntilTimeout>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d0da      	beq.n	8005cb0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005cfa:	2003      	movs	r0, #3
 8005cfc:	e7e1      	b.n	8005cc2 <UART_CheckIdleState+0x38>

08005cfe <HAL_UART_Init>:
  if (huart == NULL)
 8005cfe:	b378      	cbz	r0, 8005d60 <HAL_UART_Init+0x62>
{
 8005d00:	b510      	push	{r4, lr}
 8005d02:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005d04:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005d08:	b30b      	cbz	r3, 8005d4e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005d0a:	2324      	movs	r3, #36	; 0x24
 8005d0c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005d10:	6822      	ldr	r2, [r4, #0]
 8005d12:	6813      	ldr	r3, [r2, #0]
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff fd7e 	bl	800581c <UART_SetConfig>
 8005d20:	2801      	cmp	r0, #1
 8005d22:	d013      	beq.n	8005d4c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d26:	b9bb      	cbnz	r3, 8005d58 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d28:	6822      	ldr	r2, [r4, #0]
 8005d2a:	6853      	ldr	r3, [r2, #4]
 8005d2c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005d30:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d32:	6822      	ldr	r2, [r4, #0]
 8005d34:	6893      	ldr	r3, [r2, #8]
 8005d36:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005d3a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005d3c:	6822      	ldr	r2, [r4, #0]
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	f043 0301 	orr.w	r3, r3, #1
 8005d44:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005d46:	4620      	mov	r0, r4
 8005d48:	f7ff ff9f 	bl	8005c8a <UART_CheckIdleState>
}
 8005d4c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005d4e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005d52:	f7fb fd65 	bl	8001820 <HAL_UART_MspInit>
 8005d56:	e7d8      	b.n	8005d0a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f7ff fec5 	bl	8005ae8 <UART_AdvFeatureConfig>
 8005d5e:	e7e3      	b.n	8005d28 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005d60:	2001      	movs	r0, #1
}
 8005d62:	4770      	bx	lr

08005d64 <UART_Start_Receive_IT>:
{
 8005d64:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8005d66:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005d68:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005d6c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8005d74:	6883      	ldr	r3, [r0, #8]
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	d006      	beq.n	8005d8a <UART_Start_Receive_IT+0x26>
 8005d7c:	b9a3      	cbnz	r3, 8005da8 <UART_Start_Receive_IT+0x44>
 8005d7e:	6903      	ldr	r3, [r0, #16]
 8005d80:	b973      	cbnz	r3, 8005da0 <UART_Start_Receive_IT+0x3c>
 8005d82:	23ff      	movs	r3, #255	; 0xff
 8005d84:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005d88:	e014      	b.n	8005db4 <UART_Start_Receive_IT+0x50>
 8005d8a:	6903      	ldr	r3, [r0, #16]
 8005d8c:	b923      	cbnz	r3, 8005d98 <UART_Start_Receive_IT+0x34>
 8005d8e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005d92:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005d96:	e00d      	b.n	8005db4 <UART_Start_Receive_IT+0x50>
 8005d98:	23ff      	movs	r3, #255	; 0xff
 8005d9a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005d9e:	e009      	b.n	8005db4 <UART_Start_Receive_IT+0x50>
 8005da0:	237f      	movs	r3, #127	; 0x7f
 8005da2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005da6:	e005      	b.n	8005db4 <UART_Start_Receive_IT+0x50>
 8005da8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dac:	d02d      	beq.n	8005e0a <UART_Start_Receive_IT+0xa6>
 8005dae:	2300      	movs	r3, #0
 8005db0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dba:	2322      	movs	r3, #34	; 0x22
 8005dbc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	f101 0308 	add.w	r3, r1, #8
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	3108      	adds	r1, #8
 8005dd0:	e841 3400 	strex	r4, r3, [r1]
 8005dd4:	2c00      	cmp	r4, #0
 8005dd6:	d1f3      	bne.n	8005dc0 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005dd8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dde:	d01e      	beq.n	8005e1e <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de0:	6883      	ldr	r3, [r0, #8]
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de6:	d043      	beq.n	8005e70 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8005de8:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <UART_Start_Receive_IT+0x118>)
 8005dea:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8005dec:	2300      	movs	r3, #0
 8005dee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005df2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	e852 3f00 	ldrex	r3, [r2]
 8005df8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	e842 3100 	strex	r1, r3, [r2]
 8005e00:	2900      	cmp	r1, #0
 8005e02:	d1f6      	bne.n	8005df2 <UART_Start_Receive_IT+0x8e>
}
 8005e04:	2000      	movs	r0, #0
 8005e06:	bc10      	pop	{r4}
 8005e08:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8005e0a:	6903      	ldr	r3, [r0, #16]
 8005e0c:	b91b      	cbnz	r3, 8005e16 <UART_Start_Receive_IT+0xb2>
 8005e0e:	237f      	movs	r3, #127	; 0x7f
 8005e10:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005e14:	e7ce      	b.n	8005db4 <UART_Start_Receive_IT+0x50>
 8005e16:	233f      	movs	r3, #63	; 0x3f
 8005e18:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005e1c:	e7ca      	b.n	8005db4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e1e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d8dc      	bhi.n	8005de0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e26:	6883      	ldr	r3, [r0, #8]
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2c:	d01a      	beq.n	8005e64 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e2e:	4b14      	ldr	r3, [pc, #80]	; (8005e80 <UART_Start_Receive_IT+0x11c>)
 8005e30:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8005e32:	2300      	movs	r3, #0
 8005e34:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e38:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	e852 3f00 	ldrex	r3, [r2]
 8005e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	e842 3100 	strex	r1, r3, [r2]
 8005e46:	2900      	cmp	r1, #0
 8005e48:	d1f6      	bne.n	8005e38 <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e4a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	f102 0308 	add.w	r3, r2, #8
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	3208      	adds	r2, #8
 8005e5a:	e842 3100 	strex	r1, r3, [r2]
 8005e5e:	2900      	cmp	r1, #0
 8005e60:	d1f3      	bne.n	8005e4a <UART_Start_Receive_IT+0xe6>
 8005e62:	e7cf      	b.n	8005e04 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e64:	6903      	ldr	r3, [r0, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e1      	bne.n	8005e2e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <UART_Start_Receive_IT+0x120>)
 8005e6c:	6703      	str	r3, [r0, #112]	; 0x70
 8005e6e:	e7e0      	b.n	8005e32 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e70:	6903      	ldr	r3, [r0, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1b8      	bne.n	8005de8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8005e76:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <UART_Start_Receive_IT+0x124>)
 8005e78:	6703      	str	r3, [r0, #112]	; 0x70
 8005e7a:	e7b7      	b.n	8005dec <UART_Start_Receive_IT+0x88>
 8005e7c:	08005379 	.word	0x08005379
 8005e80:	080054dd 	.word	0x080054dd
 8005e84:	0800567d 	.word	0x0800567d
 8005e88:	0800542b 	.word	0x0800542b

08005e8c <HAL_UART_Receive_IT>:
{
 8005e8c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e8e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d11e      	bne.n	8005ed4 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8005e96:	b1f9      	cbz	r1, 8005ed8 <HAL_UART_Receive_IT+0x4c>
 8005e98:	b302      	cbz	r2, 8005edc <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8005e9a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d01e      	beq.n	8005ee0 <HAL_UART_Receive_IT+0x54>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005eac:	6803      	ldr	r3, [r0, #0]
 8005eae:	4c0d      	ldr	r4, [pc, #52]	; (8005ee4 <HAL_UART_Receive_IT+0x58>)
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d00c      	beq.n	8005ece <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005eba:	d008      	beq.n	8005ece <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ebc:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	e854 3f00 	ldrex	r3, [r4]
 8005ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	e844 3500 	strex	r5, r3, [r4]
 8005eca:	2d00      	cmp	r5, #0
 8005ecc:	d1f6      	bne.n	8005ebc <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8005ece:	f7ff ff49 	bl	8005d64 <UART_Start_Receive_IT>
 8005ed2:	e000      	b.n	8005ed6 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8005ed4:	2002      	movs	r0, #2
}
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005ed8:	2001      	movs	r0, #1
 8005eda:	e7fc      	b.n	8005ed6 <HAL_UART_Receive_IT+0x4a>
 8005edc:	2001      	movs	r0, #1
 8005ede:	e7fa      	b.n	8005ed6 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8005ee0:	2002      	movs	r0, #2
 8005ee2:	e7f8      	b.n	8005ed6 <HAL_UART_Receive_IT+0x4a>
 8005ee4:	40008000 	.word	0x40008000

08005ee8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005ee8:	b082      	sub	sp, #8
 8005eea:	ab02      	add	r3, sp, #8
 8005eec:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005ef0:	6802      	ldr	r2, [r0, #0]
 8005ef2:	6853      	ldr	r3, [r2, #4]
 8005ef4:	f023 0310 	bic.w	r3, r3, #16
 8005ef8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005f00:	6802      	ldr	r2, [r0, #0]
 8005f02:	6853      	ldr	r3, [r2, #4]
 8005f04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f08:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005f0c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f10:	6053      	str	r3, [r2, #4]
}
 8005f12:	b002      	add	sp, #8
 8005f14:	4770      	bx	lr
	...

08005f18 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f18:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005f1a:	b92b      	cbnz	r3, 8005f28 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f22:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005f26:	4770      	bx	lr
{
 8005f28:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f2a:	6803      	ldr	r3, [r0, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f32:	6899      	ldr	r1, [r3, #8]
 8005f34:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f36:	4d09      	ldr	r5, [pc, #36]	; (8005f5c <UARTEx_SetNbDataToProcess+0x44>)
 8005f38:	5c6b      	ldrb	r3, [r5, r1]
 8005f3a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f3c:	4c08      	ldr	r4, [pc, #32]	; (8005f60 <UARTEx_SetNbDataToProcess+0x48>)
 8005f3e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f40:	fb93 f3f1 	sdiv	r3, r3, r1
 8005f44:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f48:	5cab      	ldrb	r3, [r5, r2]
 8005f4a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f4c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f52:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005f56:	bc30      	pop	{r4, r5}
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	0801172c 	.word	0x0801172c
 8005f60:	08011724 	.word	0x08011724

08005f64 <HAL_UARTEx_WakeupCallback>:
}
 8005f64:	4770      	bx	lr

08005f66 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005f66:	4770      	bx	lr

08005f68 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005f68:	4770      	bx	lr

08005f6a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	ab04      	add	r3, sp, #16
 8005f70:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8005f74:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d035      	beq.n	8005fe8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	2324      	movs	r3, #36	; 0x24
 8005f86:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005f8a:	6802      	ldr	r2, [r0, #0]
 8005f8c:	6813      	ldr	r3, [r2, #0]
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005f94:	6801      	ldr	r1, [r0, #0]
 8005f96:	688b      	ldr	r3, [r1, #8]
 8005f98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f9c:	9a02      	ldr	r2, [sp, #8]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005fa2:	b1aa      	cbz	r2, 8005fd0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	6813      	ldr	r3, [r2, #0]
 8005fa8:	f043 0301 	orr.w	r3, r3, #1
 8005fac:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8005fae:	f7fb faa1 	bl	80014f4 <HAL_GetTick>
 8005fb2:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005fb8:	9200      	str	r2, [sp, #0]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f7ff fdf6 	bl	8005bb2 <UART_WaitOnFlagUntilTimeout>
 8005fc6:	b948      	cbnz	r0, 8005fdc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8005fc8:	2320      	movs	r3, #32
 8005fca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8005fce:	e006      	b.n	8005fde <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005fd0:	ab04      	add	r3, sp, #16
 8005fd2:	e913 0006 	ldmdb	r3, {r1, r2}
 8005fd6:	f7ff ff87 	bl	8005ee8 <UARTEx_Wakeup_AddressConfig>
 8005fda:	e7e3      	b.n	8005fa4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8005fdc:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005fe4:	b004      	add	sp, #16
 8005fe6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8005fe8:	2002      	movs	r0, #2
 8005fea:	e7fb      	b.n	8005fe4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08005fec <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8005fec:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d010      	beq.n	8006016 <HAL_UARTEx_EnableStopMode+0x2a>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005ffa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	e852 3f00 	ldrex	r3, [r2]
 8006000:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	e842 3100 	strex	r1, r3, [r2]
 8006008:	2900      	cmp	r1, #0
 800600a:	d1f6      	bne.n	8005ffa <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800600c:	2300      	movs	r3, #0
 800600e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006012:	4618      	mov	r0, r3
 8006014:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006016:	2002      	movs	r0, #2
}
 8006018:	4770      	bx	lr

0800601a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800601a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800601e:	2b01      	cmp	r3, #1
 8006020:	d01d      	beq.n	800605e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006022:	b510      	push	{r4, lr}
 8006024:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006026:	2301      	movs	r3, #1
 8006028:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800602c:	2324      	movs	r3, #36	; 0x24
 800602e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006032:	6802      	ldr	r2, [r0, #0]
 8006034:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006036:	6811      	ldr	r1, [r2, #0]
 8006038:	f021 0101 	bic.w	r1, r1, #1
 800603c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800603e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006042:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006046:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006048:	6802      	ldr	r2, [r0, #0]
 800604a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800604c:	f7ff ff64 	bl	8005f18 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006050:	2320      	movs	r3, #32
 8006052:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006056:	2000      	movs	r0, #0
 8006058:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800605c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800605e:	2002      	movs	r0, #2
}
 8006060:	4770      	bx	lr

08006062 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006062:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006064:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006068:	2b01      	cmp	r3, #1
 800606a:	d01d      	beq.n	80060a8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800606c:	4604      	mov	r4, r0
 800606e:	2301      	movs	r3, #1
 8006070:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006074:	2324      	movs	r3, #36	; 0x24
 8006076:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800607a:	6803      	ldr	r3, [r0, #0]
 800607c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006086:	6802      	ldr	r2, [r0, #0]
 8006088:	6893      	ldr	r3, [r2, #8]
 800608a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800608e:	4319      	orrs	r1, r3
 8006090:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006092:	f7ff ff41 	bl	8005f18 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800609a:	2320      	movs	r3, #32
 800609c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80060a0:	2000      	movs	r0, #0
 80060a2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80060a8:	2002      	movs	r0, #2
 80060aa:	e7fc      	b.n	80060a6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080060ac <HAL_UARTEx_SetRxFifoThreshold>:
{
 80060ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80060ae:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d01d      	beq.n	80060f2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80060b6:	4604      	mov	r4, r0
 80060b8:	2301      	movs	r3, #1
 80060ba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80060be:	2324      	movs	r3, #36	; 0x24
 80060c0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060d0:	6802      	ldr	r2, [r0, #0]
 80060d2:	6893      	ldr	r3, [r2, #8]
 80060d4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80060d8:	4319      	orrs	r1, r3
 80060da:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80060dc:	f7ff ff1c 	bl	8005f18 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80060e4:	2320      	movs	r3, #32
 80060e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80060ea:	2000      	movs	r0, #0
 80060ec:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80060f0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80060f2:	2002      	movs	r0, #2
 80060f4:	e7fc      	b.n	80060f0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080060f8 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 80060f8:	2804      	cmp	r0, #4
 80060fa:	d807      	bhi.n	800610c <LmHandlerPackageIsInitialized+0x14>
{
 80060fc:	b508      	push	{r3, lr}
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <LmHandlerPackageIsInitialized+0x1c>)
 8006100:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	b11b      	cbz	r3, 8006110 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006108:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800610a:	bd08      	pop	{r3, pc}
        return false;
 800610c:	2000      	movs	r0, #0
}
 800610e:	4770      	bx	lr
        return false;
 8006110:	2000      	movs	r0, #0
 8006112:	e7fa      	b.n	800610a <LmHandlerPackageIsInitialized+0x12>
 8006114:	200004f4 	.word	0x200004f4

08006118 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	4605      	mov	r5, r0
 800611c:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800611e:	2400      	movs	r4, #0
 8006120:	e018      	b.n	8006154 <LmHandlerPackagesNotify+0x3c>
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	b1a2      	cbz	r2, 8006150 <LmHandlerPackagesNotify+0x38>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800612a:	429a      	cmp	r2, r3
 800612c:	d005      	beq.n	800613a <LmHandlerPackagesNotify+0x22>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800612e:	b97c      	cbnz	r4, 8006150 <LmHandlerPackagesNotify+0x38>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8006130:	4b13      	ldr	r3, [pc, #76]	; (8006180 <LmHandlerPackagesNotify+0x68>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4798      	blx	r3
 8006138:	b150      	cbz	r0, 8006150 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <LmHandlerPackagesNotify+0x68>)
 800613c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	4638      	mov	r0, r7
 8006144:	4798      	blx	r3
 8006146:	e003      	b.n	8006150 <LmHandlerPackagesNotify+0x38>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	b10b      	cbz	r3, 8006150 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800614c:	4638      	mov	r0, r7
 800614e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006150:	3401      	adds	r4, #1
 8006152:	b264      	sxtb	r4, r4
 8006154:	2c04      	cmp	r4, #4
 8006156:	dc11      	bgt.n	800617c <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8006158:	4626      	mov	r6, r4
 800615a:	4b09      	ldr	r3, [pc, #36]	; (8006180 <LmHandlerPackagesNotify+0x68>)
 800615c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f5      	beq.n	8006150 <LmHandlerPackagesNotify+0x38>
            switch( notifyType )
 8006164:	2d01      	cmp	r5, #1
 8006166:	d0dc      	beq.n	8006122 <LmHandlerPackagesNotify+0xa>
 8006168:	2d02      	cmp	r5, #2
 800616a:	d0ed      	beq.n	8006148 <LmHandlerPackagesNotify+0x30>
 800616c:	2d00      	cmp	r5, #0
 800616e:	d1ef      	bne.n	8006150 <LmHandlerPackagesNotify+0x38>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0ec      	beq.n	8006150 <LmHandlerPackagesNotify+0x38>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006176:	4638      	mov	r0, r7
 8006178:	4798      	blx	r3
 800617a:	e7e9      	b.n	8006150 <LmHandlerPackagesNotify+0x38>
                    break;
                }
            }
        }
    }
}
 800617c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800617e:	bf00      	nop
 8006180:	200004f4 	.word	0x200004f4

08006184 <McpsConfirm>:
{
 8006184:	b510      	push	{r4, lr}
 8006186:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006188:	480c      	ldr	r0, [pc, #48]	; (80061bc <McpsConfirm+0x38>)
 800618a:	2301      	movs	r3, #1
 800618c:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 800618e:	7863      	ldrb	r3, [r4, #1]
 8006190:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006192:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006196:	7103      	strb	r3, [r0, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006198:	68e3      	ldr	r3, [r4, #12]
 800619a:	6083      	str	r3, [r0, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800619c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80061a0:	7503      	strb	r3, [r0, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	7543      	strb	r3, [r0, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80061a6:	7923      	ldrb	r3, [r4, #4]
 80061a8:	70c3      	strb	r3, [r0, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <McpsConfirm+0x3c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 80061b2:	4621      	mov	r1, r4
 80061b4:	2000      	movs	r0, #0
 80061b6:	f7ff ffaf 	bl	8006118 <LmHandlerPackagesNotify>
}
 80061ba:	bd10      	pop	{r4, pc}
 80061bc:	2000053c 	.word	0x2000053c
 80061c0:	200004f0 	.word	0x200004f0

080061c4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 80061c4:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80061c6:	2400      	movs	r4, #0
 80061c8:	e001      	b.n	80061ce <LmHandlerPackagesProcess+0xa>
 80061ca:	3401      	adds	r4, #1
 80061cc:	b264      	sxtb	r4, r4
 80061ce:	2c04      	cmp	r4, #4
 80061d0:	dc12      	bgt.n	80061f8 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <LmHandlerPackagesProcess+0x38>)
 80061d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f6      	beq.n	80061ca <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80061dc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0f3      	beq.n	80061ca <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80061e2:	b2e0      	uxtb	r0, r4
 80061e4:	f7ff ff88 	bl	80060f8 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d0ee      	beq.n	80061ca <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 80061ec:	4b03      	ldr	r3, [pc, #12]	; (80061fc <LmHandlerPackagesProcess+0x38>)
 80061ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	4798      	blx	r3
 80061f6:	e7e8      	b.n	80061ca <LmHandlerPackagesProcess+0x6>
        }
    }
}
 80061f8:	bd38      	pop	{r3, r4, r5, pc}
 80061fa:	bf00      	nop
 80061fc:	200004f4 	.word	0x200004f4

08006200 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 8006200:	b500      	push	{lr}
 8006202:	b083      	sub	sp, #12
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <DisplayClassUpdate+0x1c>)
 8006206:	5c1b      	ldrb	r3, [r3, r0]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	4b05      	ldr	r3, [pc, #20]	; (8006220 <DisplayClassUpdate+0x20>)
 800620c:	2200      	movs	r2, #0
 800620e:	4611      	mov	r1, r2
 8006210:	2002      	movs	r0, #2
 8006212:	f00a f9ff 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 8006216:	b003      	add	sp, #12
 8006218:	f85d fb04 	ldr.w	pc, [sp], #4
 800621c:	08011750 	.word	0x08011750
 8006220:	08011734 	.word	0x08011734

08006224 <LmHandlerSetSystemMaxRxError>:
{
 8006224:	b500      	push	{lr}
 8006226:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8006228:	2322      	movs	r3, #34	; 0x22
 800622a:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800622e:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006230:	a801      	add	r0, sp, #4
 8006232:	f003 fa91 	bl	8009758 <LoRaMacMibSetRequestConfirm>
 8006236:	b910      	cbnz	r0, 800623e <LmHandlerSetSystemMaxRxError+0x1a>
}
 8006238:	b00b      	add	sp, #44	; 0x2c
 800623a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800623e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006242:	e7f9      	b.n	8006238 <LmHandlerSetSystemMaxRxError+0x14>

08006244 <LmHandlerDeviceTimeReq>:
{
 8006244:	b500      	push	{lr}
 8006246:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8006248:	230a      	movs	r3, #10
 800624a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800624e:	a801      	add	r0, sp, #4
 8006250:	f003 fcfe 	bl	8009c50 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 8006254:	b910      	cbnz	r0, 800625c <LmHandlerDeviceTimeReq+0x18>
}
 8006256:	b007      	add	sp, #28
 8006258:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800625c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006260:	e7f9      	b.n	8006256 <LmHandlerDeviceTimeReq+0x12>
	...

08006264 <LmHandlerConfigure>:
{
 8006264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006266:	b095      	sub	sp, #84	; 0x54
 8006268:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800626a:	4c63      	ldr	r4, [pc, #396]	; (80063f8 <LmHandlerConfigure+0x194>)
 800626c:	2210      	movs	r2, #16
 800626e:	4620      	mov	r0, r4
 8006270:	f00a fae6 	bl	8010840 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8006274:	f7fb fe16 	bl	8001ea4 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8006278:	7822      	ldrb	r2, [r4, #0]
 800627a:	2301      	movs	r3, #1
 800627c:	4093      	lsls	r3, r2
 800627e:	6841      	ldr	r1, [r0, #4]
 8006280:	420b      	tst	r3, r1
 8006282:	f000 80ab 	beq.w	80063dc <LmHandlerConfigure+0x178>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8006286:	495d      	ldr	r1, [pc, #372]	; (80063fc <LmHandlerConfigure+0x198>)
 8006288:	485d      	ldr	r0, [pc, #372]	; (8006400 <LmHandlerConfigure+0x19c>)
 800628a:	f002 ff01 	bl	8009090 <LoRaMacInitialization>
 800628e:	2800      	cmp	r0, #0
 8006290:	f040 80af 	bne.w	80063f2 <LmHandlerConfigure+0x18e>
    nbNvmData = NvmDataMgmtRestore( );
 8006294:	f004 fed5 	bl	800b042 <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8006298:	2800      	cmp	r0, #0
 800629a:	f000 80a6 	beq.w	80063ea <LmHandlerConfigure+0x186>
        CtxRestoreDone = true;
 800629e:	4b59      	ldr	r3, [pc, #356]	; (8006404 <LmHandlerConfigure+0x1a0>)
 80062a0:	2201      	movs	r2, #1
 80062a2:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 80062a4:	2502      	movs	r5, #2
 80062a6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 80062aa:	a80b      	add	r0, sp, #44	; 0x2c
 80062ac:	f003 f938 	bl	8009520 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 80062b0:	4c55      	ldr	r4, [pc, #340]	; (8006408 <LmHandlerConfigure+0x1a4>)
 80062b2:	2208      	movs	r2, #8
 80062b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062b6:	4620      	mov	r0, r4
 80062b8:	f008 f817 	bl	800e2ea <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 80062bc:	2303      	movs	r3, #3
 80062be:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 80062c2:	a80b      	add	r0, sp, #44	; 0x2c
 80062c4:	f003 f92c 	bl	8009520 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 80062c8:	2208      	movs	r2, #8
 80062ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062cc:	18a0      	adds	r0, r4, r2
 80062ce:	f008 f80c 	bl	800e2ea <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 80062d2:	4b4e      	ldr	r3, [pc, #312]	; (800640c <LmHandlerConfigure+0x1a8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4798      	blx	r3
 80062da:	6160      	str	r0, [r4, #20]
    mibReq.Type = MIB_DEV_ADDR;
 80062dc:	2306      	movs	r3, #6
 80062de:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 80062e2:	900c      	str	r0, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80062e4:	a80b      	add	r0, sp, #44	; 0x2c
 80062e6:	f003 fa37 	bl	8009758 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80062ea:	7823      	ldrb	r3, [r4, #0]
 80062ec:	7862      	ldrb	r2, [r4, #1]
 80062ee:	78a1      	ldrb	r1, [r4, #2]
 80062f0:	78e0      	ldrb	r0, [r4, #3]
 80062f2:	7926      	ldrb	r6, [r4, #4]
 80062f4:	7967      	ldrb	r7, [r4, #5]
 80062f6:	f894 c006 	ldrb.w	ip, [r4, #6]
 80062fa:	f894 e007 	ldrb.w	lr, [r4, #7]
 80062fe:	f8cd e01c 	str.w	lr, [sp, #28]
 8006302:	f8cd c018 	str.w	ip, [sp, #24]
 8006306:	9705      	str	r7, [sp, #20]
 8006308:	9604      	str	r6, [sp, #16]
 800630a:	9003      	str	r0, [sp, #12]
 800630c:	9102      	str	r1, [sp, #8]
 800630e:	9201      	str	r2, [sp, #4]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4b3f      	ldr	r3, [pc, #252]	; (8006410 <LmHandlerConfigure+0x1ac>)
 8006314:	2200      	movs	r2, #0
 8006316:	4611      	mov	r1, r2
 8006318:	4628      	mov	r0, r5
 800631a:	f00a f97b 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800631e:	7a23      	ldrb	r3, [r4, #8]
 8006320:	7a62      	ldrb	r2, [r4, #9]
 8006322:	7aa1      	ldrb	r1, [r4, #10]
 8006324:	7ae0      	ldrb	r0, [r4, #11]
 8006326:	7b26      	ldrb	r6, [r4, #12]
 8006328:	f894 c00d 	ldrb.w	ip, [r4, #13]
 800632c:	f894 e00e 	ldrb.w	lr, [r4, #14]
 8006330:	7be7      	ldrb	r7, [r4, #15]
 8006332:	9707      	str	r7, [sp, #28]
 8006334:	f8cd e018 	str.w	lr, [sp, #24]
 8006338:	f8cd c014 	str.w	ip, [sp, #20]
 800633c:	9604      	str	r6, [sp, #16]
 800633e:	9003      	str	r0, [sp, #12]
 8006340:	9102      	str	r1, [sp, #8]
 8006342:	9201      	str	r2, [sp, #4]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	4b33      	ldr	r3, [pc, #204]	; (8006414 <LmHandlerConfigure+0x1b0>)
 8006348:	2200      	movs	r2, #0
 800634a:	4611      	mov	r1, r2
 800634c:	4628      	mov	r0, r5
 800634e:	f00a f961 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006352:	7de3      	ldrb	r3, [r4, #23]
 8006354:	7da2      	ldrb	r2, [r4, #22]
 8006356:	7d61      	ldrb	r1, [r4, #21]
 8006358:	7d20      	ldrb	r0, [r4, #20]
 800635a:	9003      	str	r0, [sp, #12]
 800635c:	9102      	str	r1, [sp, #8]
 800635e:	9201      	str	r2, [sp, #4]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	4b2d      	ldr	r3, [pc, #180]	; (8006418 <LmHandlerConfigure+0x1b4>)
 8006364:	2200      	movs	r2, #0
 8006366:	4611      	mov	r1, r2
 8006368:	4628      	mov	r0, r5
 800636a:	f00a f953 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800636e:	260f      	movs	r6, #15
 8006370:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006374:	2301      	movs	r3, #1
 8006376:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 800637a:	a80b      	add	r0, sp, #44	; 0x2c
 800637c:	f003 f9ec 	bl	8009758 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 8006380:	2305      	movs	r3, #5
 8006382:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8006386:	2400      	movs	r4, #0
 8006388:	940c      	str	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 800638a:	a80b      	add	r0, sp, #44	; 0x2c
 800638c:	f003 f9e4 	bl	8009758 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006390:	2310      	movs	r3, #16
 8006392:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8006396:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800639a:	a80b      	add	r0, sp, #44	; 0x2c
 800639c:	f003 f9dc 	bl	8009758 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80063a0:	2304      	movs	r3, #4
 80063a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80063a6:	4d14      	ldr	r5, [pc, #80]	; (80063f8 <LmHandlerConfigure+0x194>)
 80063a8:	78ab      	ldrb	r3, [r5, #2]
 80063aa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 80063ae:	a80b      	add	r0, sp, #44	; 0x2c
 80063b0:	f003 f9d2 	bl	8009758 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80063b4:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80063b8:	a909      	add	r1, sp, #36	; 0x24
 80063ba:	7828      	ldrb	r0, [r5, #0]
 80063bc:	f004 fe4d 	bl	800b05a <RegionGetPhyParam>
 80063c0:	9008      	str	r0, [sp, #32]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 80063c2:	1b03      	subs	r3, r0, r4
 80063c4:	bf18      	it	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	716b      	strb	r3, [r5, #5]
    LmHandlerSetSystemMaxRxError( 20 );
 80063ca:	2014      	movs	r0, #20
 80063cc:	f7ff ff2a 	bl	8006224 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80063d0:	7968      	ldrb	r0, [r5, #5]
 80063d2:	f003 fdcf 	bl	8009f74 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 80063d6:	4620      	mov	r0, r4
}
 80063d8:	b015      	add	sp, #84	; 0x54
 80063da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <LmHandlerConfigure+0x1b8>)
 80063de:	2201      	movs	r2, #1
 80063e0:	2100      	movs	r1, #0
 80063e2:	4608      	mov	r0, r1
 80063e4:	f00a f916 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 80063e8:	e7fe      	b.n	80063e8 <LmHandlerConfigure+0x184>
        CtxRestoreDone = false;
 80063ea:	4b06      	ldr	r3, [pc, #24]	; (8006404 <LmHandlerConfigure+0x1a0>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e758      	b.n	80062a4 <LmHandlerConfigure+0x40>
            return LORAMAC_HANDLER_ERROR;
 80063f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f6:	e7ef      	b.n	80063d8 <LmHandlerConfigure+0x174>
 80063f8:	20000508 	.word	0x20000508
 80063fc:	20000518 	.word	0x20000518
 8006400:	2000052c 	.word	0x2000052c
 8006404:	200004ee 	.word	0x200004ee
 8006408:	20000058 	.word	0x20000058
 800640c:	200004f0 	.word	0x200004f0
 8006410:	080117a0 	.word	0x080117a0
 8006414:	080117dc 	.word	0x080117dc
 8006418:	08011818 	.word	0x08011818
 800641c:	08011754 	.word	0x08011754

08006420 <LmHandlerProcess>:
{
 8006420:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 8006422:	f002 fe01 	bl	8009028 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8006426:	f7ff fecd 	bl	80061c4 <LmHandlerPackagesProcess>
    NvmDataMgmtStore( );
 800642a:	f004 fe08 	bl	800b03e <NvmDataMgmtStore>
}
 800642e:	bd08      	pop	{r3, pc}

08006430 <LmHandlerJoinStatus>:
{
 8006430:	b500      	push	{lr}
 8006432:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006434:	2301      	movs	r3, #1
 8006436:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800643a:	a801      	add	r0, sp, #4
 800643c:	f003 f870 	bl	8009520 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8006440:	b920      	cbnz	r0, 800644c <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006442:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006446:	b110      	cbz	r0, 800644e <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8006448:	2001      	movs	r0, #1
 800644a:	e000      	b.n	800644e <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800644c:	2000      	movs	r0, #0
}
 800644e:	b00b      	add	sp, #44	; 0x2c
 8006450:	f85d fb04 	ldr.w	pc, [sp], #4

08006454 <LmHandlerRequestClass>:
{
 8006454:	b510      	push	{r4, lr}
 8006456:	b08a      	sub	sp, #40	; 0x28
 8006458:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800645a:	f002 fdd3 	bl	8009004 <LoRaMacIsBusy>
 800645e:	2800      	cmp	r0, #0
 8006460:	d13d      	bne.n	80064de <LmHandlerRequestClass+0x8a>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8006462:	f7ff ffe5 	bl	8006430 <LmHandlerJoinStatus>
 8006466:	2801      	cmp	r0, #1
 8006468:	d13c      	bne.n	80064e4 <LmHandlerRequestClass+0x90>
    mibReq.Type = MIB_DEVICE_CLASS;
 800646a:	2300      	movs	r3, #0
 800646c:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006470:	a801      	add	r0, sp, #4
 8006472:	f003 f855 	bl	8009520 <LoRaMacMibGetRequestConfirm>
 8006476:	2800      	cmp	r0, #0
 8006478:	d137      	bne.n	80064ea <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 800647a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 800647e:	42a3      	cmp	r3, r4
 8006480:	d036      	beq.n	80064f0 <LmHandlerRequestClass+0x9c>
        switch( newClass )
 8006482:	2c01      	cmp	r4, #1
 8006484:	d036      	beq.n	80064f4 <LmHandlerRequestClass+0xa0>
 8006486:	2c02      	cmp	r4, #2
 8006488:	d017      	beq.n	80064ba <LmHandlerRequestClass+0x66>
 800648a:	b114      	cbz	r4, 8006492 <LmHandlerRequestClass+0x3e>
 800648c:	2000      	movs	r0, #0
}
 800648e:	b00a      	add	sp, #40	; 0x28
 8006490:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8006492:	b90b      	cbnz	r3, 8006498 <LmHandlerRequestClass+0x44>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006494:	2000      	movs	r0, #0
 8006496:	e7fa      	b.n	800648e <LmHandlerRequestClass+0x3a>
                    mibReq.Param.Class = newClass;
 8006498:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800649c:	a801      	add	r0, sp, #4
 800649e:	f003 f95b 	bl	8009758 <LoRaMacMibSetRequestConfirm>
 80064a2:	bb50      	cbnz	r0, 80064fa <LmHandlerRequestClass+0xa6>
                        DisplayClassUpdate(newClass);
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7ff feab 	bl	8006200 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80064aa:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <LmHandlerRequestClass+0xc0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	b333      	cbz	r3, 8006500 <LmHandlerRequestClass+0xac>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80064b2:	4620      	mov	r0, r4
 80064b4:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80064b6:	2000      	movs	r0, #0
 80064b8:	e7e9      	b.n	800648e <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 80064ba:	bb1b      	cbnz	r3, 8006504 <LmHandlerRequestClass+0xb0>
                    mibReq.Param.Class = newClass;
 80064bc:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80064c0:	a801      	add	r0, sp, #4
 80064c2:	f003 f949 	bl	8009758 <LoRaMacMibSetRequestConfirm>
 80064c6:	bb00      	cbnz	r0, 800650a <LmHandlerRequestClass+0xb6>
                        DisplayClassUpdate(newClass);
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7ff fe99 	bl	8006200 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80064ce:	4b11      	ldr	r3, [pc, #68]	; (8006514 <LmHandlerRequestClass+0xc0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d4:	b1e3      	cbz	r3, 8006510 <LmHandlerRequestClass+0xbc>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80064d6:	4620      	mov	r0, r4
 80064d8:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80064da:	2000      	movs	r0, #0
 80064dc:	e7d7      	b.n	800648e <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80064de:	f06f 0001 	mvn.w	r0, #1
 80064e2:	e7d4      	b.n	800648e <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80064e4:	f06f 0002 	mvn.w	r0, #2
 80064e8:	e7d1      	b.n	800648e <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_ERROR;
 80064ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064ee:	e7ce      	b.n	800648e <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80064f0:	2000      	movs	r0, #0
 80064f2:	e7cc      	b.n	800648e <LmHandlerRequestClass+0x3a>
                errorStatus = LORAMAC_HANDLER_ERROR;
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f8:	e7c9      	b.n	800648e <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80064fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064fe:	e7c6      	b.n	800648e <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006500:	2000      	movs	r0, #0
 8006502:	e7c4      	b.n	800648e <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8006504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006508:	e7c1      	b.n	800648e <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800650a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800650e:	e7be      	b.n	800648e <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006510:	2000      	movs	r0, #0
 8006512:	e7bc      	b.n	800648e <LmHandlerRequestClass+0x3a>
 8006514:	200004f0 	.word	0x200004f0

08006518 <LmHandlerJoin>:
{
 8006518:	b500      	push	{lr}
 800651a:	b08f      	sub	sp, #60	; 0x3c
    if ( mode == ACTIVATION_TYPE_OTAA )
 800651c:	2802      	cmp	r0, #2
 800651e:	d021      	beq.n	8006564 <LmHandlerJoin+0x4c>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <LmHandlerJoin+0x80>)
 8006522:	2201      	movs	r2, #1
 8006524:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8006526:	4a1d      	ldr	r2, [pc, #116]	; (800659c <LmHandlerJoin+0x84>)
 8006528:	f992 2003 	ldrsb.w	r2, [r2, #3]
 800652c:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800652e:	2200      	movs	r2, #0
 8006530:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 8006532:	4b1b      	ldr	r3, [pc, #108]	; (80065a0 <LmHandlerJoin+0x88>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b32b      	cbz	r3, 8006584 <LmHandlerJoin+0x6c>
        LoRaMacStart();
 8006538:	f002 ff84 	bl	8009444 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800653c:	2301      	movs	r3, #1
 800653e:	f88d 3014 	strb.w	r3, [sp, #20]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006542:	f88d 3018 	strb.w	r3, [sp, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006546:	a805      	add	r0, sp, #20
 8006548:	f003 f906 	bl	8009758 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800654c:	4b15      	ldr	r3, [pc, #84]	; (80065a4 <LmHandlerJoin+0x8c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	4811      	ldr	r0, [pc, #68]	; (8006598 <LmHandlerJoin+0x80>)
 8006554:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006556:	4b11      	ldr	r3, [pc, #68]	; (800659c <LmHandlerJoin+0x84>)
 8006558:	7858      	ldrb	r0, [r3, #1]
 800655a:	f7ff ff7b 	bl	8006454 <LmHandlerRequestClass>
}
 800655e:	b00f      	add	sp, #60	; 0x3c
 8006560:	f85d fb04 	ldr.w	pc, [sp], #4
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8006564:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <LmHandlerJoin+0x80>)
 8006566:	2202      	movs	r2, #2
 8006568:	709a      	strb	r2, [r3, #2]
        LoRaMacStart();
 800656a:	f002 ff6b 	bl	8009444 <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 800656e:	2301      	movs	r3, #1
 8006570:	f88d 3000 	strb.w	r3, [sp]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006574:	4b09      	ldr	r3, [pc, #36]	; (800659c <LmHandlerJoin+0x84>)
 8006576:	78db      	ldrb	r3, [r3, #3]
 8006578:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 800657c:	4668      	mov	r0, sp
 800657e:	f003 fb67 	bl	8009c50 <LoRaMacMlmeRequest>
 8006582:	e7ec      	b.n	800655e <LmHandlerJoin+0x46>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8006584:	2327      	movs	r3, #39	; 0x27
 8006586:	f88d 3014 	strb.w	r3, [sp, #20]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800658a:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <LmHandlerJoin+0x90>)
 800658c:	9306      	str	r3, [sp, #24]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800658e:	a805      	add	r0, sp, #20
 8006590:	f003 f8e2 	bl	8009758 <LoRaMacMibSetRequestConfirm>
 8006594:	e7d0      	b.n	8006538 <LmHandlerJoin+0x20>
 8006596:	bf00      	nop
 8006598:	20000070 	.word	0x20000070
 800659c:	20000508 	.word	0x20000508
 80065a0:	200004ee 	.word	0x200004ee
 80065a4:	200004f0 	.word	0x200004f0
 80065a8:	01000300 	.word	0x01000300

080065ac <LmHandlerSend>:
{
 80065ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ae:	b087      	sub	sp, #28
 80065b0:	4604      	mov	r4, r0
 80065b2:	460f      	mov	r7, r1
 80065b4:	4615      	mov	r5, r2
 80065b6:	461e      	mov	r6, r3
    if (LoRaMacIsBusy() == true)
 80065b8:	f002 fd24 	bl	8009004 <LoRaMacIsBusy>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d16c      	bne.n	800669a <LmHandlerSend+0xee>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80065c0:	f7ff ff36 	bl	8006430 <LmHandlerJoinStatus>
 80065c4:	2801      	cmp	r0, #1
 80065c6:	d13d      	bne.n	8006644 <LmHandlerSend+0x98>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 80065c8:	4b39      	ldr	r3, [pc, #228]	; (80066b0 <LmHandlerSend+0x104>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	4798      	blx	r3
 80065d0:	b138      	cbz	r0, 80065e2 <LmHandlerSend+0x36>
 80065d2:	7823      	ldrb	r3, [r4, #0]
 80065d4:	4a36      	ldr	r2, [pc, #216]	; (80066b0 <LmHandlerSend+0x104>)
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	7812      	ldrb	r2, [r2, #0]
 80065da:	4293      	cmp	r3, r2
 80065dc:	d001      	beq.n	80065e2 <LmHandlerSend+0x36>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d15e      	bne.n	80066a0 <LmHandlerSend+0xf4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80065e2:	4b34      	ldr	r3, [pc, #208]	; (80066b4 <LmHandlerSend+0x108>)
 80065e4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80065e8:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80065ec:	4669      	mov	r1, sp
 80065ee:	7860      	ldrb	r0, [r4, #1]
 80065f0:	f002 ff30 	bl	8009454 <LoRaMacQueryTxPossible>
 80065f4:	b368      	cbz	r0, 8006652 <LmHandlerSend+0xa6>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80065f6:	2200      	movs	r2, #0
 80065f8:	4b2f      	ldr	r3, [pc, #188]	; (80066b8 <LmHandlerSend+0x10c>)
 80065fa:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80065fc:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8006600:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8006602:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 8006606:	4a2c      	ldr	r2, [pc, #176]	; (80066b8 <LmHandlerSend+0x10c>)
 8006608:	f102 0c0c 	add.w	ip, r2, #12
 800660c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006610:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8006614:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <LmHandlerSend+0x108>)
 8006616:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800661a:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800661c:	4631      	mov	r1, r6
 800661e:	a801      	add	r0, sp, #4
 8006620:	f003 fbec 	bl	8009dfc <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8006624:	b10d      	cbz	r5, 800662a <LmHandlerSend+0x7e>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8006626:	9b05      	ldr	r3, [sp, #20]
 8006628:	602b      	str	r3, [r5, #0]
    switch (status)
 800662a:	2811      	cmp	r0, #17
 800662c:	d832      	bhi.n	8006694 <LmHandlerSend+0xe8>
 800662e:	e8df f000 	tbb	[pc, r0]
 8006632:	3a26      	.short	0x3a26
 8006634:	31313131 	.word	0x31313131
 8006638:	31312831 	.word	0x31312831
 800663c:	31312e31 	.word	0x31312e31
 8006640:	2b3a3a3a 	.word	0x2b3a3a3a
        LmHandlerJoin(JoinParams.Mode);
 8006644:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <LmHandlerSend+0x110>)
 8006646:	7898      	ldrb	r0, [r3, #2]
 8006648:	f7ff ff66 	bl	8006518 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800664c:	f06f 0002 	mvn.w	r0, #2
 8006650:	e02b      	b.n	80066aa <LmHandlerSend+0xfe>
        TxParams.MsgType = isTxConfirmed;
 8006652:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <LmHandlerSend+0x10c>)
 8006654:	709f      	strb	r7, [r3, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8006656:	7823      	ldrb	r3, [r4, #0]
 8006658:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800665c:	7863      	ldrb	r3, [r4, #1]
 800665e:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8006662:	6863      	ldr	r3, [r4, #4]
 8006664:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 8006666:	b91f      	cbnz	r7, 8006670 <LmHandlerSend+0xc4>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8006668:	2300      	movs	r3, #0
 800666a:	f88d 3004 	strb.w	r3, [sp, #4]
 800666e:	e7ca      	b.n	8006606 <LmHandlerSend+0x5a>
            mcpsReq.Type = MCPS_CONFIRMED;
 8006670:	2301      	movs	r3, #1
 8006672:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 8006676:	2308      	movs	r3, #8
 8006678:	f88d 3013 	strb.w	r3, [sp, #19]
 800667c:	e7c3      	b.n	8006606 <LmHandlerSend+0x5a>
    switch (status)
 800667e:	2000      	movs	r0, #0
 8006680:	e013      	b.n	80066aa <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006682:	f06f 0002 	mvn.w	r0, #2
            break;
 8006686:	e010      	b.n	80066aa <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8006688:	f06f 0004 	mvn.w	r0, #4
            break;
 800668c:	e00d      	b.n	80066aa <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800668e:	f06f 0005 	mvn.w	r0, #5
            break;
 8006692:	e00a      	b.n	80066aa <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8006694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
            break;
 8006698:	e007      	b.n	80066aa <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800669a:	f06f 0001 	mvn.w	r0, #1
 800669e:	e004      	b.n	80066aa <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80066a0:	f06f 0003 	mvn.w	r0, #3
 80066a4:	e001      	b.n	80066aa <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 80066a6:	f06f 0001 	mvn.w	r0, #1
}
 80066aa:	b007      	add	sp, #28
 80066ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ae:	bf00      	nop
 80066b0:	200004f4 	.word	0x200004f4
 80066b4:	20000508 	.word	0x20000508
 80066b8:	2000053c 	.word	0x2000053c
 80066bc:	20000070 	.word	0x20000070

080066c0 <MlmeIndication>:
{
 80066c0:	b510      	push	{r4, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 80066c6:	4b17      	ldr	r3, [pc, #92]	; (8006724 <MlmeIndication+0x64>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80066cc:	7842      	ldrb	r2, [r0, #1]
 80066ce:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 80066d0:	f9b1 0000 	ldrsh.w	r0, [r1]
 80066d4:	70d8      	strb	r0, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 80066d6:	f991 0002 	ldrsb.w	r0, [r1, #2]
 80066da:	7118      	strb	r0, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 80066dc:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80066e0:	7319      	strb	r1, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80066e2:	2a0e      	cmp	r2, #14
 80066e4:	d005      	beq.n	80066f2 <MlmeIndication+0x32>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80066e6:	4b10      	ldr	r3, [pc, #64]	; (8006728 <MlmeIndication+0x68>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	490d      	ldr	r1, [pc, #52]	; (8006724 <MlmeIndication+0x64>)
 80066ee:	2000      	movs	r0, #0
 80066f0:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 80066f2:	7823      	ldrb	r3, [r4, #0]
 80066f4:	2b07      	cmp	r3, #7
 80066f6:	d001      	beq.n	80066fc <MlmeIndication+0x3c>
}
 80066f8:	b002      	add	sp, #8
 80066fa:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 80066fc:	2300      	movs	r3, #0
 80066fe:	f88d 3000 	strb.w	r3, [sp]
 8006702:	f88d 3001 	strb.w	r3, [sp, #1]
 8006706:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8006708:	4b08      	ldr	r3, [pc, #32]	; (800672c <MlmeIndication+0x6c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	4798      	blx	r3
 8006710:	2800      	cmp	r0, #0
 8006712:	d1f1      	bne.n	80066f8 <MlmeIndication+0x38>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 8006714:	2301      	movs	r3, #1
 8006716:	2200      	movs	r2, #0
 8006718:	4611      	mov	r1, r2
 800671a:	4668      	mov	r0, sp
 800671c:	f7ff ff46 	bl	80065ac <LmHandlerSend>
}
 8006720:	e7ea      	b.n	80066f8 <MlmeIndication+0x38>
 8006722:	bf00      	nop
 8006724:	20000080 	.word	0x20000080
 8006728:	200004f0 	.word	0x200004f0
 800672c:	200004f4 	.word	0x200004f4

08006730 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8006730:	b170      	cbz	r0, 8006750 <LmHandlerGetCurrentClass+0x20>
{
 8006732:	b510      	push	{r4, lr}
 8006734:	b08a      	sub	sp, #40	; 0x28
 8006736:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8006738:	2300      	movs	r3, #0
 800673a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800673e:	a801      	add	r0, sp, #4
 8006740:	f002 feee 	bl	8009520 <LoRaMacMibGetRequestConfirm>
 8006744:	b938      	cbnz	r0, 8006756 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8006746:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800674a:	7023      	strb	r3, [r4, #0]
}
 800674c:	b00a      	add	sp, #40	; 0x28
 800674e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8006750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006754:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8006756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800675a:	e7f7      	b.n	800674c <LmHandlerGetCurrentClass+0x1c>

0800675c <McpsIndication>:
{
 800675c:	b530      	push	{r4, r5, lr}
 800675e:	b087      	sub	sp, #28
 8006760:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8006762:	2200      	movs	r2, #0
 8006764:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 8006768:	4922      	ldr	r1, [pc, #136]	; (80067f4 <McpsIndication+0x98>)
 800676a:	2201      	movs	r2, #1
 800676c:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 800676e:	7842      	ldrb	r2, [r0, #1]
 8006770:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8006772:	bb62      	cbnz	r2, 80067ce <McpsIndication+0x72>
 8006774:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8006776:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800677a:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800677c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006780:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = RxStatus->Snr;
 8006782:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8006786:	710a      	strb	r2, [r1, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 8006788:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800678c:	730b      	strb	r3, [r1, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800678e:	6903      	ldr	r3, [r0, #16]
 8006790:	608b      	str	r3, [r1, #8]
    appData.Port = mcpsIndication->Port;
 8006792:	78c3      	ldrb	r3, [r0, #3]
 8006794:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8006798:	7b03      	ldrb	r3, [r0, #12]
 800679a:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800679e:	6883      	ldr	r3, [r0, #8]
 80067a0:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 80067a2:	4d15      	ldr	r5, [pc, #84]	; (80067f8 <McpsIndication+0x9c>)
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	a804      	add	r0, sp, #16
 80067aa:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	b113      	cbz	r3, 80067b8 <McpsIndication+0x5c>
 80067b2:	7e22      	ldrb	r2, [r4, #24]
 80067b4:	b102      	cbz	r2, 80067b8 <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80067b6:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80067b8:	4621      	mov	r1, r4
 80067ba:	2001      	movs	r0, #1
 80067bc:	f7ff fcac 	bl	8006118 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass(&deviceClass);
 80067c0:	f10d 000f 	add.w	r0, sp, #15
 80067c4:	f7ff ffb4 	bl	8006730 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80067c8:	7963      	ldrb	r3, [r4, #5]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d001      	beq.n	80067d2 <McpsIndication+0x76>
}
 80067ce:	b007      	add	sp, #28
 80067d0:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80067d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f9      	bne.n	80067ce <McpsIndication+0x72>
        LmHandlerAppData_t appData =
 80067da:	2100      	movs	r1, #0
 80067dc:	f88d 1004 	strb.w	r1, [sp, #4]
 80067e0:	f88d 1005 	strb.w	r1, [sp, #5]
 80067e4:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80067e6:	2301      	movs	r3, #1
 80067e8:	460a      	mov	r2, r1
 80067ea:	a801      	add	r0, sp, #4
 80067ec:	f7ff fede 	bl	80065ac <LmHandlerSend>
 80067f0:	e7ed      	b.n	80067ce <McpsIndication+0x72>
 80067f2:	bf00      	nop
 80067f4:	20000080 	.word	0x20000080
 80067f8:	200004f0 	.word	0x200004f0

080067fc <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 80067fc:	b180      	cbz	r0, 8006820 <LmHandlerGetTxDatarate+0x24>
{
 80067fe:	b510      	push	{r4, lr}
 8006800:	b08a      	sub	sp, #40	; 0x28
 8006802:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8006804:	231f      	movs	r3, #31
 8006806:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800680a:	a801      	add	r0, sp, #4
 800680c:	f002 fe88 	bl	8009520 <LoRaMacMibGetRequestConfirm>
 8006810:	b948      	cbnz	r0, 8006826 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8006812:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8006816:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8006818:	4a04      	ldr	r2, [pc, #16]	; (800682c <LmHandlerGetTxDatarate+0x30>)
 800681a:	70d3      	strb	r3, [r2, #3]
}
 800681c:	b00a      	add	sp, #40	; 0x28
 800681e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8006820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006824:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8006826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800682a:	e7f7      	b.n	800681c <LmHandlerGetTxDatarate+0x20>
 800682c:	20000508 	.word	0x20000508

08006830 <MlmeConfirm>:
{
 8006830:	b510      	push	{r4, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8006836:	481d      	ldr	r0, [pc, #116]	; (80068ac <MlmeConfirm+0x7c>)
 8006838:	2300      	movs	r3, #0
 800683a:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 800683c:	7863      	ldrb	r3, [r4, #1]
 800683e:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <MlmeConfirm+0x80>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8006848:	4621      	mov	r1, r4
 800684a:	2002      	movs	r0, #2
 800684c:	f7ff fc64 	bl	8006118 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8006850:	7823      	ldrb	r3, [r4, #0]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d003      	beq.n	800685e <MlmeConfirm+0x2e>
 8006856:	2b04      	cmp	r3, #4
 8006858:	d020      	beq.n	800689c <MlmeConfirm+0x6c>
}
 800685a:	b00a      	add	sp, #40	; 0x28
 800685c:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 800685e:	2306      	movs	r3, #6
 8006860:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8006864:	a801      	add	r0, sp, #4
 8006866:	f002 fe5b 	bl	8009520 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800686a:	9a02      	ldr	r2, [sp, #8]
 800686c:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <MlmeConfirm+0x84>)
 800686e:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8006870:	4811      	ldr	r0, [pc, #68]	; (80068b8 <MlmeConfirm+0x88>)
 8006872:	f7ff ffc3 	bl	80067fc <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8006876:	7863      	ldrb	r3, [r4, #1]
 8006878:	b143      	cbz	r3, 800688c <MlmeConfirm+0x5c>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800687a:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <MlmeConfirm+0x88>)
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <MlmeConfirm+0x80>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	480c      	ldr	r0, [pc, #48]	; (80068b8 <MlmeConfirm+0x88>)
 8006888:	4798      	blx	r3
        break;
 800688a:	e7e6      	b.n	800685a <MlmeConfirm+0x2a>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <MlmeConfirm+0x88>)
 800688e:	2200      	movs	r2, #0
 8006890:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006892:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <MlmeConfirm+0x8c>)
 8006894:	7858      	ldrb	r0, [r3, #1]
 8006896:	f7ff fddd 	bl	8006454 <LmHandlerRequestClass>
 800689a:	e7f1      	b.n	8006880 <MlmeConfirm+0x50>
            RxParams.LinkCheck = true;
 800689c:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <MlmeConfirm+0x90>)
 800689e:	2201      	movs	r2, #1
 80068a0:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80068a2:	7a22      	ldrb	r2, [r4, #8]
 80068a4:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80068a6:	7a62      	ldrb	r2, [r4, #9]
 80068a8:	73da      	strb	r2, [r3, #15]
}
 80068aa:	e7d6      	b.n	800685a <MlmeConfirm+0x2a>
 80068ac:	2000053c 	.word	0x2000053c
 80068b0:	200004f0 	.word	0x200004f0
 80068b4:	20000058 	.word	0x20000058
 80068b8:	20000070 	.word	0x20000070
 80068bc:	20000508 	.word	0x20000508
 80068c0:	20000080 	.word	0x20000080

080068c4 <LmHandlerPackageRegister>:
    switch( id )
 80068c4:	b9e0      	cbnz	r0, 8006900 <LmHandlerPackageRegister+0x3c>
{
 80068c6:	b538      	push	{r3, r4, r5, lr}
 80068c8:	460c      	mov	r4, r1
 80068ca:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80068cc:	f000 fa20 	bl	8006d10 <LmhpCompliancePackageFactory>
    if( package != NULL )
 80068d0:	b198      	cbz	r0, 80068fa <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 80068d2:	4a0d      	ldr	r2, [pc, #52]	; (8006908 <LmHandlerPackageRegister+0x44>)
 80068d4:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80068d8:	4a0c      	ldr	r2, [pc, #48]	; (800690c <LmHandlerPackageRegister+0x48>)
 80068da:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80068dc:	4a0c      	ldr	r2, [pc, #48]	; (8006910 <LmHandlerPackageRegister+0x4c>)
 80068de:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80068e0:	4a0c      	ldr	r2, [pc, #48]	; (8006914 <LmHandlerPackageRegister+0x50>)
 80068e2:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80068e4:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <LmHandlerPackageRegister+0x54>)
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	6912      	ldr	r2, [r2, #16]
 80068ea:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80068ec:	6843      	ldr	r3, [r0, #4]
 80068ee:	22f2      	movs	r2, #242	; 0xf2
 80068f0:	490a      	ldr	r1, [pc, #40]	; (800691c <LmHandlerPackageRegister+0x58>)
 80068f2:	4620      	mov	r0, r4
 80068f4:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 80068f6:	2000      	movs	r0, #0
}
 80068f8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068fe:	e7fb      	b.n	80068f8 <LmHandlerPackageRegister+0x34>
 8006900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	200004f4 	.word	0x200004f4
 800690c:	08006519 	.word	0x08006519
 8006910:	080065ad 	.word	0x080065ad
 8006914:	08006245 	.word	0x08006245
 8006918:	200004f0 	.word	0x200004f0
 800691c:	200003fc 	.word	0x200003fc

08006920 <LmHandlerInit>:
{
 8006920:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8006922:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <LmHandlerInit+0x40>)
 8006924:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <LmHandlerInit+0x44>)
 8006928:	4a0f      	ldr	r2, [pc, #60]	; (8006968 <LmHandlerInit+0x48>)
 800692a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800692c:	4a0f      	ldr	r2, [pc, #60]	; (800696c <LmHandlerInit+0x4c>)
 800692e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8006930:	4a0f      	ldr	r2, [pc, #60]	; (8006970 <LmHandlerInit+0x50>)
 8006932:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8006934:	4a0f      	ldr	r2, [pc, #60]	; (8006974 <LmHandlerInit+0x54>)
 8006936:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8006938:	6802      	ldr	r2, [r0, #0]
 800693a:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <LmHandlerInit+0x58>)
 800693c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800693e:	6842      	ldr	r2, [r0, #4]
 8006940:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8006942:	6882      	ldr	r2, [r0, #8]
 8006944:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8006946:	4a0d      	ldr	r2, [pc, #52]	; (800697c <LmHandlerInit+0x5c>)
 8006948:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800694a:	6902      	ldr	r2, [r0, #16]
 800694c:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800694e:	490c      	ldr	r1, [pc, #48]	; (8006980 <LmHandlerInit+0x60>)
 8006950:	2000      	movs	r0, #0
 8006952:	f7ff ffb7 	bl	80068c4 <LmHandlerPackageRegister>
 8006956:	b900      	cbnz	r0, 800695a <LmHandlerInit+0x3a>
}
 8006958:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 800695a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800695e:	e7fb      	b.n	8006958 <LmHandlerInit+0x38>
 8006960:	200004f0 	.word	0x200004f0
 8006964:	2000052c 	.word	0x2000052c
 8006968:	08006185 	.word	0x08006185
 800696c:	0800675d 	.word	0x0800675d
 8006970:	08006831 	.word	0x08006831
 8006974:	080066c1 	.word	0x080066c1
 8006978:	20000518 	.word	0x20000518
 800697c:	0800b03d 	.word	0x0800b03d
 8006980:	20000074 	.word	0x20000074

08006984 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8006984:	4603      	mov	r3, r0
 8006986:	b140      	cbz	r0, 800699a <LmhpComplianceInit+0x16>
 8006988:	b139      	cbz	r1, 800699a <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800698a:	4807      	ldr	r0, [pc, #28]	; (80069a8 <LmhpComplianceInit+0x24>)
 800698c:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <LmhpComplianceInit+0x28>)
 8006990:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8006992:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8006994:	2201      	movs	r2, #1
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	4a02      	ldr	r2, [pc, #8]	; (80069a8 <LmhpComplianceInit+0x24>)
 800699e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 80069a0:	4a02      	ldr	r2, [pc, #8]	; (80069ac <LmhpComplianceInit+0x28>)
 80069a2:	7013      	strb	r3, [r2, #0]
    }
}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20000580 	.word	0x20000580
 80069ac:	20000554 	.word	0x20000554

080069b0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 80069b0:	4b01      	ldr	r3, [pc, #4]	; (80069b8 <LmhpComplianceIsInitialized+0x8>)
 80069b2:	7818      	ldrb	r0, [r3, #0]
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000554 	.word	0x20000554

080069bc <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 80069bc:	4b02      	ldr	r3, [pc, #8]	; (80069c8 <LmhpComplianceIsRunning+0xc>)
 80069be:	7818      	ldrb	r0, [r3, #0]
 80069c0:	b100      	cbz	r0, 80069c4 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 80069c2:	7858      	ldrb	r0, [r3, #1]
}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000554 	.word	0x20000554

080069cc <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 80069cc:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <LmhpComplianceOnMcpsConfirm+0x24>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	b12b      	cbz	r3, 80069de <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <LmhpComplianceOnMcpsConfirm+0x24>)
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	b113      	cbz	r3, 80069de <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80069d8:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d000      	beq.n	80069e0 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 80069de:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 80069e0:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0fb      	beq.n	80069de <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 80069e6:	4a02      	ldr	r2, [pc, #8]	; (80069f0 <LmhpComplianceOnMcpsConfirm+0x24>)
 80069e8:	8993      	ldrh	r3, [r2, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	8193      	strh	r3, [r2, #12]
 80069ee:	e7f6      	b.n	80069de <LmhpComplianceOnMcpsConfirm+0x12>
 80069f0:	20000554 	.word	0x20000554

080069f4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 80069f4:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <LmhpComplianceOnMlmeConfirm+0x24>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	b12b      	cbz	r3, 8006a06 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <LmhpComplianceOnMlmeConfirm+0x24>)
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	b113      	cbz	r3, 8006a06 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8006a00:	7803      	ldrb	r3, [r0, #0]
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d000      	beq.n	8006a08 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 8006a06:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8006a08:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <LmhpComplianceOnMlmeConfirm+0x24>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8006a0e:	7a02      	ldrb	r2, [r0, #8]
 8006a10:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8006a12:	7a42      	ldrb	r2, [r0, #9]
 8006a14:	741a      	strb	r2, [r3, #16]
 8006a16:	e7f6      	b.n	8006a06 <LmhpComplianceOnMlmeConfirm+0x12>
 8006a18:	20000554 	.word	0x20000554

08006a1c <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8006a1c:	4770      	bx	lr
	...

08006a20 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8006a20:	4b23      	ldr	r3, [pc, #140]	; (8006ab0 <LmhpComplianceTxProcess+0x90>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d03e      	beq.n	8006aa6 <LmhpComplianceTxProcess+0x86>
    if( ComplianceTestState.IsRunning == false )
 8006a28:	4b21      	ldr	r3, [pc, #132]	; (8006ab0 <LmhpComplianceTxProcess+0x90>)
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d03d      	beq.n	8006aac <LmhpComplianceTxProcess+0x8c>
{
 8006a30:	b530      	push	{r4, r5, lr}
 8006a32:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 8006a34:	4b1e      	ldr	r3, [pc, #120]	; (8006ab0 <LmhpComplianceTxProcess+0x90>)
 8006a36:	7b9b      	ldrb	r3, [r3, #14]
 8006a38:	b313      	cbz	r3, 8006a80 <LmhpComplianceTxProcess+0x60>
        ComplianceTestState.LinkCheck = false;
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <LmhpComplianceTxProcess+0x90>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8006a40:	2203      	movs	r2, #3
 8006a42:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	2105      	movs	r1, #5
 8006a48:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8006a4a:	7bd9      	ldrb	r1, [r3, #15]
 8006a4c:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8006a4e:	7c19      	ldrb	r1, [r3, #16]
 8006a50:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 8006a52:	2201      	movs	r2, #1
 8006a54:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 8006a56:	23e0      	movs	r3, #224	; 0xe0
 8006a58:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 8006a5c:	4c14      	ldr	r4, [pc, #80]	; (8006ab0 <LmhpComplianceTxProcess+0x90>)
 8006a5e:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 8006a60:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8006a64:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 8006a66:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8006a68:	4812      	ldr	r0, [pc, #72]	; (8006ab4 <LmhpComplianceTxProcess+0x94>)
 8006a6a:	f00a f971 	bl	8010d50 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8006a6e:	4b12      	ldr	r3, [pc, #72]	; (8006ab8 <LmhpComplianceTxProcess+0x98>)
 8006a70:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8006a72:	2301      	movs	r3, #1
 8006a74:	2200      	movs	r2, #0
 8006a76:	78e1      	ldrb	r1, [r4, #3]
 8006a78:	4668      	mov	r0, sp
 8006a7a:	47a8      	blx	r5
}
 8006a7c:	b003      	add	sp, #12
 8006a7e:	bd30      	pop	{r4, r5, pc}
        switch( ComplianceTestState.State )
 8006a80:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <LmhpComplianceTxProcess+0x90>)
 8006a82:	789b      	ldrb	r3, [r3, #2]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d005      	beq.n	8006a94 <LmhpComplianceTxProcess+0x74>
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d1e4      	bne.n	8006a56 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 8006a8c:	4b08      	ldr	r3, [pc, #32]	; (8006ab0 <LmhpComplianceTxProcess+0x90>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	709a      	strb	r2, [r3, #2]
            break;
 8006a92:	e7e0      	b.n	8006a56 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <LmhpComplianceTxProcess+0x90>)
 8006a96:	2202      	movs	r2, #2
 8006a98:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8006a9a:	899a      	ldrh	r2, [r3, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	0a11      	lsrs	r1, r2, #8
 8006aa0:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8006aa2:	705a      	strb	r2, [r3, #1]
            break;
 8006aa4:	e7d7      	b.n	8006a56 <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8006aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aaa:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8006aac:	2000      	movs	r0, #0
}
 8006aae:	4770      	bx	lr
 8006ab0:	20000554 	.word	0x20000554
 8006ab4:	20000568 	.word	0x20000568
 8006ab8:	20000090 	.word	0x20000090

08006abc <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8006abc:	4b8d      	ldr	r3, [pc, #564]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8116 	beq.w	8006cf2 <LmhpComplianceOnMcpsIndication+0x236>
    if( mcpsIndication->RxData == false )
 8006ac6:	7b43      	ldrb	r3, [r0, #13]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8112 	beq.w	8006cf2 <LmhpComplianceOnMcpsIndication+0x236>
    if ((ComplianceTestState.IsRunning == true) &&
 8006ace:	4b89      	ldr	r3, [pc, #548]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	b12b      	cbz	r3, 8006ae0 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 8006ad4:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 8006ad6:	b91a      	cbnz	r2, 8006ae0 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8006ad8:	4986      	ldr	r1, [pc, #536]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006ada:	898a      	ldrh	r2, [r1, #12]
 8006adc:	3201      	adds	r2, #1
 8006ade:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8006ae0:	78c2      	ldrb	r2, [r0, #3]
 8006ae2:	2ae0      	cmp	r2, #224	; 0xe0
 8006ae4:	f040 8105 	bne.w	8006cf2 <LmhpComplianceOnMcpsIndication+0x236>
{
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d140      	bne.n	8006b72 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006af0:	7b03      	ldrb	r3, [r0, #12]
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d001      	beq.n	8006afa <LmhpComplianceOnMcpsIndication+0x3e>
}
 8006af6:	b00c      	add	sp, #48	; 0x30
 8006af8:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006afa:	6883      	ldr	r3, [r0, #8]
 8006afc:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006afe:	2a01      	cmp	r2, #1
 8006b00:	d1f9      	bne.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006b02:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006b04:	2a01      	cmp	r2, #1
 8006b06:	d1f6      	bne.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006b08:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006b0a:	2a01      	cmp	r2, #1
 8006b0c:	d1f3      	bne.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8006b0e:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d1f0      	bne.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8006b14:	4b77      	ldr	r3, [pc, #476]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006b16:	2400      	movs	r4, #0
 8006b18:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8006b1a:	22e0      	movs	r2, #224	; 0xe0
 8006b1c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8006b1e:	2202      	movs	r2, #2
 8006b20:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8006b22:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8006b24:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8006b26:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8006b28:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8006b2e:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8006b30:	2304      	movs	r3, #4
 8006b32:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 8006b36:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006b3a:	a803      	add	r0, sp, #12
 8006b3c:	f002 fe0c 	bl	8009758 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8006b40:	4620      	mov	r0, r4
 8006b42:	f003 fa17 	bl	8009f74 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8006b46:	4b6c      	ldr	r3, [pc, #432]	; (8006cf8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	b103      	cbz	r3, 8006b50 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8006b4e:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8006b50:	4c6a      	ldr	r4, [pc, #424]	; (8006cfc <LmhpComplianceOnMcpsIndication+0x240>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	9200      	str	r2, [sp, #0]
 8006b56:	4b6a      	ldr	r3, [pc, #424]	; (8006d00 <LmhpComplianceOnMcpsIndication+0x244>)
 8006b58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f00a f83f 	bl	8010be0 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8006b62:	f241 3188 	movw	r1, #5000	; 0x1388
 8006b66:	4620      	mov	r0, r4
 8006b68:	f00a f938 	bl	8010ddc <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8006b6c:	f7ff ff58 	bl	8006a20 <LmhpComplianceTxProcess>
 8006b70:	e7c1      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8006b72:	6882      	ldr	r2, [r0, #8]
 8006b74:	7813      	ldrb	r3, [r2, #0]
 8006b76:	495f      	ldr	r1, [pc, #380]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006b78:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 8006b7a:	2b0a      	cmp	r3, #10
 8006b7c:	d8bb      	bhi.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
 8006b7e:	e8df f003 	tbb	[pc, r3]
 8006b82:	2206      	.short	0x2206
 8006b84:	47312b26 	.word	0x47312b26
 8006b88:	a49d6d4e 	.word	0xa49d6d4e
 8006b8c:	ae          	.byte	0xae
 8006b8d:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8006b8e:	485b      	ldr	r0, [pc, #364]	; (8006cfc <LmhpComplianceOnMcpsIndication+0x240>)
 8006b90:	f00a f884 	bl	8010c9c <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006b94:	4b57      	ldr	r3, [pc, #348]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8006b9a:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006ba2:	4c55      	ldr	r4, [pc, #340]	; (8006cf8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006bac:	a803      	add	r0, sp, #12
 8006bae:	f002 fdd3 	bl	8009758 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	7858      	ldrb	r0, [r3, #1]
 8006bb6:	f003 f9dd 	bl	8009f74 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d099      	beq.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 8006bc2:	4798      	blx	r3
            break;
 8006bc4:	e797      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 8006bc6:	4b4b      	ldr	r3, [pc, #300]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006bc8:	2202      	movs	r2, #2
 8006bca:	719a      	strb	r2, [r3, #6]
            break;
 8006bcc:	e793      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 8006bce:	4b49      	ldr	r3, [pc, #292]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006bd4:	709a      	strb	r2, [r3, #2]
            break;
 8006bd6:	e78e      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8006bd8:	4b46      	ldr	r3, [pc, #280]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006bde:	2201      	movs	r2, #1
 8006be0:	709a      	strb	r2, [r3, #2]
            break;
 8006be2:	e788      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8006be4:	7b01      	ldrb	r1, [r0, #12]
 8006be6:	4b43      	ldr	r3, [pc, #268]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006be8:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8006bea:	689c      	ldr	r4, [r3, #8]
 8006bec:	2304      	movs	r3, #4
 8006bee:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4a40      	ldr	r2, [pc, #256]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006bf4:	7952      	ldrb	r2, [r2, #5]
 8006bf6:	428a      	cmp	r2, r1
 8006bf8:	bf28      	it	cs
 8006bfa:	460a      	movcs	r2, r1
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	f67f af7a 	bls.w	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8006c02:	6882      	ldr	r2, [r0, #8]
 8006c04:	5cd2      	ldrb	r2, [r2, r3]
 8006c06:	3201      	adds	r2, #1
 8006c08:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	e7f0      	b.n	8006bf2 <LmhpComplianceOnMcpsIndication+0x136>
                mlmeReq.Type = MLME_LINK_CHECK;
 8006c10:	2304      	movs	r3, #4
 8006c12:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8006c16:	a803      	add	r0, sp, #12
 8006c18:	f003 f81a 	bl	8009c50 <LoRaMacMlmeRequest>
            break;
 8006c1c:	e76b      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8006c1e:	4837      	ldr	r0, [pc, #220]	; (8006cfc <LmhpComplianceOnMcpsIndication+0x240>)
 8006c20:	f00a f83c 	bl	8010c9c <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006c24:	4b33      	ldr	r3, [pc, #204]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8006c2a:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006c32:	4c31      	ldr	r4, [pc, #196]	; (8006cf8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006c3c:	a803      	add	r0, sp, #12
 8006c3e:	f002 fd8b 	bl	8009758 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	7858      	ldrb	r0, [r3, #1]
 8006c46:	f003 f995 	bl	8009f74 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	b103      	cbz	r3, 8006c52 <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8006c50:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8006c52:	4b2c      	ldr	r3, [pc, #176]	; (8006d04 <LmhpComplianceOnMcpsIndication+0x248>)
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	2002      	movs	r0, #2
 8006c58:	4798      	blx	r3
            break;
 8006c5a:	e74c      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 8006c5c:	7b03      	ldrb	r3, [r0, #12]
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d008      	beq.n	8006c74 <LmhpComplianceOnMcpsIndication+0x1b8>
                else if( mcpsIndication->BufferSize == 7 )
 8006c62:	2b07      	cmp	r3, #7
 8006c64:	d010      	beq.n	8006c88 <LmhpComplianceOnMcpsIndication+0x1cc>
                LoRaMacMlmeRequest( &mlmeReq );
 8006c66:	a803      	add	r0, sp, #12
 8006c68:	f002 fff2 	bl	8009c50 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8006c6c:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	709a      	strb	r2, [r3, #2]
            break;
 8006c72:	e740      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8006c74:	2305      	movs	r3, #5
 8006c76:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006c7a:	7851      	ldrb	r1, [r2, #1]
 8006c7c:	7893      	ldrb	r3, [r2, #2]
 8006c7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006c82:	f8ad 3010 	strh.w	r3, [sp, #16]
 8006c86:	e7ee      	b.n	8006c66 <LmhpComplianceOnMcpsIndication+0x1aa>
                    mlmeReq.Type = MLME_TXCW_1;
 8006c88:	2306      	movs	r3, #6
 8006c8a:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006c8e:	7851      	ldrb	r1, [r2, #1]
 8006c90:	7893      	ldrb	r3, [r2, #2]
 8006c92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006c96:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8006c9a:	78d1      	ldrb	r1, [r2, #3]
 8006c9c:	7913      	ldrb	r3, [r2, #4]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006ca4:	7952      	ldrb	r2, [r2, #5]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	2264      	movs	r2, #100	; 0x64
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8006cb0:	6883      	ldr	r3, [r0, #8]
 8006cb2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006cb6:	f88d 3018 	strb.w	r3, [sp, #24]
 8006cba:	e7d4      	b.n	8006c66 <LmhpComplianceOnMcpsIndication+0x1aa>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8006cbc:	230a      	movs	r3, #10
 8006cbe:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8006cc2:	a803      	add	r0, sp, #12
 8006cc4:	f002 ffc4 	bl	8009c50 <LoRaMacMlmeRequest>
            break;
 8006cc8:	e715      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8006cd0:	7853      	ldrb	r3, [r2, #1]
 8006cd2:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006cd6:	a803      	add	r0, sp, #12
 8006cd8:	f002 fd3e 	bl	8009758 <LoRaMacMibSetRequestConfirm>
            break;
 8006cdc:	e70b      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8006cde:	230d      	movs	r3, #13
 8006ce0:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8006ce4:	7853      	ldrb	r3, [r2, #1]
 8006ce6:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8006cea:	a803      	add	r0, sp, #12
 8006cec:	f002 ffb0 	bl	8009c50 <LoRaMacMlmeRequest>
            break;
 8006cf0:	e701      	b.n	8006af6 <LmhpComplianceOnMcpsIndication+0x3a>
 8006cf2:	4770      	bx	lr
 8006cf4:	20000554 	.word	0x20000554
 8006cf8:	20000580 	.word	0x20000580
 8006cfc:	20000568 	.word	0x20000568
 8006d00:	08006d09 	.word	0x08006d09
 8006d04:	20000090 	.word	0x20000090

08006d08 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8006d08:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8006d0a:	f7ff fe89 	bl	8006a20 <LmhpComplianceTxProcess>
}
 8006d0e:	bd08      	pop	{r3, pc}

08006d10 <LmhpCompliancePackageFactory>:
}
 8006d10:	4800      	ldr	r0, [pc, #0]	; (8006d14 <LmhpCompliancePackageFactory+0x4>)
 8006d12:	4770      	bx	lr
 8006d14:	20000090 	.word	0x20000090

08006d18 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8006d18:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8006d1a:	4a06      	ldr	r2, [pc, #24]	; (8006d34 <OnRadioRxError+0x1c>)
 8006d1c:	7813      	ldrb	r3, [r2, #0]
 8006d1e:	f043 0302 	orr.w	r3, r3, #2
 8006d22:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006d24:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <OnRadioRxError+0x20>)
 8006d26:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8006d2a:	b113      	cbz	r3, 8006d32 <OnRadioRxError+0x1a>
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	b103      	cbz	r3, 8006d32 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8006d30:	4798      	blx	r3
    }
}
 8006d32:	bd08      	pop	{r3, pc}
 8006d34:	20000584 	.word	0x20000584
 8006d38:	20000588 	.word	0x20000588

08006d3c <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006d3c:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <UpdateRxSlotIdleState+0x20>)
 8006d3e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d004      	beq.n	8006d50 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <UpdateRxSlotIdleState+0x24>)
 8006d48:	2206      	movs	r2, #6
 8006d4a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8006d4e:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8006d50:	4b03      	ldr	r3, [pc, #12]	; (8006d60 <UpdateRxSlotIdleState+0x24>)
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	20000a90 	.word	0x20000a90
 8006d60:	20000588 	.word	0x20000588

08006d64 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8006d64:	4b01      	ldr	r3, [pc, #4]	; (8006d6c <LoRaMacEnableRequests+0x8>)
 8006d66:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 8006d6a:	4770      	bx	lr
 8006d6c:	20000588 	.word	0x20000588

08006d70 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8006d70:	b530      	push	{r4, r5, lr}
 8006d72:	b089      	sub	sp, #36	; 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8006d74:	4b22      	ldr	r3, [pc, #136]	; (8006e00 <LoRaMacHandleIndicationEvents+0x90>)
 8006d76:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006d7a:	f013 0f08 	tst.w	r3, #8
 8006d7e:	d00e      	beq.n	8006d9e <LoRaMacHandleIndicationEvents+0x2e>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8006d80:	481f      	ldr	r0, [pc, #124]	; (8006e00 <LoRaMacHandleIndicationEvents+0x90>)
 8006d82:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8006d86:	f36f 03c3 	bfc	r3, #3, #1
 8006d8a:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8006d8e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8006d98:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8006d9c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8006d9e:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <LoRaMacHandleIndicationEvents+0x90>)
 8006da0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006da4:	f013 0f10 	tst.w	r3, #16
 8006da8:	d013      	beq.n	8006dd2 <LoRaMacHandleIndicationEvents+0x62>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8006daa:	2307      	movs	r3, #7
 8006dac:	f88d 3004 	strb.w	r3, [sp, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006db0:	2500      	movs	r5, #0
 8006db2:	f88d 5005 	strb.w	r5, [sp, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8006db6:	4c12      	ldr	r4, [pc, #72]	; (8006e00 <LoRaMacHandleIndicationEvents+0x90>)
 8006db8:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f204 417c 	addw	r1, r4, #1148	; 0x47c
 8006dc2:	a801      	add	r0, sp, #4
 8006dc4:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8006dc6:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8006dca:	f365 1304 	bfi	r3, r5, #4, #1
 8006dce:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <LoRaMacHandleIndicationEvents+0x90>)
 8006dd4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006dd8:	f013 0f02 	tst.w	r3, #2
 8006ddc:	d00e      	beq.n	8006dfc <LoRaMacHandleIndicationEvents+0x8c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8006dde:	4808      	ldr	r0, [pc, #32]	; (8006e00 <LoRaMacHandleIndicationEvents+0x90>)
 8006de0:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8006de4:	f36f 0341 	bfc	r3, #1, #1
 8006de8:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8006dec:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8006df6:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8006dfa:	4798      	blx	r3
    }
}
 8006dfc:	b009      	add	sp, #36	; 0x24
 8006dfe:	bd30      	pop	{r4, r5, pc}
 8006e00:	20000588 	.word	0x20000588

08006e04 <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8006e04:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <LoRaMacCheckForRxAbort+0x20>)
 8006e06:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8006e0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e0e:	d008      	beq.n	8006e22 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8006e10:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006e14:	4a03      	ldr	r2, [pc, #12]	; (8006e24 <LoRaMacCheckForRxAbort+0x20>)
 8006e16:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006e1a:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8006e1e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8006e22:	4770      	bx	lr
 8006e24:	20000588 	.word	0x20000588

08006e28 <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006e28:	4a03      	ldr	r2, [pc, #12]	; (8006e38 <SetMlmeScheduleUplinkIndication+0x10>)
 8006e2a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8006e2e:	f043 0310 	orr.w	r3, r3, #16
 8006e32:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8006e36:	4770      	bx	lr
 8006e38:	20000588 	.word	0x20000588

08006e3c <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <CalculateBackOff+0x1c>)
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	b94b      	cbnz	r3, 8006e56 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8006e42:	4a05      	ldr	r2, [pc, #20]	; (8006e58 <CalculateBackOff+0x1c>)
 8006e44:	f8b2 3102 	ldrh.w	r3, [r2, #258]	; 0x102
 8006e48:	4904      	ldr	r1, [pc, #16]	; (8006e5c <CalculateBackOff+0x20>)
 8006e4a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	fb01 f303 	mul.w	r3, r1, r3
 8006e54:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8006e56:	4770      	bx	lr
 8006e58:	20000a90 	.word	0x20000a90
 8006e5c:	20000588 	.word	0x20000588

08006e60 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8006e60:	b508      	push	{r3, lr}
 8006e62:	4684      	mov	ip, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8006e68:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <SetTxContinuousWave1+0x24>)
 8006e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6c:	4662      	mov	r2, ip
 8006e6e:	b249      	sxtb	r1, r1
 8006e70:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8006e72:	4a05      	ldr	r2, [pc, #20]	; (8006e88 <SetTxContinuousWave1+0x28>)
 8006e74:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8006e78:	f043 0302 	orr.w	r3, r3, #2
 8006e7c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8006e80:	2000      	movs	r0, #0
 8006e82:	bd08      	pop	{r3, pc}
 8006e84:	08011ea4 	.word	0x08011ea4
 8006e88:	20000588 	.word	0x20000588

08006e8c <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 8006e8c:	4800      	ldr	r0, [pc, #0]	; (8006e90 <GetNvmData+0x4>)
 8006e8e:	4770      	bx	lr
 8006e90:	20000a90 	.word	0x20000a90

08006e94 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8006e94:	4602      	mov	r2, r0
 8006e96:	b1f8      	cbz	r0, 8006ed8 <DetermineFrameType+0x44>
 8006e98:	b301      	cbz	r1, 8006edc <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8006e9a:	7b03      	ldrb	r3, [r0, #12]
 8006e9c:	f013 030f 	ands.w	r3, r3, #15
 8006ea0:	d005      	beq.n	8006eae <DetermineFrameType+0x1a>
 8006ea2:	f890 0020 	ldrb.w	r0, [r0, #32]
 8006ea6:	b110      	cbz	r0, 8006eae <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	7008      	strb	r0, [r1, #0]
 8006eac:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8006eae:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8006eb2:	b910      	cbnz	r0, 8006eba <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	700b      	strb	r3, [r1, #0]
 8006eb8:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8006eba:	b92b      	cbnz	r3, 8006ec8 <DetermineFrameType+0x34>
 8006ebc:	f892 0020 	ldrb.w	r0, [r2, #32]
 8006ec0:	b910      	cbnz	r0, 8006ec8 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	700b      	strb	r3, [r1, #0]
 8006ec6:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8006ec8:	b953      	cbnz	r3, 8006ee0 <DetermineFrameType+0x4c>
 8006eca:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006ece:	b14a      	cbz	r2, 8006ee4 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8006ed4:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8006ed6:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8006ed8:	2003      	movs	r0, #3
 8006eda:	4770      	bx	lr
 8006edc:	2003      	movs	r0, #3
 8006ede:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8006ee0:	2017      	movs	r0, #23
 8006ee2:	4770      	bx	lr
 8006ee4:	2017      	movs	r0, #23
}
 8006ee6:	4770      	bx	lr

08006ee8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <CheckRetransUnconfirmedUplink+0x40>)
 8006eea:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8006eee:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <CheckRetransUnconfirmedUplink+0x44>)
 8006ef0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d20f      	bcs.n	8006f18 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006ef8:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <CheckRetransUnconfirmedUplink+0x40>)
 8006efa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006efe:	f013 0f02 	tst.w	r3, #2
 8006f02:	d00b      	beq.n	8006f1c <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8006f04:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <CheckRetransUnconfirmedUplink+0x44>)
 8006f06:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8006f0a:	b14b      	cbz	r3, 8006f20 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8006f0c:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <CheckRetransUnconfirmedUplink+0x40>)
 8006f0e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8006f12:	b13b      	cbz	r3, 8006f24 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8006f14:	2000      	movs	r0, #0
 8006f16:	4770      	bx	lr
        return true;
 8006f18:	2001      	movs	r0, #1
 8006f1a:	4770      	bx	lr
    return false;
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	4770      	bx	lr
            return true;
 8006f20:	2001      	movs	r0, #1
 8006f22:	4770      	bx	lr
                return true;
 8006f24:	2001      	movs	r0, #1
}
 8006f26:	4770      	bx	lr
 8006f28:	20000588 	.word	0x20000588
 8006f2c:	20000a90 	.word	0x20000a90

08006f30 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8006f30:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <CheckRetransConfirmedUplink+0x2c>)
 8006f32:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8006f36:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d209      	bcs.n	8006f52 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006f3e:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <CheckRetransConfirmedUplink+0x2c>)
 8006f40:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006f44:	f013 0f02 	tst.w	r3, #2
 8006f48:	d005      	beq.n	8006f56 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8006f4a:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <CheckRetransConfirmedUplink+0x2c>)
 8006f4c:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8006f50:	4770      	bx	lr
        return true;
 8006f52:	2001      	movs	r0, #1
 8006f54:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8006f56:	2000      	movs	r0, #0
}
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000588 	.word	0x20000588

08006f60 <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <StopRetransmission+0x48>)
 8006f62:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006f66:	f013 0f02 	tst.w	r3, #2
 8006f6a:	d004      	beq.n	8006f76 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <StopRetransmission+0x48>)
 8006f6e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d907      	bls.n	8006f86 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <StopRetransmission+0x4c>)
 8006f78:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006f7c:	b11b      	cbz	r3, 8006f86 <StopRetransmission+0x26>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8006f7e:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <StopRetransmission+0x4c>)
 8006f80:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006f82:	3301      	adds	r3, #1
 8006f84:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8006f86:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <StopRetransmission+0x48>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8006f8e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8006f92:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006f96:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8006f9a:	f022 0202 	bic.w	r2, r2, #2
 8006f9e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	20000588 	.word	0x20000588
 8006fac:	20000a90 	.word	0x20000a90

08006fb0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8006fb0:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8006fb2:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <CallNvmDataChangeCallback+0x14>)
 8006fb4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8006fb8:	b113      	cbz	r3, 8006fc0 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8006fba:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8006fbc:	b103      	cbz	r3, 8006fc0 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8006fbe:	4798      	blx	r3
    }
}
 8006fc0:	bd08      	pop	{r3, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000588 	.word	0x20000588

08006fc8 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8006fc8:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <IsRequestPending+0x14>)
 8006fca:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 8006fce:	f010 0005 	ands.w	r0, r0, #5
 8006fd2:	d100      	bne.n	8006fd6 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8006fd4:	4770      	bx	lr
        return 1;
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	e7fc      	b.n	8006fd4 <IsRequestPending+0xc>
 8006fda:	bf00      	nop
 8006fdc:	20000588 	.word	0x20000588

08006fe0 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8006fe0:	4a13      	ldr	r2, [pc, #76]	; (8007030 <AckTimeoutRetriesProcess+0x50>)
 8006fe2:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 8006fe6:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d207      	bcs.n	8006ffe <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 8006fee:	3301      	adds	r3, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	4a0f      	ldr	r2, [pc, #60]	; (8007030 <AckTimeoutRetriesProcess+0x50>)
 8006ff4:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8006ff8:	f013 0f01 	tst.w	r3, #1
 8006ffc:	d100      	bne.n	8007000 <AckTimeoutRetriesProcess+0x20>
 8006ffe:	4770      	bx	lr
{
 8007000:	b510      	push	{r4, lr}
 8007002:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007004:	2322      	movs	r3, #34	; 0x22
 8007006:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800700a:	4c0a      	ldr	r4, [pc, #40]	; (8007034 <AckTimeoutRetriesProcess+0x54>)
 800700c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8007010:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007014:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8007018:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800701c:	a902      	add	r1, sp, #8
 800701e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007022:	f004 f81a 	bl	800b05a <RegionGetPhyParam>
 8007026:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8007028:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 800702c:	b004      	add	sp, #16
 800702e:	bd10      	pop	{r4, pc}
 8007030:	20000588 	.word	0x20000588
 8007034:	20000a90 	.word	0x20000a90

08007038 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007038:	b500      	push	{lr}
 800703a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800703c:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800703e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8007042:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8007046:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800704a:	220d      	movs	r2, #13
 800704c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007050:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007054:	b113      	cbz	r3, 800705c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007056:	230e      	movs	r3, #14
 8007058:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800705c:	a902      	add	r1, sp, #8
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007060:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007064:	f003 fff9 	bl	800b05a <RegionGetPhyParam>
 8007068:	9001      	str	r0, [sp, #4]
}
 800706a:	b2c0      	uxtb	r0, r0
 800706c:	b005      	add	sp, #20
 800706e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007072:	bf00      	nop
 8007074:	20000a90 	.word	0x20000a90

08007078 <ValidatePayloadLength>:
{
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4605      	mov	r5, r0
 800707c:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800707e:	4608      	mov	r0, r1
 8007080:	f7ff ffda 	bl	8007038 <GetMaxAppPayloadWithoutFOptsLength>
 8007084:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8007086:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007088:	4293      	cmp	r3, r2
 800708a:	d303      	bcc.n	8007094 <ValidatePayloadLength+0x1c>
 800708c:	2aff      	cmp	r2, #255	; 0xff
 800708e:	d903      	bls.n	8007098 <ValidatePayloadLength+0x20>
    return false;
 8007090:	2000      	movs	r0, #0
 8007092:	e000      	b.n	8007096 <ValidatePayloadLength+0x1e>
 8007094:	2000      	movs	r0, #0
}
 8007096:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8007098:	2001      	movs	r0, #1
 800709a:	e7fc      	b.n	8007096 <ValidatePayloadLength+0x1e>

0800709c <ProcessRadioTxDone>:
{
 800709c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709e:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80070a0:	4b39      	ldr	r3, [pc, #228]	; (8007188 <ProcessRadioTxDone+0xec>)
 80070a2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d002      	beq.n	80070b0 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 80070aa:	4b38      	ldr	r3, [pc, #224]	; (800718c <ProcessRadioTxDone+0xf0>)
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80070b0:	4c37      	ldr	r4, [pc, #220]	; (8007190 <ProcessRadioTxDone+0xf4>)
 80070b2:	f504 7560 	add.w	r5, r4, #896	; 0x380
 80070b6:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 80070ba:	4628      	mov	r0, r5
 80070bc:	f009 fe8e 	bl	8010ddc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80070c0:	4628      	mov	r0, r5
 80070c2:	f009 fe45 	bl	8010d50 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80070c6:	f504 7566 	add.w	r5, r4, #920	; 0x398
 80070ca:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f009 fe84 	bl	8010ddc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80070d4:	4628      	mov	r0, r5
 80070d6:	f009 fe3b 	bl	8010d50 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 80070da:	4b2b      	ldr	r3, [pc, #172]	; (8007188 <ProcessRadioTxDone+0xec>)
 80070dc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d002      	beq.n	80070ea <ProcessRadioTxDone+0x4e>
 80070e4:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 80070e8:	b1ab      	cbz	r3, 8007116 <ProcessRadioTxDone+0x7a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80070ea:	2316      	movs	r3, #22
 80070ec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80070f0:	a90a      	add	r1, sp, #40	; 0x28
 80070f2:	4b25      	ldr	r3, [pc, #148]	; (8007188 <ProcessRadioTxDone+0xec>)
 80070f4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80070f8:	f003 ffaf 	bl	800b05a <RegionGetPhyParam>
 80070fc:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80070fe:	4c24      	ldr	r4, [pc, #144]	; (8007190 <ProcessRadioTxDone+0xf4>)
 8007100:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007104:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 8007108:	4401      	add	r1, r0
 800710a:	4620      	mov	r0, r4
 800710c:	f009 fe66 	bl	8010ddc <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8007110:	4620      	mov	r0, r4
 8007112:	f009 fe1d 	bl	8010d50 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8007116:	4b1f      	ldr	r3, [pc, #124]	; (8007194 <ProcessRadioTxDone+0xf8>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4c1b      	ldr	r4, [pc, #108]	; (8007188 <ProcessRadioTxDone+0xec>)
 800711c:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800711e:	4f1c      	ldr	r7, [pc, #112]	; (8007190 <ProcessRadioTxDone+0xf4>)
 8007120:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 8007124:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8007128:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800712a:	ae0c      	add	r6, sp, #48	; 0x30
 800712c:	4630      	mov	r0, r6
 800712e:	f009 fce9 	bl	8010b04 <SysTimeGetMcuTime>
 8007132:	ad02      	add	r5, sp, #8
 8007134:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800713e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8007142:	4628      	mov	r0, r5
 8007144:	f009 fc7b 	bl	8010a3e <SysTimeSub>
 8007148:	ab07      	add	r3, sp, #28
 800714a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800714e:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8007152:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8007156:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8007158:	2301      	movs	r3, #1
 800715a:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800715e:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8007162:	b90b      	cbnz	r3, 8007168 <ProcessRadioTxDone+0xcc>
        txDone.Joined  = false;
 8007164:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007168:	a904      	add	r1, sp, #16
 800716a:	4b07      	ldr	r3, [pc, #28]	; (8007188 <ProcessRadioTxDone+0xec>)
 800716c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007170:	f003 ff8b 	bl	800b08a <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8007174:	4b06      	ldr	r3, [pc, #24]	; (8007190 <ProcessRadioTxDone+0xf4>)
 8007176:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800717a:	b91b      	cbnz	r3, 8007184 <ProcessRadioTxDone+0xe8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800717c:	4b04      	ldr	r3, [pc, #16]	; (8007190 <ProcessRadioTxDone+0xf4>)
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8007184:	b00f      	add	sp, #60	; 0x3c
 8007186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007188:	20000a90 	.word	0x20000a90
 800718c:	08011ea4 	.word	0x08011ea4
 8007190:	20000588 	.word	0x20000588
 8007194:	200010b0 	.word	0x200010b0

08007198 <OnAckTimeoutTimerEvent>:
{
 8007198:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800719a:	4c10      	ldr	r4, [pc, #64]	; (80071dc <OnAckTimeoutTimerEvent+0x44>)
 800719c:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 80071a0:	f009 fd7c 	bl	8010c9c <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80071a4:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 80071a8:	b113      	cbz	r3, 80071b0 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 80071aa:	2201      	movs	r2, #1
 80071ac:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <OnAckTimeoutTimerEvent+0x48>)
 80071b2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d007      	beq.n	80071ca <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80071ba:	4b08      	ldr	r3, [pc, #32]	; (80071dc <OnAckTimeoutTimerEvent+0x44>)
 80071bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80071c0:	b113      	cbz	r3, 80071c8 <OnAckTimeoutTimerEvent+0x30>
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	b103      	cbz	r3, 80071c8 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80071c6:	4798      	blx	r3
}
 80071c8:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 80071ca:	4a04      	ldr	r2, [pc, #16]	; (80071dc <OnAckTimeoutTimerEvent+0x44>)
 80071cc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80071d0:	f043 0320 	orr.w	r3, r3, #32
 80071d4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80071d8:	e7ef      	b.n	80071ba <OnAckTimeoutTimerEvent+0x22>
 80071da:	bf00      	nop
 80071dc:	20000588 	.word	0x20000588
 80071e0:	20000a90 	.word	0x20000a90

080071e4 <PrepareRxDoneAbort>:
{
 80071e4:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80071e6:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <PrepareRxDoneAbort+0x3c>)
 80071e8:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80071ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071f0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80071f4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80071f8:	b973      	cbnz	r3, 8007218 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80071fa:	4b09      	ldr	r3, [pc, #36]	; (8007220 <PrepareRxDoneAbort+0x3c>)
 80071fc:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8007200:	f042 0202 	orr.w	r2, r2, #2
 8007204:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	f042 0220 	orr.w	r2, r2, #32
 800720e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8007212:	f7ff fd93 	bl	8006d3c <UpdateRxSlotIdleState>
}
 8007216:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8007218:	2000      	movs	r0, #0
 800721a:	f7ff ffbd 	bl	8007198 <OnAckTimeoutTimerEvent>
 800721e:	e7ec      	b.n	80071fa <PrepareRxDoneAbort+0x16>
 8007220:	20000588 	.word	0x20000588

08007224 <LoRaMacCheckForBeaconAcquisition>:
{
 8007224:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007226:	200c      	movs	r0, #12
 8007228:	f003 f9b2 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
 800722c:	b188      	cbz	r0, 8007252 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800722e:	4b0b      	ldr	r3, [pc, #44]	; (800725c <LoRaMacCheckForBeaconAcquisition+0x38>)
 8007230:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007234:	f010 0f01 	tst.w	r0, #1
 8007238:	d10d      	bne.n	8007256 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800723a:	f010 0004 	ands.w	r0, r0, #4
 800723e:	d009      	beq.n	8007254 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007240:	461a      	mov	r2, r3
 8007242:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007246:	f023 0302 	bic.w	r3, r3, #2
 800724a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800724e:	2001      	movs	r0, #1
 8007250:	e000      	b.n	8007254 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8007252:	2000      	movs	r0, #0
}
 8007254:	bd08      	pop	{r3, pc}
    return 0x00;
 8007256:	2000      	movs	r0, #0
 8007258:	e7fc      	b.n	8007254 <LoRaMacCheckForBeaconAcquisition+0x30>
 800725a:	bf00      	nop
 800725c:	20000588 	.word	0x20000588

08007260 <GetFCntDown>:
{
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	9c05      	ldr	r4, [sp, #20]
 8007264:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8007266:	b302      	cbz	r2, 80072aa <GetFCntDown+0x4a>
 8007268:	4694      	mov	ip, r2
 800726a:	b304      	cbz	r4, 80072ae <GetFCntDown+0x4e>
 800726c:	b30d      	cbz	r5, 80072b2 <GetFCntDown+0x52>
    switch( addrID )
 800726e:	b188      	cbz	r0, 8007294 <GetFCntDown+0x34>
 8007270:	2801      	cmp	r0, #1
 8007272:	d120      	bne.n	80072b6 <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 8007274:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007278:	2a01      	cmp	r2, #1
 800727a:	d002      	beq.n	8007282 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800727c:	2303      	movs	r3, #3
 800727e:	7023      	strb	r3, [r4, #0]
 8007280:	e00a      	b.n	8007298 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8007282:	b121      	cbz	r1, 800728e <GetFCntDown+0x2e>
 8007284:	2903      	cmp	r1, #3
 8007286:	d002      	beq.n	800728e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8007288:	2301      	movs	r3, #1
 800728a:	7023      	strb	r3, [r4, #0]
 800728c:	e004      	b.n	8007298 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800728e:	2302      	movs	r3, #2
 8007290:	7023      	strb	r3, [r4, #0]
 8007292:	e001      	b.n	8007298 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8007294:	2304      	movs	r3, #4
 8007296:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8007298:	462b      	mov	r3, r5
 800729a:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 800729e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80072a2:	7820      	ldrb	r0, [r4, #0]
 80072a4:	f003 fb92 	bl	800a9cc <LoRaMacCryptoGetFCntDown>
}
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80072aa:	200a      	movs	r0, #10
 80072ac:	e7fc      	b.n	80072a8 <GetFCntDown+0x48>
 80072ae:	200a      	movs	r0, #10
 80072b0:	e7fa      	b.n	80072a8 <GetFCntDown+0x48>
 80072b2:	200a      	movs	r0, #10
 80072b4:	e7f8      	b.n	80072a8 <GetFCntDown+0x48>
    switch( addrID )
 80072b6:	2005      	movs	r0, #5
 80072b8:	e7f6      	b.n	80072a8 <GetFCntDown+0x48>

080072ba <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80072ba:	2801      	cmp	r0, #1
 80072bc:	d900      	bls.n	80072c0 <RemoveMacCommands+0x6>
 80072be:	4770      	bx	lr
{
 80072c0:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 80072c2:	2a01      	cmp	r2, #1
 80072c4:	d105      	bne.n	80072d2 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 80072c6:	f011 0f20 	tst.w	r1, #32
 80072ca:	d004      	beq.n	80072d6 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80072cc:	f002 fffc 	bl	800a2c8 <LoRaMacCommandsRemoveStickyAnsCmds>
 80072d0:	e001      	b.n	80072d6 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80072d2:	f002 fff9 	bl	800a2c8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80072d6:	bd08      	pop	{r3, pc}

080072d8 <ProcessMacCommands>:
{
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	b08f      	sub	sp, #60	; 0x3c
 80072de:	4605      	mov	r5, r0
 80072e0:	460c      	mov	r4, r1
 80072e2:	4616      	mov	r6, r2
 80072e4:	4698      	mov	r8, r3
    uint8_t status = 0;
 80072e6:	2700      	movs	r7, #0
 80072e8:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80072ec:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 80072f0:	42b4      	cmp	r4, r6
 80072f2:	f080 82ca 	bcs.w	800788a <ProcessMacCommands+0x5b2>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80072f6:	5d28      	ldrb	r0, [r5, r4]
 80072f8:	f003 f84e 	bl	800a398 <LoRaMacCommandsGetCmdSize>
 80072fc:	4420      	add	r0, r4
 80072fe:	42b0      	cmp	r0, r6
 8007300:	f300 82c3 	bgt.w	800788a <ProcessMacCommands+0x5b2>
        switch( payload[macIndex++] )
 8007304:	f104 0901 	add.w	r9, r4, #1
 8007308:	fa5f f989 	uxtb.w	r9, r9
 800730c:	5d29      	ldrb	r1, [r5, r4]
 800730e:	3902      	subs	r1, #2
 8007310:	2911      	cmp	r1, #17
 8007312:	f200 82ba 	bhi.w	800788a <ProcessMacCommands+0x5b2>
 8007316:	e8df f011 	tbh	[pc, r1, lsl #1]
 800731a:	0012      	.short	0x0012
 800731c:	00910029 	.word	0x00910029
 8007320:	00ef00a5 	.word	0x00ef00a5
 8007324:	01410107 	.word	0x01410107
 8007328:	01b1015a 	.word	0x01b1015a
 800732c:	02b802b8 	.word	0x02b802b8
 8007330:	02b801e4 	.word	0x02b801e4
 8007334:	024402b8 	.word	0x024402b8
 8007338:	027b025b 	.word	0x027b025b
 800733c:	0297      	.short	0x0297
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800733e:	2004      	movs	r0, #4
 8007340:	f003 f926 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
 8007344:	b908      	cbnz	r0, 800734a <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 8007346:	464c      	mov	r4, r9
 8007348:	e7d2      	b.n	80072f0 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800734a:	2104      	movs	r1, #4
 800734c:	2000      	movs	r0, #0
 800734e:	f003 f8d3 	bl	800a4f8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007352:	1ca3      	adds	r3, r4, #2
 8007354:	b2db      	uxtb	r3, r3
 8007356:	f815 1009 	ldrb.w	r1, [r5, r9]
 800735a:	4ac4      	ldr	r2, [pc, #784]	; (800766c <ProcessMacCommands+0x394>)
 800735c:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007360:	3403      	adds	r4, #3
 8007362:	b2e4      	uxtb	r4, r4
 8007364:	5ceb      	ldrb	r3, [r5, r3]
 8007366:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 800736a:	e7c1      	b.n	80072f0 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 800736c:	2300      	movs	r3, #0
 800736e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8007372:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8007376:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800737a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800737e:	b10f      	cbz	r7, 8007384 <ProcessMacCommands+0xac>
                break;
 8007380:	464c      	mov	r4, r9
 8007382:	e7b5      	b.n	80072f0 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007384:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8007388:	442b      	add	r3, r5
 800738a:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800738c:	eba6 0309 	sub.w	r3, r6, r9
 8007390:	3301      	adds	r3, #1
 8007392:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007396:	48b6      	ldr	r0, [pc, #728]	; (8007670 <ProcessMacCommands+0x398>)
 8007398:	f890 30fe 	ldrb.w	r3, [r0, #254]	; 0xfe
 800739c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80073a0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80073a4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80073a8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 80073ac:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80073b0:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 80073b4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80073b8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80073bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80073c0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80073c4:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80073c6:	ab05      	add	r3, sp, #20
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	ab03      	add	r3, sp, #12
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	f10d 030b 	add.w	r3, sp, #11
 80073d2:	f10d 020a 	add.w	r2, sp, #10
 80073d6:	a907      	add	r1, sp, #28
 80073d8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80073dc:	f003 fed5 	bl	800b18a <RegionLinkAdrReq>
 80073e0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 80073e4:	f000 0007 	and.w	r0, r0, #7
 80073e8:	2807      	cmp	r0, #7
 80073ea:	d001      	beq.n	80073f0 <ProcessMacCommands+0x118>
{
 80073ec:	2400      	movs	r4, #0
 80073ee:	e015      	b.n	800741c <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80073f0:	4b9f      	ldr	r3, [pc, #636]	; (8007670 <ProcessMacCommands+0x398>)
 80073f2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80073f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80073fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80073fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8007402:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8007406:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800740a:	e7ef      	b.n	80073ec <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800740c:	2201      	movs	r2, #1
 800740e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8007412:	2003      	movs	r0, #3
 8007414:	f002 fef8 	bl	800a208 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8007418:	3401      	adds	r4, #1
 800741a:	b2e4      	uxtb	r4, r4
 800741c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8007420:	4b94      	ldr	r3, [pc, #592]	; (8007674 <ProcessMacCommands+0x39c>)
 8007422:	fba3 1302 	umull	r1, r3, r3, r2
 8007426:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800742a:	d3ef      	bcc.n	800740c <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 800742c:	eb02 0309 	add.w	r3, r2, r9
 8007430:	b2db      	uxtb	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	fa5f f983 	uxtb.w	r9, r3
                    adrBlockFound = true;
 8007438:	2701      	movs	r7, #1
 800743a:	e7a1      	b.n	8007380 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800743c:	3402      	adds	r4, #2
 800743e:	b2e4      	uxtb	r4, r4
 8007440:	f815 3009 	ldrb.w	r3, [r5, r9]
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	4989      	ldr	r1, [pc, #548]	; (8007670 <ProcessMacCommands+0x398>)
 800744a:	f881 30ff 	strb.w	r3, [r1, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800744e:	2201      	movs	r2, #1
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007458:	2200      	movs	r2, #0
 800745a:	a90b      	add	r1, sp, #44	; 0x2c
 800745c:	2004      	movs	r0, #4
 800745e:	f002 fed3 	bl	800a208 <LoRaMacCommandsAddCmd>
                break;
 8007462:	e745      	b.n	80072f0 <ProcessMacCommands+0x18>
                status = 0x07;
 8007464:	2307      	movs	r3, #7
 8007466:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800746a:	f815 3009 	ldrb.w	r3, [r5, r9]
 800746e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007472:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8007476:	f915 3009 	ldrsb.w	r3, [r5, r9]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8007482:	1ca3      	adds	r3, r4, #2
 8007484:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007486:	1ce1      	adds	r1, r4, #3
 8007488:	b2c9      	uxtb	r1, r1
 800748a:	5ceb      	ldrb	r3, [r5, r3]
 800748c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800748e:	1d22      	adds	r2, r4, #4
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	5c69      	ldrb	r1, [r5, r1]
 8007494:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007498:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800749a:	3405      	adds	r4, #5
 800749c:	b2e4      	uxtb	r4, r4
 800749e:	5caa      	ldrb	r2, [r5, r2]
 80074a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074a4:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 80074a6:	2264      	movs	r2, #100	; 0x64
 80074a8:	fb02 f303 	mul.w	r3, r2, r3
 80074ac:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80074ae:	a907      	add	r1, sp, #28
 80074b0:	4b6f      	ldr	r3, [pc, #444]	; (8007670 <ProcessMacCommands+0x398>)
 80074b2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80074b6:	f003 fe84 	bl	800b1c2 <RegionRxParamSetupReq>
 80074ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 80074be:	f000 0307 	and.w	r3, r0, #7
 80074c2:	2b07      	cmp	r3, #7
 80074c4:	d009      	beq.n	80074da <ProcessMacCommands+0x202>
                macCmdPayload[0] = status;
 80074c6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80074ca:	2201      	movs	r2, #1
 80074cc:	a90b      	add	r1, sp, #44	; 0x2c
 80074ce:	2005      	movs	r0, #5
 80074d0:	f002 fe9a 	bl	800a208 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 80074d4:	f7ff fca8 	bl	8006e28 <SetMlmeScheduleUplinkIndication>
                break;
 80074d8:	e70a      	b.n	80072f0 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80074da:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80074de:	4b64      	ldr	r3, [pc, #400]	; (8007670 <ProcessMacCommands+0x398>)
 80074e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80074e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80074e8:	9a08      	ldr	r2, [sp, #32]
 80074ea:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80074ec:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80074ee:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80074f2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80074f6:	e7e6      	b.n	80074c6 <ProcessMacCommands+0x1ee>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80074f8:	4b5c      	ldr	r3, [pc, #368]	; (800766c <ProcessMacCommands+0x394>)
 80074fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80074fe:	b17b      	cbz	r3, 8007520 <ProcessMacCommands+0x248>
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	b17b      	cbz	r3, 8007524 <ProcessMacCommands+0x24c>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8007504:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8007506:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800750a:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800750e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8007512:	2202      	movs	r2, #2
 8007514:	a90b      	add	r1, sp, #44	; 0x2c
 8007516:	2006      	movs	r0, #6
 8007518:	f002 fe76 	bl	800a208 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800751c:	464c      	mov	r4, r9
                break;
 800751e:	e6e7      	b.n	80072f0 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8007520:	20ff      	movs	r0, #255	; 0xff
 8007522:	e7f0      	b.n	8007506 <ProcessMacCommands+0x22e>
 8007524:	20ff      	movs	r0, #255	; 0xff
 8007526:	e7ee      	b.n	8007506 <ProcessMacCommands+0x22e>
                status = 0x03;
 8007528:	2303      	movs	r3, #3
 800752a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800752e:	1ca3      	adds	r3, r4, #2
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f915 2009 	ldrsb.w	r2, [r5, r9]
 8007536:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800753a:	aa07      	add	r2, sp, #28
 800753c:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800753e:	1ce2      	adds	r2, r4, #3
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	5ceb      	ldrb	r3, [r5, r3]
 8007544:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007546:	1d21      	adds	r1, r4, #4
 8007548:	b2c9      	uxtb	r1, r1
 800754a:	5caa      	ldrb	r2, [r5, r2]
 800754c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007550:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007552:	1d62      	adds	r2, r4, #5
 8007554:	b2d2      	uxtb	r2, r2
 8007556:	5c69      	ldrb	r1, [r5, r1]
 8007558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800755c:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800755e:	2164      	movs	r1, #100	; 0x64
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800756a:	3406      	adds	r4, #6
 800756c:	b2e4      	uxtb	r4, r4
 800756e:	56ab      	ldrsb	r3, [r5, r2]
 8007570:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8007574:	a905      	add	r1, sp, #20
 8007576:	4b3e      	ldr	r3, [pc, #248]	; (8007670 <ProcessMacCommands+0x398>)
 8007578:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800757c:	f003 fe30 	bl	800b1e0 <RegionNewChannelReq>
 8007580:	b2c3      	uxtb	r3, r0
 8007582:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8007586:	2800      	cmp	r0, #0
 8007588:	f6ff aeb2 	blt.w	80072f0 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 800758c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8007590:	2201      	movs	r2, #1
 8007592:	a90b      	add	r1, sp, #44	; 0x2c
 8007594:	2007      	movs	r0, #7
 8007596:	f002 fe37 	bl	800a208 <LoRaMacCommandsAddCmd>
                break;
 800759a:	e6a9      	b.n	80072f0 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800759c:	3402      	adds	r4, #2
 800759e:	b2e4      	uxtb	r4, r4
 80075a0:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 80075a4:	f013 030f 	ands.w	r3, r3, #15
 80075a8:	d100      	bne.n	80075ac <ProcessMacCommands+0x2d4>
                    delay++;
 80075aa:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80075ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075b0:	fb02 f303 	mul.w	r3, r2, r3
 80075b4:	4a2e      	ldr	r2, [pc, #184]	; (8007670 <ProcessMacCommands+0x398>)
 80075b6:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80075b8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80075bc:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80075be:	2200      	movs	r2, #0
 80075c0:	a90b      	add	r1, sp, #44	; 0x2c
 80075c2:	2008      	movs	r0, #8
 80075c4:	f002 fe20 	bl	800a208 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 80075c8:	f7ff fc2e 	bl	8006e28 <SetMlmeScheduleUplinkIndication>
                break;
 80075cc:	e690      	b.n	80072f0 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 80075ce:	3402      	adds	r4, #2
 80075d0:	b2e4      	uxtb	r4, r4
 80075d2:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 80075d6:	2200      	movs	r2, #0
 80075d8:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 80075dc:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80075e0:	f013 0f20 	tst.w	r3, #32
 80075e4:	d002      	beq.n	80075ec <ProcessMacCommands+0x314>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80075e6:	2201      	movs	r2, #1
 80075e8:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80075ec:	f013 0f10 	tst.w	r3, #16
 80075f0:	d002      	beq.n	80075f8 <ProcessMacCommands+0x320>
                    txParamSetupReq.UplinkDwellTime = 1;
 80075f2:	2201      	movs	r2, #1
 80075f4:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8007600:	a903      	add	r1, sp, #12
 8007602:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <ProcessMacCommands+0x398>)
 8007604:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007608:	f003 fdf9 	bl	800b1fe <RegionTxParamSetupReq>
 800760c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007610:	f43f ae6e 	beq.w	80072f0 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8007614:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8007618:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8007670 <ProcessMacCommands+0x398>
 800761c:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8007620:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007624:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8007628:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800762c:	4a12      	ldr	r2, [pc, #72]	; (8007678 <ProcessMacCommands+0x3a0>)
 800762e:	5cd0      	ldrb	r0, [r2, r3]
 8007630:	f7f9 f8cc 	bl	80007cc <__aeabi_ui2f>
 8007634:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8007638:	2302      	movs	r3, #2
 800763a:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800763e:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007642:	a907      	add	r1, sp, #28
 8007644:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 8007648:	f003 fd07 	bl	800b05a <RegionGetPhyParam>
 800764c:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800764e:	b240      	sxtb	r0, r0
 8007650:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 8007654:	4298      	cmp	r0, r3
 8007656:	bfb8      	it	lt
 8007658:	4618      	movlt	r0, r3
 800765a:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800765e:	2200      	movs	r2, #0
 8007660:	a90b      	add	r1, sp, #44	; 0x2c
 8007662:	2009      	movs	r0, #9
 8007664:	f002 fdd0 	bl	800a208 <LoRaMacCommandsAddCmd>
                break;
 8007668:	e642      	b.n	80072f0 <ProcessMacCommands+0x18>
 800766a:	bf00      	nop
 800766c:	20000588 	.word	0x20000588
 8007670:	20000a90 	.word	0x20000a90
 8007674:	cccccccd 	.word	0xcccccccd
 8007678:	08011880 	.word	0x08011880
                status = 0x03;
 800767c:	2303      	movs	r3, #3
 800767e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8007682:	1ca3      	adds	r3, r4, #2
 8007684:	b2db      	uxtb	r3, r3
 8007686:	f815 2009 	ldrb.w	r2, [r5, r9]
 800768a:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800768e:	1ce1      	adds	r1, r4, #3
 8007690:	b2c9      	uxtb	r1, r1
 8007692:	5ceb      	ldrb	r3, [r5, r3]
 8007694:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007696:	1d22      	adds	r2, r4, #4
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	5c69      	ldrb	r1, [r5, r1]
 800769c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80076a0:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80076a2:	3405      	adds	r4, #5
 80076a4:	b2e4      	uxtb	r4, r4
 80076a6:	5caa      	ldrb	r2, [r5, r2]
 80076a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ac:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 80076ae:	2264      	movs	r2, #100	; 0x64
 80076b0:	fb02 f303 	mul.w	r3, r2, r3
 80076b4:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80076b6:	a907      	add	r1, sp, #28
 80076b8:	4b75      	ldr	r3, [pc, #468]	; (8007890 <ProcessMacCommands+0x5b8>)
 80076ba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80076be:	f003 fdad 	bl	800b21c <RegionDlChannelReq>
 80076c2:	b2c3      	uxtb	r3, r0
 80076c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80076c8:	2800      	cmp	r0, #0
 80076ca:	f6ff ae11 	blt.w	80072f0 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80076ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80076d2:	2201      	movs	r2, #1
 80076d4:	a90b      	add	r1, sp, #44	; 0x2c
 80076d6:	200a      	movs	r0, #10
 80076d8:	f002 fd96 	bl	800a208 <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 80076dc:	f7ff fba4 	bl	8006e28 <SetMlmeScheduleUplinkIndication>
                break;
 80076e0:	e606      	b.n	80072f0 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80076e2:	200a      	movs	r0, #10
 80076e4:	f002 ff54 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
 80076e8:	b908      	cbnz	r0, 80076ee <ProcessMacCommands+0x416>
        switch( payload[macIndex++] )
 80076ea:	464c      	mov	r4, r9
 80076ec:	e600      	b.n	80072f0 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80076ee:	210a      	movs	r1, #10
 80076f0:	2000      	movs	r0, #0
 80076f2:	f002 ff01 	bl	800a4f8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80076f6:	a903      	add	r1, sp, #12
 80076f8:	2300      	movs	r3, #0
 80076fa:	9303      	str	r3, [sp, #12]
 80076fc:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 80076fe:	f10d 0a14 	add.w	sl, sp, #20
 8007702:	9305      	str	r3, [sp, #20]
 8007704:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 8007706:	f10d 0b1c 	add.w	fp, sp, #28
 800770a:	9307      	str	r3, [sp, #28]
 800770c:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800770e:	1ca0      	adds	r0, r4, #2
 8007710:	b2c0      	uxtb	r0, r0
 8007712:	f815 3009 	ldrb.w	r3, [r5, r9]
 8007716:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8007718:	1ce2      	adds	r2, r4, #3
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	5c28      	ldrb	r0, [r5, r0]
 800771e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007722:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007724:	1d20      	adds	r0, r4, #4
 8007726:	b2c0      	uxtb	r0, r0
 8007728:	5caa      	ldrb	r2, [r5, r2]
 800772a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800772e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007730:	1d62      	adds	r2, r4, #5
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	5c28      	ldrb	r0, [r5, r0]
 8007736:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800773a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800773c:	3406      	adds	r4, #6
 800773e:	b2e4      	uxtb	r4, r4
 8007740:	5caa      	ldrb	r2, [r5, r2]
 8007742:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8007746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800774a:	fb00 f202 	mul.w	r2, r0, r2
 800774e:	0a12      	lsrs	r2, r2, #8
 8007750:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8007754:	c903      	ldmia	r1, {r0, r1}
 8007756:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800775a:	4a4e      	ldr	r2, [pc, #312]	; (8007894 <ProcessMacCommands+0x5bc>)
 800775c:	441a      	add	r2, r3
 800775e:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8007760:	4658      	mov	r0, fp
 8007762:	f009 f9ad 	bl	8010ac0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8007766:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8007898 <ProcessMacCommands+0x5c0>
 800776a:	f8d9 333c 	ldr.w	r3, [r9, #828]	; 0x33c
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	f8d9 3338 	ldr.w	r3, [r9, #824]	; 0x338
 8007774:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8007778:	a80c      	add	r0, sp, #48	; 0x30
 800777a:	f009 f960 	bl	8010a3e <SysTimeSub>
 800777e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007784:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8007788:	4650      	mov	r0, sl
 800778a:	f009 f939 	bl	8010a00 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800778e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8007792:	f009 f973 	bl	8010a7c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8007796:	f002 fc9f 	bl	800a0d8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800779a:	2301      	movs	r3, #1
 800779c:	f889 3434 	strb.w	r3, [r9, #1076]	; 0x434
 80077a0:	e5a6      	b.n	80072f0 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80077a2:	200d      	movs	r0, #13
 80077a4:	f002 fef4 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
 80077a8:	b908      	cbnz	r0, 80077ae <ProcessMacCommands+0x4d6>
        switch( payload[macIndex++] )
 80077aa:	464c      	mov	r4, r9
 80077ac:	e5a0      	b.n	80072f0 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80077ae:	210d      	movs	r1, #13
 80077b0:	2000      	movs	r0, #0
 80077b2:	f002 fea1 	bl	800a4f8 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80077b6:	4b38      	ldr	r3, [pc, #224]	; (8007898 <ProcessMacCommands+0x5c0>)
 80077b8:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80077bc:	3b04      	subs	r3, #4
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d801      	bhi.n	80077c8 <ProcessMacCommands+0x4f0>
        switch( payload[macIndex++] )
 80077c4:	464c      	mov	r4, r9
 80077c6:	e593      	b.n	80072f0 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 80077c8:	f002 fc82 	bl	800a0d0 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80077cc:	464c      	mov	r4, r9
 80077ce:	e58f      	b.n	80072f0 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 80077d0:	1ca2      	adds	r2, r4, #2
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80077d8:	1ce1      	adds	r1, r4, #3
 80077da:	b2c9      	uxtb	r1, r1
 80077dc:	5caa      	ldrb	r2, [r5, r2]
 80077de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80077e2:	1d22      	adds	r2, r4, #4
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	5c69      	ldrb	r1, [r5, r1]
 80077e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 80077ec:	3405      	adds	r4, #5
 80077ee:	b2e4      	uxtb	r4, r4
 80077f0:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80077f2:	2164      	movs	r1, #100	; 0x64
 80077f4:	fb03 f101 	mul.w	r1, r3, r1
 80077f8:	f000 000f 	and.w	r0, r0, #15
 80077fc:	f002 fc69 	bl	800a0d2 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8007800:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8007804:	2201      	movs	r2, #1
 8007806:	a90b      	add	r1, sp, #44	; 0x2c
 8007808:	2011      	movs	r0, #17
 800780a:	f002 fcfd 	bl	800a208 <LoRaMacCommandsAddCmd>
                break;
 800780e:	e56f      	b.n	80072f0 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8007810:	200e      	movs	r0, #14
 8007812:	f002 febd 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
 8007816:	b908      	cbnz	r0, 800781c <ProcessMacCommands+0x544>
        switch( payload[macIndex++] )
 8007818:	464c      	mov	r4, r9
 800781a:	e569      	b.n	80072f0 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800781c:	210e      	movs	r1, #14
 800781e:	2000      	movs	r0, #0
 8007820:	f002 fe6a 	bl	800a4f8 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8007824:	1ca2      	adds	r2, r4, #2
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800782c:	1ce3      	adds	r3, r4, #3
 800782e:	b2db      	uxtb	r3, r3
 8007830:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8007834:	3404      	adds	r4, #4
 8007836:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007838:	4a18      	ldr	r2, [pc, #96]	; (800789c <ProcessMacCommands+0x5c4>)
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	5ce9      	ldrb	r1, [r5, r3]
 800783e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8007842:	f002 fc48 	bl	800a0d6 <LoRaMacClassBBeaconTimingAns>
 8007846:	e553      	b.n	80072f0 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 8007848:	1ca1      	adds	r1, r4, #2
 800784a:	b2c9      	uxtb	r1, r1
 800784c:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007850:	1ce2      	adds	r2, r4, #3
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	5c69      	ldrb	r1, [r5, r1]
 8007856:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800785a:	3404      	adds	r4, #4
 800785c:	b2e4      	uxtb	r4, r4
 800785e:	5caa      	ldrb	r2, [r5, r2]
 8007860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8007864:	2064      	movs	r0, #100	; 0x64
 8007866:	fb03 f000 	mul.w	r0, r3, r0
 800786a:	f002 fc36 	bl	800a0da <LoRaMacClassBBeaconFreqReq>
 800786e:	b140      	cbz	r0, 8007882 <ProcessMacCommands+0x5aa>
                        macCmdPayload[0] = 1;
 8007870:	2301      	movs	r3, #1
 8007872:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8007876:	2201      	movs	r2, #1
 8007878:	a90b      	add	r1, sp, #44	; 0x2c
 800787a:	2013      	movs	r0, #19
 800787c:	f002 fcc4 	bl	800a208 <LoRaMacCommandsAddCmd>
                break;
 8007880:	e536      	b.n	80072f0 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8007888:	e7f5      	b.n	8007876 <ProcessMacCommands+0x59e>
}
 800788a:	b00f      	add	sp, #60	; 0x3c
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	20000a90 	.word	0x20000a90
 8007894:	12d53d80 	.word	0x12d53d80
 8007898:	20000588 	.word	0x20000588
 800789c:	200010a0 	.word	0x200010a0

080078a0 <ProcessRadioRxDone>:
{
 80078a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078a4:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 80078a6:	4bbb      	ldr	r3, [pc, #748]	; (8007b94 <ProcessRadioRxDone+0x2f4>)
 80078a8:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80078aa:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80078ac:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80078b0:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80078b8:	4ab7      	ldr	r2, [pc, #732]	; (8007b98 <ProcessRadioRxDone+0x2f8>)
 80078ba:	f8d2 80cc 	ldr.w	r8, [r2, #204]	; 0xcc
    MacCtx.McpsConfirm.AckReceived = false;
 80078be:	4cb7      	ldr	r4, [pc, #732]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 80078c0:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 80078c4:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 80078c8:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80078cc:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 80078d0:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 80078d4:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 80078d8:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 80078dc:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 80078e0:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 80078e4:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 80078e8:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 80078ec:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80078f0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80078f4:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 80078f8:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80078fc:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 8007900:	4ba7      	ldr	r3, [pc, #668]	; (8007ba0 <ProcessRadioRxDone+0x300>)
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8007906:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800790a:	f009 f9c7 	bl	8010c9c <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800790e:	4629      	mov	r1, r5
 8007910:	4630      	mov	r0, r6
 8007912:	f002 fbca 	bl	800a0aa <LoRaMacClassBRxBeacon>
 8007916:	b998      	cbnz	r0, 8007940 <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007918:	4b9f      	ldr	r3, [pc, #636]	; (8007b98 <ProcessRadioRxDone+0x2f8>)
 800791a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800791e:	2b01      	cmp	r3, #1
 8007920:	d013      	beq.n	800794a <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 8007922:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8007924:	0963      	lsrs	r3, r4, #5
 8007926:	3b01      	subs	r3, #1
 8007928:	2b06      	cmp	r3, #6
 800792a:	f200 827d 	bhi.w	8007e28 <ProcessRadioRxDone+0x588>
 800792e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007932:	0029      	.short	0x0029
 8007934:	00aa027b 	.word	0x00aa027b
 8007938:	00a6027b 	.word	0x00a6027b
 800793c:	0255027b 	.word	0x0255027b
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8007940:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8007944:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
        return;
 8007948:	e283      	b.n	8007e52 <ProcessRadioRxDone+0x5b2>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800794a:	f002 fbb2 	bl	800a0b2 <LoRaMacClassBIsPingExpected>
 800794e:	b150      	cbz	r0, 8007966 <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007950:	2000      	movs	r0, #0
 8007952:	f002 fba3 	bl	800a09c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007956:	2000      	movs	r0, #0
 8007958:	f002 fba5 	bl	800a0a6 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800795c:	4b8f      	ldr	r3, [pc, #572]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 800795e:	2204      	movs	r2, #4
 8007960:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8007964:	e7dd      	b.n	8007922 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007966:	f002 fba6 	bl	800a0b6 <LoRaMacClassBIsMulticastExpected>
 800796a:	2800      	cmp	r0, #0
 800796c:	d0d9      	beq.n	8007922 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800796e:	2000      	movs	r0, #0
 8007970:	f002 fb95 	bl	800a09e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007974:	2000      	movs	r0, #0
 8007976:	f002 fb97 	bl	800a0a8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800797a:	4b88      	ldr	r3, [pc, #544]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 800797c:	2205      	movs	r2, #5
 800797e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8007982:	e7ce      	b.n	8007922 <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8007984:	2d10      	cmp	r5, #16
 8007986:	d95d      	bls.n	8007a44 <ProcessRadioRxDone+0x1a4>
            macMsgJoinAccept.Buffer = payload;
 8007988:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 800798a:	b2ed      	uxtb	r5, r5
 800798c:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007990:	4b81      	ldr	r3, [pc, #516]	; (8007b98 <ProcessRadioRxDone+0x2f8>)
 8007992:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8007996:	2b00      	cmp	r3, #0
 8007998:	d15b      	bne.n	8007a52 <ProcessRadioRxDone+0x1b2>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800799a:	f006 fc75 	bl	800e288 <SecureElementGetJoinEui>
 800799e:	4601      	mov	r1, r0
 80079a0:	aa07      	add	r2, sp, #28
 80079a2:	20ff      	movs	r0, #255	; 0xff
 80079a4:	f003 f980 	bl	800aca8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d15e      	bne.n	8007a6a <ProcessRadioRxDone+0x1ca>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80079ac:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80079b0:	4b79      	ldr	r3, [pc, #484]	; (8007b98 <ProcessRadioRxDone+0x2f8>)
 80079b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80079b6:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 80079ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80079be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80079c2:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 80079c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80079ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80079ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80079d4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80079d8:	f3c2 1102 	ubfx	r1, r2, #4, #3
 80079dc:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80079e0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80079e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80079e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80079ec:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80079f0:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80079f2:	b90a      	cbnz	r2, 80079f8 <ProcessRadioRxDone+0x158>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80079f4:	2201      	movs	r2, #1
 80079f6:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80079f8:	4c67      	ldr	r4, [pc, #412]	; (8007b98 <ProcessRadioRxDone+0x2f8>)
 80079fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80079fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8007a06:	4413      	add	r3, r2
 8007a08:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8007a10:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8007a14:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 8007a16:	3d11      	subs	r5, #17
 8007a18:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8007a1c:	a920      	add	r1, sp, #128	; 0x80
 8007a1e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007a22:	f003 fb5e 	bl	800b0e2 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007a26:	2302      	movs	r3, #2
 8007a28:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	f002 fdaf 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
 8007a32:	b9a8      	cbnz	r0, 8007a60 <ProcessRadioRxDone+0x1c0>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8007a34:	4a59      	ldr	r2, [pc, #356]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007a36:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007a3a:	f043 0308 	orr.w	r3, r3, #8
 8007a3e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8007a42:	e1e5      	b.n	8007e10 <ProcessRadioRxDone+0x570>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007a44:	4b55      	ldr	r3, [pc, #340]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007a4c:	f7ff fbca 	bl	80071e4 <PrepareRxDoneAbort>
                return;
 8007a50:	e1ff      	b.n	8007e52 <ProcessRadioRxDone+0x5b2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007a52:	4b52      	ldr	r3, [pc, #328]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007a5a:	f7ff fbc3 	bl	80071e4 <PrepareRxDoneAbort>
                return;
 8007a5e:	e1f8      	b.n	8007e52 <ProcessRadioRxDone+0x5b2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8007a60:	2101      	movs	r1, #1
 8007a62:	2000      	movs	r0, #0
 8007a64:	f002 fd48 	bl	800a4f8 <LoRaMacConfirmQueueSetStatus>
 8007a68:	e7e4      	b.n	8007a34 <ProcessRadioRxDone+0x194>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	f002 fd90 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d0df      	beq.n	8007a34 <ProcessRadioRxDone+0x194>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8007a74:	2101      	movs	r1, #1
 8007a76:	2007      	movs	r0, #7
 8007a78:	f002 fd3e 	bl	800a4f8 <LoRaMacConfirmQueueSetStatus>
 8007a7c:	e7da      	b.n	8007a34 <ProcessRadioRxDone+0x194>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007a7e:	4b47      	ldr	r3, [pc, #284]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007a86:	4b44      	ldr	r3, [pc, #272]	; (8007b98 <ProcessRadioRxDone+0x2f8>)
 8007a88:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8007a8c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8007a90:	4a42      	ldr	r2, [pc, #264]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007a92:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 8007a96:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007a9a:	220d      	movs	r2, #13
 8007a9c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007aa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aa4:	b113      	cbz	r3, 8007aac <ProcessRadioRxDone+0x20c>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007aa6:	230e      	movs	r3, #14
 8007aa8:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007aac:	a91e      	add	r1, sp, #120	; 0x78
 8007aae:	4b3a      	ldr	r3, [pc, #232]	; (8007b98 <ProcessRadioRxDone+0x2f8>)
 8007ab0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007ab4:	f003 fad1 	bl	800b05a <RegionGetPhyParam>
 8007ab8:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8007aba:	f1a5 030d 	sub.w	r3, r5, #13
 8007abe:	b21b      	sxth	r3, r3
 8007ac0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ac4:	b200      	sxth	r0, r0
 8007ac6:	4283      	cmp	r3, r0
 8007ac8:	dc01      	bgt.n	8007ace <ProcessRadioRxDone+0x22e>
 8007aca:	2d0b      	cmp	r5, #11
 8007acc:	d806      	bhi.n	8007adc <ProcessRadioRxDone+0x23c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007ace:	4b33      	ldr	r3, [pc, #204]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007ad6:	f7ff fb85 	bl	80071e4 <PrepareRxDoneAbort>
                return;
 8007ada:	e1ba      	b.n	8007e52 <ProcessRadioRxDone+0x5b2>
            macMsgData.Buffer = payload;
 8007adc:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 8007ade:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8007ae2:	4b30      	ldr	r3, [pc, #192]	; (8007ba4 <ProcessRadioRxDone+0x304>)
 8007ae4:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8007ae6:	23ff      	movs	r3, #255	; 0xff
 8007ae8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8007aec:	a811      	add	r0, sp, #68	; 0x44
 8007aee:	f003 f9a1 	bl	800ae34 <LoRaMacParserData>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d147      	bne.n	8007b86 <ProcessRadioRxDone+0x2e6>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8007af6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007af8:	4b28      	ldr	r3, [pc, #160]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007afa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8007afe:	f10d 0116 	add.w	r1, sp, #22
 8007b02:	a811      	add	r0, sp, #68	; 0x44
 8007b04:	f7ff f9c6 	bl	8006e94 <DetermineFrameType>
 8007b08:	4605      	mov	r5, r0
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d14c      	bne.n	8007ba8 <ProcessRadioRxDone+0x308>
            downLinkCounter = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d04e      	beq.n	8007bb6 <ProcessRadioRxDone+0x316>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8007b18:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8007b1c:	2d01      	cmp	r5, #1
 8007b1e:	d108      	bne.n	8007b32 <ProcessRadioRxDone+0x292>
 8007b20:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d172      	bne.n	8007c0e <ProcessRadioRxDone+0x36e>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8007b28:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8007b2c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8007b30:	d16d      	bne.n	8007c0e <ProcessRadioRxDone+0x36e>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8007b32:	2315      	movs	r3, #21
 8007b34:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b38:	4e17      	ldr	r6, [pc, #92]	; (8007b98 <ProcessRadioRxDone+0x2f8>)
 8007b3a:	a91e      	add	r1, sp, #120	; 0x78
 8007b3c:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8007b40:	f003 fa8b 	bl	800b05a <RegionGetPhyParam>
 8007b44:	901d      	str	r0, [sp, #116]	; 0x74
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8007b46:	ab06      	add	r3, sp, #24
 8007b48:	9302      	str	r3, [sp, #8]
 8007b4a:	f10d 0317 	add.w	r3, sp, #23
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	b280      	uxth	r0, r0
 8007b52:	9000      	str	r0, [sp, #0]
 8007b54:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
 8007b58:	aa11      	add	r2, sp, #68	; 0x44
 8007b5a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8007b5e:	4648      	mov	r0, r9
 8007b60:	f7ff fb7e 	bl	8007260 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d072      	beq.n	8007c4e <ProcessRadioRxDone+0x3ae>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8007b68:	2807      	cmp	r0, #7
 8007b6a:	d057      	beq.n	8007c1c <ProcessRadioRxDone+0x37c>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8007b6c:	2808      	cmp	r0, #8
 8007b6e:	d069      	beq.n	8007c44 <ProcessRadioRxDone+0x3a4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007b70:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007b78:	4b08      	ldr	r3, [pc, #32]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007b7a:	9a06      	ldr	r2, [sp, #24]
 8007b7c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 8007b80:	f7ff fb30 	bl	80071e4 <PrepareRxDoneAbort>
                return;
 8007b84:	e165      	b.n	8007e52 <ProcessRadioRxDone+0x5b2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <ProcessRadioRxDone+0x2fc>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007b8e:	f7ff fb29 	bl	80071e4 <PrepareRxDoneAbort>
                return;
 8007b92:	e15e      	b.n	8007e52 <ProcessRadioRxDone+0x5b2>
 8007b94:	200010a0 	.word	0x200010a0
 8007b98:	20000a90 	.word	0x20000a90
 8007b9c:	20000588 	.word	0x20000588
 8007ba0:	08011ea4 	.word	0x08011ea4
 8007ba4:	200007c0 	.word	0x200007c0
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007ba8:	4bad      	ldr	r3, [pc, #692]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007bb0:	f7ff fb18 	bl	80071e4 <PrepareRxDoneAbort>
                return;
 8007bb4:	e14d      	b.n	8007e52 <ProcessRadioRxDone+0x5b2>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	4aaa      	ldr	r2, [pc, #680]	; (8007e64 <ProcessRadioRxDone+0x5c4>)
 8007bba:	212c      	movs	r1, #44	; 0x2c
 8007bbc:	fb01 2203 	mla	r2, r1, r3, r2
 8007bc0:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8007bc4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007bc6:	428a      	cmp	r2, r1
 8007bc8:	d002      	beq.n	8007bd0 <ProcessRadioRxDone+0x330>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007bca:	3301      	adds	r3, #1
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	e7a1      	b.n	8007b14 <ProcessRadioRxDone+0x274>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8007bd0:	49a4      	ldr	r1, [pc, #656]	; (8007e64 <ProcessRadioRxDone+0x5c4>)
 8007bd2:	262c      	movs	r6, #44	; 0x2c
 8007bd4:	fb06 1103 	mla	r1, r6, r3, r1
 8007bd8:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	d0f4      	beq.n	8007bca <ProcessRadioRxDone+0x32a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8007be0:	4ba0      	ldr	r3, [pc, #640]	; (8007e64 <ProcessRadioRxDone+0x5c4>)
 8007be2:	fb06 3000 	mla	r0, r6, r0, r3
 8007be6:	f890 90d3 	ldrb.w	r9, [r0, #211]	; 0xd3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8007bea:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8007bee:	6809      	ldr	r1, [r1, #0]
 8007bf0:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007bf2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d002      	beq.n	8007c00 <ProcessRadioRxDone+0x360>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8007bfa:	4690      	mov	r8, r2
                    multicast = 1;
 8007bfc:	2501      	movs	r5, #1
 8007bfe:	e78d      	b.n	8007b1c <ProcessRadioRxDone+0x27c>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007c00:	4b97      	ldr	r3, [pc, #604]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007c02:	2103      	movs	r1, #3
 8007c04:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8007c08:	4690      	mov	r8, r2
                    multicast = 1;
 8007c0a:	2501      	movs	r5, #1
 8007c0c:	e786      	b.n	8007b1c <ProcessRadioRxDone+0x27c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007c0e:	4b94      	ldr	r3, [pc, #592]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007c16:	f7ff fae5 	bl	80071e4 <PrepareRxDoneAbort>
                return;
 8007c1a:	e11a      	b.n	8007e52 <ProcessRadioRxDone+0x5b2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8007c1c:	4b90      	ldr	r3, [pc, #576]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007c1e:	2208      	movs	r2, #8
 8007c20:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8007c24:	f896 310e 	ldrb.w	r3, [r6, #270]	; 0x10e
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1a5      	bne.n	8007b78 <ProcessRadioRxDone+0x2d8>
 8007c2c:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8007c30:	2ca0      	cmp	r4, #160	; 0xa0
 8007c32:	d1a1      	bne.n	8007b78 <ProcessRadioRxDone+0x2d8>
 8007c34:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8007c36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d19d      	bne.n	8007b78 <ProcessRadioRxDone+0x2d8>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
 8007c42:	e799      	b.n	8007b78 <ProcessRadioRxDone+0x2d8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8007c44:	4b86      	ldr	r3, [pc, #536]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007c46:	220a      	movs	r2, #10
 8007c48:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8007c4c:	e794      	b.n	8007b78 <ProcessRadioRxDone+0x2d8>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8007c4e:	ab11      	add	r3, sp, #68	; 0x44
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	9b06      	ldr	r3, [sp, #24]
 8007c54:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007c58:	4641      	mov	r1, r8
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	f002 ff78 	bl	800ab50 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d13a      	bne.n	8007cda <ProcessRadioRxDone+0x43a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007c64:	4b7e      	ldr	r3, [pc, #504]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007c66:	2100      	movs	r1, #0
 8007c68:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8007c6c:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8007c70:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007c74:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8007c78:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8007c7c:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8007c80:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007c84:	9806      	ldr	r0, [sp, #24]
 8007c86:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007c8a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007c8e:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007c92:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007c96:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8007c9a:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 8007c9e:	2801      	cmp	r0, #1
 8007ca0:	d929      	bls.n	8007cf6 <ProcessRadioRxDone+0x456>
            if( multicast == 1 )
 8007ca2:	2d01      	cmp	r5, #1
 8007ca4:	d02a      	beq.n	8007cfc <ProcessRadioRxDone+0x45c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8007ca6:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8007caa:	2ca0      	cmp	r4, #160	; 0xa0
 8007cac:	d02b      	beq.n	8007d06 <ProcessRadioRxDone+0x466>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4a6c      	ldr	r2, [pc, #432]	; (8007e64 <ProcessRadioRxDone+0x5c4>)
 8007cb2:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007cb6:	4a6a      	ldr	r2, [pc, #424]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007cb8:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8007cbc:	4b68      	ldr	r3, [pc, #416]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007cbe:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 8007cc2:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8007cc6:	f7ff faf8 	bl	80072ba <RemoveMacCommands>
            switch( fType )
 8007cca:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d87d      	bhi.n	8007dce <ProcessRadioRxDone+0x52e>
 8007cd2:	e8df f003 	tbb	[pc, r3]
 8007cd6:	4a27      	.short	0x4a27
 8007cd8:	6c5c      	.short	0x6c5c
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8007cda:	2802      	cmp	r0, #2
 8007cdc:	d006      	beq.n	8007cec <ProcessRadioRxDone+0x44c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8007cde:	4b60      	ldr	r3, [pc, #384]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007ce0:	220c      	movs	r2, #12
 8007ce2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007ce6:	f7ff fa7d 	bl	80071e4 <PrepareRxDoneAbort>
                return;
 8007cea:	e0b2      	b.n	8007e52 <ProcessRadioRxDone+0x5b2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8007cec:	4b5c      	ldr	r3, [pc, #368]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007cee:	220b      	movs	r2, #11
 8007cf0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8007cf4:	e7f7      	b.n	8007ce6 <ProcessRadioRxDone+0x446>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8007cf6:	4b5b      	ldr	r3, [pc, #364]	; (8007e64 <ProcessRadioRxDone+0x5c4>)
 8007cf8:	6299      	str	r1, [r3, #40]	; 0x28
 8007cfa:	e7d2      	b.n	8007ca2 <ProcessRadioRxDone+0x402>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8007cfc:	4b58      	ldr	r3, [pc, #352]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8007d04:	e7da      	b.n	8007cbc <ProcessRadioRxDone+0x41c>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8007d06:	4b57      	ldr	r3, [pc, #348]	; (8007e64 <ProcessRadioRxDone+0x5c4>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8007d0e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8007d12:	b913      	cbnz	r3, 8007d1a <ProcessRadioRxDone+0x47a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8007d14:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d16:	4b53      	ldr	r3, [pc, #332]	; (8007e64 <ProcessRadioRxDone+0x5c4>)
 8007d18:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007d1a:	4b51      	ldr	r3, [pc, #324]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8007d22:	e7cb      	b.n	8007cbc <ProcessRadioRxDone+0x41c>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8007d24:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007d28:	4c4d      	ldr	r4, [pc, #308]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007d2a:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	463b      	mov	r3, r7
 8007d32:	f002 020f 	and.w	r2, r2, #15
 8007d36:	2100      	movs	r1, #0
 8007d38:	a815      	add	r0, sp, #84	; 0x54
 8007d3a:	f7ff facd 	bl	80072d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007d3e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007d42:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8007d46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d48:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8007d4c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8007d50:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8007d54:	2301      	movs	r3, #1
 8007d56:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007d5a:	4a41      	ldr	r2, [pc, #260]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007d5c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007d60:	f043 0302 	orr.w	r3, r3, #2
 8007d64:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8007d68:	e052      	b.n	8007e10 <ProcessRadioRxDone+0x570>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8007d6a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007d6e:	4c3c      	ldr	r4, [pc, #240]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007d70:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	463b      	mov	r3, r7
 8007d78:	f002 020f 	and.w	r2, r2, #15
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	a815      	add	r0, sp, #84	; 0x54
 8007d80:	f7ff faaa 	bl	80072d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007d84:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007d88:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8007d8c:	e7e5      	b.n	8007d5a <ProcessRadioRxDone+0x4ba>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8007d8e:	4c34      	ldr	r4, [pc, #208]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007d90:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	463b      	mov	r3, r7
 8007d98:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007da0:	f7ff fa9a 	bl	80072d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007da4:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007da8:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8007dac:	e7d5      	b.n	8007d5a <ProcessRadioRxDone+0x4ba>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007dae:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8007db2:	4b2b      	ldr	r3, [pc, #172]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007db4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8007db8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007dba:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8007dbe:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8007dc2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8007dcc:	e7c5      	b.n	8007d5a <ProcessRadioRxDone+0x4ba>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007dce:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8007dd6:	f7ff fa05 	bl	80071e4 <PrepareRxDoneAbort>
                    break;
 8007dda:	e7be      	b.n	8007d5a <ProcessRadioRxDone+0x4ba>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8007ddc:	1e6a      	subs	r2, r5, #1
 8007dde:	4c20      	ldr	r4, [pc, #128]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007de0:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8007de4:	b292      	uxth	r2, r2
 8007de6:	1c71      	adds	r1, r6, #1
 8007de8:	4638      	mov	r0, r7
 8007dea:	f006 fa7e 	bl	800e2ea <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8007dee:	2303      	movs	r3, #3
 8007df0:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8007dfa:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8007dfe:	3d01      	subs	r5, #1
 8007e00:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007e04:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8007e08:	f043 0302 	orr.w	r3, r3, #2
 8007e0c:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 8007e10:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007e12:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007e16:	b173      	cbz	r3, 8007e36 <ProcessRadioRxDone+0x596>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007e18:	4b11      	ldr	r3, [pc, #68]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007e1a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8007e1e:	b17b      	cbz	r3, 8007e40 <ProcessRadioRxDone+0x5a0>
            OnAckTimeoutTimerEvent( NULL );
 8007e20:	2000      	movs	r0, #0
 8007e22:	f7ff f9b9 	bl	8007198 <OnAckTimeoutTimerEvent>
 8007e26:	e00b      	b.n	8007e40 <ProcessRadioRxDone+0x5a0>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007e28:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8007e30:	f7ff f9d8 	bl	80071e4 <PrepareRxDoneAbort>
            break;
 8007e34:	e7ec      	b.n	8007e10 <ProcessRadioRxDone+0x570>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007e36:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <ProcessRadioRxDone+0x5c4>)
 8007e38:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d00b      	beq.n	8007e58 <ProcessRadioRxDone+0x5b8>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007e40:	4a07      	ldr	r2, [pc, #28]	; (8007e60 <ProcessRadioRxDone+0x5c0>)
 8007e42:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007e46:	f043 0320 	orr.w	r3, r3, #32
 8007e4a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8007e4e:	f7fe ff75 	bl	8006d3c <UpdateRxSlotIdleState>
}
 8007e52:	b023      	add	sp, #140	; 0x8c
 8007e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f7ff f99d 	bl	8007198 <OnAckTimeoutTimerEvent>
 8007e5e:	e7ef      	b.n	8007e40 <ProcessRadioRxDone+0x5a0>
 8007e60:	20000588 	.word	0x20000588
 8007e64:	20000a90 	.word	0x20000a90

08007e68 <ProcessRadioTxTimeout>:
{
 8007e68:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007e6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <ProcessRadioTxTimeout+0x40>)
 8007e6c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d002      	beq.n	8007e7a <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8007e74:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <ProcessRadioTxTimeout+0x44>)
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8007e7a:	f7fe ff5f 	bl	8006d3c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8007e7e:	4c0c      	ldr	r4, [pc, #48]	; (8007eb0 <ProcessRadioTxTimeout+0x48>)
 8007e80:	2002      	movs	r0, #2
 8007e82:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8007e86:	f002 fb65 	bl	800a554 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8007e8a:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007e8e:	b113      	cbz	r3, 8007e96 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8007e90:	2201      	movs	r2, #1
 8007e92:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007e96:	4a06      	ldr	r2, [pc, #24]	; (8007eb0 <ProcessRadioTxTimeout+0x48>)
 8007e98:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007e9c:	f043 0320 	orr.w	r3, r3, #32
 8007ea0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000a90 	.word	0x20000a90
 8007eac:	08011ea4 	.word	0x08011ea4
 8007eb0:	20000588 	.word	0x20000588

08007eb4 <CheckForClassBCollision>:
{
 8007eb4:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007eb6:	f002 f8fa 	bl	800a0ae <LoRaMacClassBIsBeaconExpected>
 8007eba:	b978      	cbnz	r0, 8007edc <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <CheckForClassBCollision+0x30>)
 8007ebe:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d001      	beq.n	8007eca <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8007ec6:	2000      	movs	r0, #0
}
 8007ec8:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007eca:	f002 f8f2 	bl	800a0b2 <LoRaMacClassBIsPingExpected>
 8007ece:	b938      	cbnz	r0, 8007ee0 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007ed0:	f002 f8f1 	bl	800a0b6 <LoRaMacClassBIsMulticastExpected>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d0f7      	beq.n	8007ec8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8007ed8:	200f      	movs	r0, #15
 8007eda:	e7f5      	b.n	8007ec8 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8007edc:	200e      	movs	r0, #14
 8007ede:	e7f3      	b.n	8007ec8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8007ee0:	200f      	movs	r0, #15
 8007ee2:	e7f1      	b.n	8007ec8 <CheckForClassBCollision+0x14>
 8007ee4:	20000a90 	.word	0x20000a90

08007ee8 <HandleRadioRxErrorTimeout>:
{
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	4605      	mov	r5, r0
 8007eec:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007eee:	4b37      	ldr	r3, [pc, #220]	; (8007fcc <HandleRadioRxErrorTimeout+0xe4>)
 8007ef0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d002      	beq.n	8007efe <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8007ef8:	4b35      	ldr	r3, [pc, #212]	; (8007fd0 <HandleRadioRxErrorTimeout+0xe8>)
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007efe:	f002 f8d6 	bl	800a0ae <LoRaMacClassBIsBeaconExpected>
 8007f02:	4606      	mov	r6, r0
 8007f04:	bb00      	cbnz	r0, 8007f48 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007f06:	4b31      	ldr	r3, [pc, #196]	; (8007fcc <HandleRadioRxErrorTimeout+0xe4>)
 8007f08:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d022      	beq.n	8007f56 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 8007f10:	b9be      	cbnz	r6, 8007f42 <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007f12:	4b30      	ldr	r3, [pc, #192]	; (8007fd4 <HandleRadioRxErrorTimeout+0xec>)
 8007f14:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d13f      	bne.n	8007f9c <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8007f1c:	4b2d      	ldr	r3, [pc, #180]	; (8007fd4 <HandleRadioRxErrorTimeout+0xec>)
 8007f1e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007f22:	b113      	cbz	r3, 8007f2a <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007f24:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <HandleRadioRxErrorTimeout+0xec>)
 8007f26:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f002 fb12 	bl	800a554 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8007f30:	4b26      	ldr	r3, [pc, #152]	; (8007fcc <HandleRadioRxErrorTimeout+0xe4>)
 8007f32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007f34:	f008 fe7c 	bl	8010c30 <UTIL_TIMER_GetElapsedTime>
 8007f38:	4b26      	ldr	r3, [pc, #152]	; (8007fd4 <HandleRadioRxErrorTimeout+0xec>)
 8007f3a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8007f3e:	4298      	cmp	r0, r3
 8007f40:	d220      	bcs.n	8007f84 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 8007f42:	f7fe fefb 	bl	8006d3c <UpdateRxSlotIdleState>
}
 8007f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8007f48:	2002      	movs	r0, #2
 8007f4a:	f002 f8a6 	bl	800a09a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f002 f8a8 	bl	800a0a4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8007f54:	e7d7      	b.n	8007f06 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007f56:	f002 f8ac 	bl	800a0b2 <LoRaMacClassBIsPingExpected>
 8007f5a:	4607      	mov	r7, r0
 8007f5c:	b950      	cbnz	r0, 8007f74 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007f5e:	f002 f8aa 	bl	800a0b6 <LoRaMacClassBIsMulticastExpected>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d0d4      	beq.n	8007f10 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007f66:	2000      	movs	r0, #0
 8007f68:	f002 f899 	bl	800a09e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	f002 f89b 	bl	800a0a8 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8007f72:	e7e6      	b.n	8007f42 <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007f74:	2000      	movs	r0, #0
 8007f76:	f002 f891 	bl	800a09c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	f002 f893 	bl	800a0a6 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007f80:	463e      	mov	r6, r7
 8007f82:	e7ec      	b.n	8007f5e <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8007f84:	4c13      	ldr	r4, [pc, #76]	; (8007fd4 <HandleRadioRxErrorTimeout+0xec>)
 8007f86:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8007f8a:	f008 fe87 	bl	8010c9c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8007f8e:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8007f92:	f043 0320 	orr.w	r3, r3, #32
 8007f96:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 8007f9a:	e7d2      	b.n	8007f42 <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <HandleRadioRxErrorTimeout+0xec>)
 8007f9e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007fa2:	b113      	cbz	r3, 8007faa <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <HandleRadioRxErrorTimeout+0xec>)
 8007fa6:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8007faa:	4620      	mov	r0, r4
 8007fac:	f002 fad2 	bl	800a554 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <HandleRadioRxErrorTimeout+0xe4>)
 8007fb2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d0c3      	beq.n	8007f42 <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8007fba:	4a06      	ldr	r2, [pc, #24]	; (8007fd4 <HandleRadioRxErrorTimeout+0xec>)
 8007fbc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007fc0:	f043 0320 	orr.w	r3, r3, #32
 8007fc4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8007fc8:	e7bb      	b.n	8007f42 <HandleRadioRxErrorTimeout+0x5a>
 8007fca:	bf00      	nop
 8007fcc:	20000a90 	.word	0x20000a90
 8007fd0:	08011ea4 	.word	0x08011ea4
 8007fd4:	20000588 	.word	0x20000588

08007fd8 <ProcessRadioRxError>:
{
 8007fd8:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8007fda:	2106      	movs	r1, #6
 8007fdc:	2005      	movs	r0, #5
 8007fde:	f7ff ff83 	bl	8007ee8 <HandleRadioRxErrorTimeout>
}
 8007fe2:	bd08      	pop	{r3, pc}

08007fe4 <ProcessRadioRxTimeout>:
{
 8007fe4:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8007fe6:	2104      	movs	r1, #4
 8007fe8:	2003      	movs	r0, #3
 8007fea:	f7ff ff7d 	bl	8007ee8 <HandleRadioRxErrorTimeout>
}
 8007fee:	bd08      	pop	{r3, pc}

08007ff0 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007ff4:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8007ff6:	4a14      	ldr	r2, [pc, #80]	; (8008048 <LoRaMacHandleIrqEvents+0x58>)
 8007ff8:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffe:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008002:	b303      	cbz	r3, 8008046 <LoRaMacHandleIrqEvents+0x56>
{
 8008004:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8008006:	b2dc      	uxtb	r4, r3
 8008008:	f013 0f10 	tst.w	r3, #16
 800800c:	d10c      	bne.n	8008028 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800800e:	f014 0f08 	tst.w	r4, #8
 8008012:	d10c      	bne.n	800802e <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008014:	f014 0f04 	tst.w	r4, #4
 8008018:	d10c      	bne.n	8008034 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800801a:	f014 0f02 	tst.w	r4, #2
 800801e:	d10c      	bne.n	800803a <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8008020:	f014 0f01 	tst.w	r4, #1
 8008024:	d10c      	bne.n	8008040 <LoRaMacHandleIrqEvents+0x50>
}
 8008026:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8008028:	f7ff f838 	bl	800709c <ProcessRadioTxDone>
 800802c:	e7ef      	b.n	800800e <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800802e:	f7ff fc37 	bl	80078a0 <ProcessRadioRxDone>
 8008032:	e7ef      	b.n	8008014 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8008034:	f7ff ff18 	bl	8007e68 <ProcessRadioTxTimeout>
 8008038:	e7ef      	b.n	800801a <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800803a:	f7ff ffcd 	bl	8007fd8 <ProcessRadioRxError>
 800803e:	e7ef      	b.n	8008020 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8008040:	f7ff ffd0 	bl	8007fe4 <ProcessRadioRxTimeout>
}
 8008044:	e7ef      	b.n	8008026 <LoRaMacHandleIrqEvents+0x36>
 8008046:	4770      	bx	lr
 8008048:	20000584 	.word	0x20000584

0800804c <LoRaMacHandleMlmeRequest>:
{
 800804c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800804e:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <LoRaMacHandleMlmeRequest+0x5c>)
 8008050:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008054:	f013 0f04 	tst.w	r3, #4
 8008058:	d100      	bne.n	800805c <LoRaMacHandleMlmeRequest+0x10>
}
 800805a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800805c:	2001      	movs	r0, #1
 800805e:	f002 fa97 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
 8008062:	b178      	cbz	r0, 8008084 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008064:	2001      	movs	r0, #1
 8008066:	f002 fa5d 	bl	800a524 <LoRaMacConfirmQueueGetStatus>
 800806a:	b918      	cbnz	r0, 8008074 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800806c:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <LoRaMacHandleMlmeRequest+0x5c>)
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008074:	4a0c      	ldr	r2, [pc, #48]	; (80080a8 <LoRaMacHandleMlmeRequest+0x5c>)
 8008076:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800807a:	f023 0302 	bic.w	r3, r3, #2
 800807e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8008082:	e7ea      	b.n	800805a <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008084:	2005      	movs	r0, #5
 8008086:	f002 fa83 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
 800808a:	b138      	cbz	r0, 800809c <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800808c:	4a06      	ldr	r2, [pc, #24]	; (80080a8 <LoRaMacHandleMlmeRequest+0x5c>)
 800808e:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008092:	f023 0302 	bic.w	r3, r3, #2
 8008096:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800809a:	e7de      	b.n	800805a <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800809c:	2006      	movs	r0, #6
 800809e:	f002 fa77 	bl	800a590 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0d9      	beq.n	800805a <LoRaMacHandleMlmeRequest+0xe>
 80080a6:	e7f1      	b.n	800808c <LoRaMacHandleMlmeRequest+0x40>
 80080a8:	20000588 	.word	0x20000588

080080ac <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 80080ac:	4b14      	ldr	r3, [pc, #80]	; (8008100 <AckTimeoutRetriesFinalize+0x54>)
 80080ae:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80080b2:	b12b      	cbz	r3, 80080c0 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80080b4:	4b12      	ldr	r3, [pc, #72]	; (8008100 <AckTimeoutRetriesFinalize+0x54>)
 80080b6:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80080ba:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 80080be:	4770      	bx	lr
{
 80080c0:	b500      	push	{lr}
 80080c2:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80080c4:	2302      	movs	r3, #2
 80080c6:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80080ca:	4b0e      	ldr	r3, [pc, #56]	; (8008104 <AckTimeoutRetriesFinalize+0x58>)
 80080cc:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 80080d0:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80080d2:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 80080d6:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80080d8:	a901      	add	r1, sp, #4
 80080da:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80080de:	f002 ffe2 	bl	800b0a6 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 80080e2:	4b07      	ldr	r3, [pc, #28]	; (8008100 <AckTimeoutRetriesFinalize+0x54>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 80080ea:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80080ee:	4b04      	ldr	r3, [pc, #16]	; (8008100 <AckTimeoutRetriesFinalize+0x54>)
 80080f0:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80080f4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 80080f8:	b005      	add	sp, #20
 80080fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80080fe:	bf00      	nop
 8008100:	20000588 	.word	0x20000588
 8008104:	20000a90 	.word	0x20000a90

08008108 <SerializeTxFrame>:
{
 8008108:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800810a:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <SerializeTxFrame+0x40>)
 800810c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008110:	b11b      	cbz	r3, 800811a <SerializeTxFrame+0x12>
 8008112:	2b04      	cmp	r3, #4
 8008114:	d00a      	beq.n	800812c <SerializeTxFrame+0x24>
 8008116:	2003      	movs	r0, #3
}
 8008118:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800811a:	480c      	ldr	r0, [pc, #48]	; (800814c <SerializeTxFrame+0x44>)
 800811c:	f002 fee9 	bl	800aef2 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008120:	b968      	cbnz	r0, 800813e <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <SerializeTxFrame+0x40>)
 8008124:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008128:	801a      	strh	r2, [r3, #0]
            break;
 800812a:	e7f5      	b.n	8008118 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800812c:	4807      	ldr	r0, [pc, #28]	; (800814c <SerializeTxFrame+0x44>)
 800812e:	f002 ff16 	bl	800af5e <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008132:	b930      	cbnz	r0, 8008142 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008134:	4b04      	ldr	r3, [pc, #16]	; (8008148 <SerializeTxFrame+0x40>)
 8008136:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800813a:	801a      	strh	r2, [r3, #0]
            break;
 800813c:	e7ec      	b.n	8008118 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800813e:	2011      	movs	r0, #17
 8008140:	e7ea      	b.n	8008118 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008142:	2011      	movs	r0, #17
 8008144:	e7e8      	b.n	8008118 <SerializeTxFrame+0x10>
 8008146:	bf00      	nop
 8008148:	20000588 	.word	0x20000588
 800814c:	20000690 	.word	0x20000690

08008150 <ComputeRxWindowParameters>:
{
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008154:	4c1d      	ldr	r4, [pc, #116]	; (80081cc <ComputeRxWindowParameters+0x7c>)
 8008156:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800815a:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800815e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 8008162:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 8008166:	4630      	mov	r0, r6
 8008168:	f003 f89a 	bl	800b2a0 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800816c:	4d18      	ldr	r5, [pc, #96]	; (80081d0 <ComputeRxWindowParameters+0x80>)
 800816e:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008176:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800817a:	b241      	sxtb	r1, r0
 800817c:	4630      	mov	r0, r6
 800817e:	f002 ffcd 	bl	800b11c <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008182:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800818a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800818e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8008192:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008196:	f002 ffc1 	bl	800b11c <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800819a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800819c:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 80081a0:	440b      	add	r3, r1
 80081a2:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80081a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80081a8:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 80081ac:	4413      	add	r3, r2
 80081ae:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80081b2:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80081b6:	b93b      	cbnz	r3, 80081c8 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80081b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081ba:	4419      	add	r1, r3
 80081bc:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80081c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80081c2:	440a      	add	r2, r1
 80081c4:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 80081c8:	b002      	add	sp, #8
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	20000a90 	.word	0x20000a90
 80081d0:	20000588 	.word	0x20000588

080081d4 <VerifyTxFrame>:
{
 80081d4:	b510      	push	{r4, lr}
 80081d6:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80081dc:	4b0d      	ldr	r3, [pc, #52]	; (8008214 <VerifyTxFrame+0x40>)
 80081de:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 80081e2:	b914      	cbnz	r4, 80081ea <VerifyTxFrame+0x16>
}
 80081e4:	4620      	mov	r0, r4
 80081e6:	b002      	add	sp, #8
 80081e8:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80081ea:	a801      	add	r0, sp, #4
 80081ec:	f002 f880 	bl	800a2f0 <LoRaMacCommandsGetSizeSerializedCmds>
 80081f0:	4604      	mov	r4, r0
 80081f2:	b968      	cbnz	r0, 8008210 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80081f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80081f8:	4b06      	ldr	r3, [pc, #24]	; (8008214 <VerifyTxFrame+0x40>)
 80081fa:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 80081fe:	4b06      	ldr	r3, [pc, #24]	; (8008218 <VerifyTxFrame+0x44>)
 8008200:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8008204:	f7fe ff38 	bl	8007078 <ValidatePayloadLength>
 8008208:	2800      	cmp	r0, #0
 800820a:	d1eb      	bne.n	80081e4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800820c:	2408      	movs	r4, #8
 800820e:	e7e9      	b.n	80081e4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008210:	2413      	movs	r4, #19
 8008212:	e7e7      	b.n	80081e4 <VerifyTxFrame+0x10>
 8008214:	20000a90 	.word	0x20000a90
 8008218:	20000588 	.word	0x20000588

0800821c <SecureFrame>:
{
 800821c:	b530      	push	{r4, r5, lr}
 800821e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8008224:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <SecureFrame+0x74>)
 8008226:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800822a:	b133      	cbz	r3, 800823a <SecureFrame+0x1e>
 800822c:	4605      	mov	r5, r0
 800822e:	460c      	mov	r4, r1
 8008230:	2b04      	cmp	r3, #4
 8008232:	d00b      	beq.n	800824c <SecureFrame+0x30>
 8008234:	2003      	movs	r0, #3
}
 8008236:	b003      	add	sp, #12
 8008238:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800823a:	4816      	ldr	r0, [pc, #88]	; (8008294 <SecureFrame+0x78>)
 800823c:	f002 fc18 	bl	800aa70 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008240:	bb00      	cbnz	r0, 8008284 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008242:	4b13      	ldr	r3, [pc, #76]	; (8008290 <SecureFrame+0x74>)
 8008244:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008248:	801a      	strh	r2, [r3, #0]
            break;
 800824a:	e7f4      	b.n	8008236 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800824c:	a801      	add	r0, sp, #4
 800824e:	f002 fbb1 	bl	800a9b4 <LoRaMacCryptoGetFCntUp>
 8008252:	b9c8      	cbnz	r0, 8008288 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008254:	4b0e      	ldr	r3, [pc, #56]	; (8008290 <SecureFrame+0x74>)
 8008256:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800825a:	b923      	cbnz	r3, 8008266 <SecureFrame+0x4a>
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <SecureFrame+0x74>)
 800825e:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8008262:	2b01      	cmp	r3, #1
 8008264:	d902      	bls.n	800826c <SecureFrame+0x50>
                fCntUp -= 1;
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	3b01      	subs	r3, #1
 800826a:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <SecureFrame+0x78>)
 800826e:	4622      	mov	r2, r4
 8008270:	4629      	mov	r1, r5
 8008272:	9801      	ldr	r0, [sp, #4]
 8008274:	f002 fc28 	bl	800aac8 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008278:	b940      	cbnz	r0, 800828c <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800827a:	4b05      	ldr	r3, [pc, #20]	; (8008290 <SecureFrame+0x74>)
 800827c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008280:	801a      	strh	r2, [r3, #0]
            break;
 8008282:	e7d8      	b.n	8008236 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008284:	2011      	movs	r0, #17
 8008286:	e7d6      	b.n	8008236 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008288:	2012      	movs	r0, #18
 800828a:	e7d4      	b.n	8008236 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800828c:	2011      	movs	r0, #17
 800828e:	e7d2      	b.n	8008236 <SecureFrame+0x1a>
 8008290:	20000588 	.word	0x20000588
 8008294:	20000690 	.word	0x20000690

08008298 <SendFrameOnChannel>:
{
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 80082a4:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80082a8:	4d33      	ldr	r5, [pc, #204]	; (8008378 <SendFrameOnChannel+0xe0>)
 80082aa:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 80082ae:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80082b2:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 80082b6:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80082ba:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80082bc:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80082be:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80082c0:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80082c2:	4c2e      	ldr	r4, [pc, #184]	; (800837c <SendFrameOnChannel+0xe4>)
 80082c4:	8823      	ldrh	r3, [r4, #0]
 80082c6:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80082ca:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 80082ce:	f10d 0207 	add.w	r2, sp, #7
 80082d2:	a902      	add	r1, sp, #8
 80082d4:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 80082d8:	f002 ff44 	bl	800b164 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80082e2:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 80082e6:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80082ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082ee:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80082f2:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80082f6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 80082fa:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80082fe:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8008302:	f001 feda 	bl	800a0ba <LoRaMacClassBIsBeaconModeActive>
 8008306:	bb58      	cbnz	r0, 8008360 <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008308:	4b1b      	ldr	r3, [pc, #108]	; (8008378 <SendFrameOnChannel+0xe0>)
 800830a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800830e:	2b01      	cmp	r3, #1
 8008310:	d02e      	beq.n	8008370 <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 8008312:	f001 fed5 	bl	800a0c0 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8008316:	4b18      	ldr	r3, [pc, #96]	; (8008378 <SendFrameOnChannel+0xe0>)
 8008318:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800831c:	4b17      	ldr	r3, [pc, #92]	; (800837c <SendFrameOnChannel+0xe4>)
 800831e:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 8008322:	b2c0      	uxtb	r0, r0
 8008324:	f7ff ff7a 	bl	800821c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8008328:	4604      	mov	r4, r0
 800832a:	b9b0      	cbnz	r0, 800835a <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800832c:	4b13      	ldr	r3, [pc, #76]	; (800837c <SendFrameOnChannel+0xe4>)
 800832e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008332:	f042 0202 	orr.w	r2, r2, #2
 8008336:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800833a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800833e:	b92b      	cbnz	r3, 800834c <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 8008340:	4a0e      	ldr	r2, [pc, #56]	; (800837c <SendFrameOnChannel+0xe4>)
 8008342:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 8008346:	3301      	adds	r3, #1
 8008348:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800834c:	4b0c      	ldr	r3, [pc, #48]	; (8008380 <SendFrameOnChannel+0xe8>)
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	480a      	ldr	r0, [pc, #40]	; (800837c <SendFrameOnChannel+0xe4>)
 8008352:	f830 1b02 	ldrh.w	r1, [r0], #2
 8008356:	b2c9      	uxtb	r1, r1
 8008358:	4798      	blx	r3
}
 800835a:	4620      	mov	r0, r4
 800835c:	b006      	add	sp, #24
 800835e:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008360:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 8008364:	f001 febb 	bl	800a0de <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8008368:	2800      	cmp	r0, #0
 800836a:	d0cd      	beq.n	8008308 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800836c:	2410      	movs	r4, #16
 800836e:	e7f4      	b.n	800835a <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 8008370:	f001 feb7 	bl	800a0e2 <LoRaMacClassBStopRxSlots>
 8008374:	e7cd      	b.n	8008312 <SendFrameOnChannel+0x7a>
 8008376:	bf00      	nop
 8008378:	20000a90 	.word	0x20000a90
 800837c:	20000588 	.word	0x20000588
 8008380:	08011ea4 	.word	0x08011ea4

08008384 <ScheduleTx>:
{
 8008384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008388:	b08c      	sub	sp, #48	; 0x30
 800838a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800838c:	f7ff fd92 	bl	8007eb4 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8008390:	4604      	mov	r4, r0
 8008392:	b118      	cbz	r0, 800839c <ScheduleTx+0x18>
}
 8008394:	4620      	mov	r0, r4
 8008396:	b00c      	add	sp, #48	; 0x30
 8008398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800839c:	f7fe fd4e 	bl	8006e3c <CalculateBackOff>
    status = SerializeTxFrame( );
 80083a0:	f7ff feb2 	bl	8008108 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80083a4:	4604      	mov	r4, r0
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d1f4      	bne.n	8008394 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80083aa:	4e36      	ldr	r6, [pc, #216]	; (8008484 <ScheduleTx+0x100>)
 80083ac:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80083ae:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80083b0:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 80083b4:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80083b8:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
 80083bc:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80083c0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80083c4:	4640      	mov	r0, r8
 80083c6:	f008 fb9d 	bl	8010b04 <SysTimeGetMcuTime>
 80083ca:	af02      	add	r7, sp, #8
 80083cc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 80083d6:	e898 0006 	ldmia.w	r8, {r1, r2}
 80083da:	4638      	mov	r0, r7
 80083dc:	f008 fb2f 	bl	8010a3e <SysTimeSub>
 80083e0:	ab07      	add	r3, sp, #28
 80083e2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80083e6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80083ea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80083ec:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80083fa:	4b23      	ldr	r3, [pc, #140]	; (8008488 <ScheduleTx+0x104>)
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008402:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 8008406:	b92b      	cbnz	r3, 8008414 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8008408:	2301      	movs	r3, #1
 800840a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800840e:	2300      	movs	r3, #0
 8008410:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8008414:	4a1c      	ldr	r2, [pc, #112]	; (8008488 <ScheduleTx+0x104>)
 8008416:	481b      	ldr	r0, [pc, #108]	; (8008484 <ScheduleTx+0x100>)
 8008418:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	f202 4384 	addw	r3, r2, #1156	; 0x484
 8008422:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8008426:	a904      	add	r1, sp, #16
 8008428:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800842c:	f002 ff15 	bl	800b25a <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8008430:	b1b0      	cbz	r0, 8008460 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008432:	280b      	cmp	r0, #11
 8008434:	d122      	bne.n	800847c <ScheduleTx+0xf8>
 8008436:	b31d      	cbz	r5, 8008480 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8008438:	4b13      	ldr	r3, [pc, #76]	; (8008488 <ScheduleTx+0x104>)
 800843a:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 800843e:	2900      	cmp	r1, #0
 8008440:	d0a8      	beq.n	8008394 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008442:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008446:	f042 0220 	orr.w	r2, r2, #32
 800844a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800844e:	f503 755a 	add.w	r5, r3, #872	; 0x368
 8008452:	4628      	mov	r0, r5
 8008454:	f008 fcc2 	bl	8010ddc <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8008458:	4628      	mov	r0, r5
 800845a:	f008 fc79 	bl	8010d50 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800845e:	e799      	b.n	8008394 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 8008460:	f7ff fe76 	bl	8008150 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8008464:	f7ff feb6 	bl	80081d4 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8008468:	4604      	mov	r4, r0
 800846a:	2800      	cmp	r0, #0
 800846c:	d192      	bne.n	8008394 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800846e:	4b06      	ldr	r3, [pc, #24]	; (8008488 <ScheduleTx+0x104>)
 8008470:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8008474:	f7ff ff10 	bl	8008298 <SendFrameOnChannel>
 8008478:	4604      	mov	r4, r0
 800847a:	e78b      	b.n	8008394 <ScheduleTx+0x10>
            return status;
 800847c:	4604      	mov	r4, r0
 800847e:	e789      	b.n	8008394 <ScheduleTx+0x10>
 8008480:	4604      	mov	r4, r0
 8008482:	e787      	b.n	8008394 <ScheduleTx+0x10>
 8008484:	20000a90 	.word	0x20000a90
 8008488:	20000588 	.word	0x20000588

0800848c <OnTxDelayedTimerEvent>:
{
 800848c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800848e:	4c11      	ldr	r4, [pc, #68]	; (80084d4 <OnTxDelayedTimerEvent+0x48>)
 8008490:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8008494:	f008 fc02 	bl	8010c9c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008498:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800849c:	f023 0320 	bic.w	r3, r3, #32
 80084a0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 80084a4:	2001      	movs	r0, #1
 80084a6:	f7ff ff6d 	bl	8008384 <ScheduleTx>
 80084aa:	b108      	cbz	r0, 80084b0 <OnTxDelayedTimerEvent+0x24>
 80084ac:	280b      	cmp	r0, #11
 80084ae:	d100      	bne.n	80084b2 <OnTxDelayedTimerEvent+0x26>
}
 80084b0:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80084b2:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <OnTxDelayedTimerEvent+0x4c>)
 80084b4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80084b8:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80084bc:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 80084c0:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80084c4:	2009      	movs	r0, #9
 80084c6:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80084ca:	f002 f843 	bl	800a554 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80084ce:	f7fe fd47 	bl	8006f60 <StopRetransmission>
}
 80084d2:	e7ed      	b.n	80084b0 <OnTxDelayedTimerEvent+0x24>
 80084d4:	20000588 	.word	0x20000588
 80084d8:	20000a90 	.word	0x20000a90

080084dc <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80084dc:	4b23      	ldr	r3, [pc, #140]	; (800856c <LoRaMacHandleMcpsRequest+0x90>)
 80084de:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80084e2:	f013 0f01 	tst.w	r3, #1
 80084e6:	d040      	beq.n	800856a <LoRaMacHandleMcpsRequest+0x8e>
{
 80084e8:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80084ea:	4b20      	ldr	r3, [pc, #128]	; (800856c <LoRaMacHandleMcpsRequest+0x90>)
 80084ec:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80084f0:	b12b      	cbz	r3, 80084fe <LoRaMacHandleMcpsRequest+0x22>
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d003      	beq.n	80084fe <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d007      	beq.n	800850a <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 80084fa:	2400      	movs	r4, #0
 80084fc:	e003      	b.n	8008506 <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80084fe:	f7fe fcf3 	bl	8006ee8 <CheckRetransUnconfirmedUplink>
 8008502:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 8008504:	b9a4      	cbnz	r4, 8008530 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 8008506:	b31c      	cbz	r4, 8008550 <LoRaMacHandleMcpsRequest+0x74>
}
 8008508:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 800850a:	4b18      	ldr	r3, [pc, #96]	; (800856c <LoRaMacHandleMcpsRequest+0x90>)
 800850c:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8008510:	b1e3      	cbz	r3, 800854c <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 8008512:	f7fe fd0d 	bl	8006f30 <CheckRetransConfirmedUplink>
 8008516:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008518:	4b15      	ldr	r3, [pc, #84]	; (8008570 <LoRaMacHandleMcpsRequest+0x94>)
 800851a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f0      	bne.n	8008504 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 8008522:	b910      	cbnz	r0, 800852a <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 8008524:	f7fe fd5c 	bl	8006fe0 <AckTimeoutRetriesProcess>
 8008528:	e7ec      	b.n	8008504 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 800852a:	f7ff fdbf 	bl	80080ac <AckTimeoutRetriesFinalize>
 800852e:	e7e9      	b.n	8008504 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 8008530:	4c0e      	ldr	r4, [pc, #56]	; (800856c <LoRaMacHandleMcpsRequest+0x90>)
 8008532:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8008536:	f008 fbb1 	bl	8010c9c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800853a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800853e:	f023 0320 	bic.w	r3, r3, #32
 8008542:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 8008546:	f7fe fd0b 	bl	8006f60 <StopRetransmission>
 800854a:	e7dd      	b.n	8008508 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 800854c:	2401      	movs	r4, #1
 800854e:	e7da      	b.n	8008506 <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8008550:	4b06      	ldr	r3, [pc, #24]	; (800856c <LoRaMacHandleMcpsRequest+0x90>)
 8008552:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8008556:	f36f 1245 	bfc	r2, #5, #1
 800855a:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800855e:	2000      	movs	r0, #0
 8008560:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 8008564:	f7ff ff92 	bl	800848c <OnTxDelayedTimerEvent>
}
 8008568:	e7ce      	b.n	8008508 <LoRaMacHandleMcpsRequest+0x2c>
 800856a:	4770      	bx	lr
 800856c:	20000588 	.word	0x20000588
 8008570:	20000a90 	.word	0x20000a90

08008574 <LoRaMacHandleRequestEvents>:
{
 8008574:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008576:	4b22      	ldr	r3, [pc, #136]	; (8008600 <LoRaMacHandleRequestEvents+0x8c>)
 8008578:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800857c:	bb7b      	cbnz	r3, 80085de <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800857e:	4b20      	ldr	r3, [pc, #128]	; (8008600 <LoRaMacHandleRequestEvents+0x8c>)
 8008580:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 8008584:	f014 0501 	ands.w	r5, r4, #1
 8008588:	d005      	beq.n	8008596 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800858a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800858e:	f36f 0200 	bfc	r2, #0, #1
 8008592:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008596:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <LoRaMacHandleRequestEvents+0x8c>)
 8008598:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800859c:	f013 0f04 	tst.w	r3, #4
 80085a0:	d006      	beq.n	80085b0 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80085a2:	4b17      	ldr	r3, [pc, #92]	; (8008600 <LoRaMacHandleRequestEvents+0x8c>)
 80085a4:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 80085a8:	f36f 0282 	bfc	r2, #2, #1
 80085ac:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80085b0:	2001      	movs	r0, #1
 80085b2:	f7fe fbd7 	bl	8006d64 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 80085b6:	b135      	cbz	r5, 80085c6 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80085b8:	4811      	ldr	r0, [pc, #68]	; (8008600 <LoRaMacHandleRequestEvents+0x8c>)
 80085ba:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 80085c4:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80085c6:	f014 0f04 	tst.w	r4, #4
 80085ca:	d109      	bne.n	80085e0 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 80085cc:	f001 fd79 	bl	800a0c2 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80085d0:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <LoRaMacHandleRequestEvents+0x8c>)
 80085d2:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 80085d6:	f36f 1245 	bfc	r2, #5, #1
 80085da:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 80085de:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80085e0:	4808      	ldr	r0, [pc, #32]	; (8008604 <LoRaMacHandleRequestEvents+0x90>)
 80085e2:	f001 ffe1 	bl	800a5a8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80085e6:	f002 f811 	bl	800a60c <LoRaMacConfirmQueueGetCnt>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d0ee      	beq.n	80085cc <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80085ee:	4a04      	ldr	r2, [pc, #16]	; (8008600 <LoRaMacHandleRequestEvents+0x8c>)
 80085f0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80085f4:	f043 0304 	orr.w	r3, r3, #4
 80085f8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80085fc:	e7e6      	b.n	80085cc <LoRaMacHandleRequestEvents+0x58>
 80085fe:	bf00      	nop
 8008600:	20000588 	.word	0x20000588
 8008604:	200009d4 	.word	0x200009d4

08008608 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 800860a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800860e:	b103      	cbz	r3, 8008612 <LoRaMacHandleScheduleUplinkEvent+0xa>
 8008610:	4770      	bx	lr
{
 8008612:	b500      	push	{lr}
 8008614:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 8008616:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800861a:	f10d 0007 	add.w	r0, sp, #7
 800861e:	f001 fea5 	bl	800a36c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8008622:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008626:	b913      	cbnz	r3, 800862e <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 8008628:	b003      	add	sp, #12
 800862a:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 800862e:	f7fe fbfb 	bl	8006e28 <SetMlmeScheduleUplinkIndication>
}
 8008632:	e7f9      	b.n	8008628 <LoRaMacHandleScheduleUplinkEvent+0x20>
 8008634:	20000588 	.word	0x20000588

08008638 <LoRaMacHandleNvm>:
{
 8008638:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800863a:	4b30      	ldr	r3, [pc, #192]	; (80086fc <LoRaMacHandleNvm+0xc4>)
 800863c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008640:	b103      	cbz	r3, 8008644 <LoRaMacHandleNvm+0xc>
}
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8008646:	2124      	movs	r1, #36	; 0x24
 8008648:	f005 fe70 	bl	800e32c <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800864c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800864e:	4283      	cmp	r3, r0
 8008650:	d052      	beq.n	80086f8 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 8008652:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8008654:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8008656:	2114      	movs	r1, #20
 8008658:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800865c:	f005 fe66 	bl	800e32c <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8008660:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008662:	4283      	cmp	r3, r0
 8008664:	d002      	beq.n	800866c <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8008666:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008668:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800866c:	21d4      	movs	r1, #212	; 0xd4
 800866e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8008672:	f005 fe5b 	bl	800e32c <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8008676:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800867a:	4283      	cmp	r3, r0
 800867c:	d003      	beq.n	8008686 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800867e:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8008682:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8008686:	21bc      	movs	r1, #188	; 0xbc
 8008688:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800868c:	f005 fe4e 	bl	800e32c <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8008690:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8008694:	4283      	cmp	r3, r0
 8008696:	d003      	beq.n	80086a0 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8008698:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800869c:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80086a0:	21a0      	movs	r1, #160	; 0xa0
 80086a2:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 80086a6:	f005 fe41 	bl	800e32c <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 80086aa:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 80086ae:	4283      	cmp	r3, r0
 80086b0:	d003      	beq.n	80086ba <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 80086b2:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80086b6:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80086ba:	f44f 715e 	mov.w	r1, #888	; 0x378
 80086be:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80086c2:	f005 fe33 	bl	800e32c <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80086c6:	f8d4 35f4 	ldr.w	r3, [r4, #1524]	; 0x5f4
 80086ca:	4283      	cmp	r3, r0
 80086cc:	d003      	beq.n	80086d6 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 80086ce:	f8c4 05f4 	str.w	r0, [r4, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80086d2:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80086d6:	2114      	movs	r1, #20
 80086d8:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 80086dc:	f005 fe26 	bl	800e32c <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80086e0:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 80086e4:	4283      	cmp	r3, r0
 80086e6:	d003      	beq.n	80086f0 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 80086e8:	f8c4 060c 	str.w	r0, [r4, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80086ec:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 80086f0:	4628      	mov	r0, r5
 80086f2:	f7fe fc5d 	bl	8006fb0 <CallNvmDataChangeCallback>
 80086f6:	e7a4      	b.n	8008642 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80086f8:	2500      	movs	r5, #0
 80086fa:	e7ac      	b.n	8008656 <LoRaMacHandleNvm+0x1e>
 80086fc:	20000588 	.word	0x20000588

08008700 <RestoreNvmData>:
    if( nvm == NULL )
 8008700:	2800      	cmp	r0, #0
 8008702:	d07a      	beq.n	80087fa <RestoreNvmData+0xfa>
{
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8008708:	4b3d      	ldr	r3, [pc, #244]	; (8008800 <RestoreNvmData+0x100>)
 800870a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800870e:	2b01      	cmp	r3, #1
 8008710:	d001      	beq.n	8008716 <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 8008712:	2001      	movs	r0, #1
}
 8008714:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8008716:	2124      	movs	r1, #36	; 0x24
 8008718:	f005 fe08 	bl	800e32c <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 800871c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800871e:	4283      	cmp	r3, r0
 8008720:	d032      	beq.n	8008788 <RestoreNvmData+0x88>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8008722:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8008726:	2114      	movs	r1, #20
 8008728:	4628      	mov	r0, r5
 800872a:	f005 fdff 	bl	800e32c <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 800872e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008730:	4283      	cmp	r3, r0
 8008732:	d02f      	beq.n	8008794 <RestoreNvmData+0x94>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8008734:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8008738:	21d4      	movs	r1, #212	; 0xd4
 800873a:	4628      	mov	r0, r5
 800873c:	f005 fdf6 	bl	800e32c <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8008740:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8008744:	4283      	cmp	r3, r0
 8008746:	d02b      	beq.n	80087a0 <RestoreNvmData+0xa0>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8008748:	f504 758c 	add.w	r5, r4, #280	; 0x118
 800874c:	21bc      	movs	r1, #188	; 0xbc
 800874e:	4628      	mov	r0, r5
 8008750:	f005 fdec 	bl	800e32c <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8008754:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8008758:	4283      	cmp	r3, r0
 800875a:	d03b      	beq.n	80087d4 <RestoreNvmData+0xd4>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800875c:	f504 75ec 	add.w	r5, r4, #472	; 0x1d8
 8008760:	21a0      	movs	r1, #160	; 0xa0
 8008762:	4628      	mov	r0, r5
 8008764:	f005 fde2 	bl	800e32c <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8008768:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 800876c:	4283      	cmp	r3, r0
 800876e:	d037      	beq.n	80087e0 <RestoreNvmData+0xe0>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8008770:	f504 65bf 	add.w	r5, r4, #1528	; 0x5f8
 8008774:	2114      	movs	r1, #20
 8008776:	4628      	mov	r0, r5
 8008778:	f005 fdd8 	bl	800e32c <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 800877c:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8008780:	4283      	cmp	r3, r0
 8008782:	d033      	beq.n	80087ec <RestoreNvmData+0xec>
    return LORAMAC_STATUS_OK;
 8008784:	2000      	movs	r0, #0
 8008786:	e7c5      	b.n	8008714 <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8008788:	2228      	movs	r2, #40	; 0x28
 800878a:	4621      	mov	r1, r4
 800878c:	481d      	ldr	r0, [pc, #116]	; (8008804 <RestoreNvmData+0x104>)
 800878e:	f005 fdac 	bl	800e2ea <memcpy1>
 8008792:	e7c6      	b.n	8008722 <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8008794:	2218      	movs	r2, #24
 8008796:	4629      	mov	r1, r5
 8008798:	481b      	ldr	r0, [pc, #108]	; (8008808 <RestoreNvmData+0x108>)
 800879a:	f005 fda6 	bl	800e2ea <memcpy1>
 800879e:	e7c9      	b.n	8008734 <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80087a0:	4e18      	ldr	r6, [pc, #96]	; (8008804 <RestoreNvmData+0x104>)
 80087a2:	22d8      	movs	r2, #216	; 0xd8
 80087a4:	4629      	mov	r1, r5
 80087a6:	f106 0040 	add.w	r0, r6, #64	; 0x40
 80087aa:	f005 fd9e 	bl	800e2ea <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80087ae:	4b14      	ldr	r3, [pc, #80]	; (8008800 <RestoreNvmData+0x100>)
 80087b0:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80087b4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80087b8:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 80087ba:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80087be:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
 80087c2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80087cc:	2202      	movs	r2, #2
 80087ce:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 80087d2:	e7b9      	b.n	8008748 <RestoreNvmData+0x48>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 80087d4:	22c0      	movs	r2, #192	; 0xc0
 80087d6:	4629      	mov	r1, r5
 80087d8:	480c      	ldr	r0, [pc, #48]	; (800880c <RestoreNvmData+0x10c>)
 80087da:	f005 fd86 	bl	800e2ea <memcpy1>
 80087de:	e7bd      	b.n	800875c <RestoreNvmData+0x5c>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80087e0:	22a4      	movs	r2, #164	; 0xa4
 80087e2:	4629      	mov	r1, r5
 80087e4:	480a      	ldr	r0, [pc, #40]	; (8008810 <RestoreNvmData+0x110>)
 80087e6:	f005 fd80 	bl	800e2ea <memcpy1>
 80087ea:	e7c1      	b.n	8008770 <RestoreNvmData+0x70>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 80087ec:	2218      	movs	r2, #24
 80087ee:	4629      	mov	r1, r5
 80087f0:	4808      	ldr	r0, [pc, #32]	; (8008814 <RestoreNvmData+0x114>)
 80087f2:	f005 fd7a 	bl	800e2ea <memcpy1>
    return LORAMAC_STATUS_OK;
 80087f6:	2000      	movs	r0, #0
 80087f8:	e78c      	b.n	8008714 <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80087fa:	2003      	movs	r0, #3
}
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	20000588 	.word	0x20000588
 8008804:	20000a90 	.word	0x20000a90
 8008808:	20000ab8 	.word	0x20000ab8
 800880c:	20000ba8 	.word	0x20000ba8
 8008810:	20000c68 	.word	0x20000c68
 8008814:	20001088 	.word	0x20001088

08008818 <OpenContinuousRxCWindow>:
{
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800881c:	4c12      	ldr	r4, [pc, #72]	; (8008868 <OpenContinuousRxCWindow+0x50>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800881e:	4d13      	ldr	r5, [pc, #76]	; (800886c <OpenContinuousRxCWindow+0x54>)
 8008820:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 8008824:	9600      	str	r6, [sp, #0]
 8008826:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008828:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800882c:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 8008830:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008834:	f002 fc72 	bl	800b11c <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008838:	2302      	movs	r3, #2
 800883a:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800883e:	2301      	movs	r3, #1
 8008840:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008844:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 8008848:	4631      	mov	r1, r6
 800884a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800884e:	f002 fc79 	bl	800b144 <RegionRxConfig>
 8008852:	b138      	cbz	r0, 8008864 <OpenContinuousRxCWindow+0x4c>
        Radio.Rx( 0 ); // Continuous mode
 8008854:	4b06      	ldr	r3, [pc, #24]	; (8008870 <OpenContinuousRxCWindow+0x58>)
 8008856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008858:	2000      	movs	r0, #0
 800885a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800885c:	f895 23f3 	ldrb.w	r2, [r5, #1011]	; 0x3f3
 8008860:	f885 2480 	strb.w	r2, [r5, #1152]	; 0x480
}
 8008864:	b002      	add	sp, #8
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	20000a90 	.word	0x20000a90
 800886c:	20000588 	.word	0x20000588
 8008870:	08011ea4 	.word	0x08011ea4

08008874 <RxWindowSetup>:
{
 8008874:	b510      	push	{r4, lr}
 8008876:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8008878:	f008 fa10 	bl	8010c9c <UTIL_TIMER_Stop>
    Radio.Standby( );
 800887c:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <RxWindowSetup+0x34>)
 800887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008880:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008882:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <RxWindowSetup+0x38>)
 8008884:	4621      	mov	r1, r4
 8008886:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <RxWindowSetup+0x3c>)
 8008888:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800888c:	f002 fc5a 	bl	800b144 <RegionRxConfig>
 8008890:	b140      	cbz	r0, 80088a4 <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8008892:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <RxWindowSetup+0x34>)
 8008894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008896:	4a06      	ldr	r2, [pc, #24]	; (80088b0 <RxWindowSetup+0x3c>)
 8008898:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800889a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800889c:	7ce2      	ldrb	r2, [r4, #19]
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <RxWindowSetup+0x40>)
 80088a0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 80088a4:	bd10      	pop	{r4, pc}
 80088a6:	bf00      	nop
 80088a8:	08011ea4 	.word	0x08011ea4
 80088ac:	200009a8 	.word	0x200009a8
 80088b0:	20000a90 	.word	0x20000a90
 80088b4:	20000588 	.word	0x20000588

080088b8 <OnRxWindow2TimerEvent>:
{
 80088b8:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80088ba:	4b11      	ldr	r3, [pc, #68]	; (8008900 <OnRxWindow2TimerEvent+0x48>)
 80088bc:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80088c0:	b903      	cbnz	r3, 80088c4 <OnRxWindow2TimerEvent+0xc>
}
 80088c2:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80088c4:	480e      	ldr	r0, [pc, #56]	; (8008900 <OnRxWindow2TimerEvent+0x48>)
 80088c6:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 80088ca:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80088ce:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <OnRxWindow2TimerEvent+0x4c>)
 80088d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80088d2:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80088d6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80088da:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80088de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088e2:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80088e6:	2300      	movs	r3, #0
 80088e8:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80088f2:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 80088f6:	f500 7066 	add.w	r0, r0, #920	; 0x398
 80088fa:	f7ff ffbb 	bl	8008874 <RxWindowSetup>
 80088fe:	e7e0      	b.n	80088c2 <OnRxWindow2TimerEvent+0xa>
 8008900:	20000588 	.word	0x20000588
 8008904:	20000a90 	.word	0x20000a90

08008908 <OnRxWindow1TimerEvent>:
{
 8008908:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800890a:	480f      	ldr	r0, [pc, #60]	; (8008948 <OnRxWindow1TimerEvent+0x40>)
 800890c:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8008910:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8008914:	4b0d      	ldr	r3, [pc, #52]	; (800894c <OnRxWindow1TimerEvent+0x44>)
 8008916:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800891a:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800891e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8008922:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008926:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800892a:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800892e:	2300      	movs	r3, #0
 8008930:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8008934:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8008938:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800893c:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8008940:	f7ff ff98 	bl	8008874 <RxWindowSetup>
}
 8008944:	bd08      	pop	{r3, pc}
 8008946:	bf00      	nop
 8008948:	20000588 	.word	0x20000588
 800894c:	20000a90 	.word	0x20000a90

08008950 <OnRadioRxTimeout>:
{
 8008950:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008952:	4a09      	ldr	r2, [pc, #36]	; (8008978 <OnRadioRxTimeout+0x28>)
 8008954:	7813      	ldrb	r3, [r2, #0]
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800895c:	4b07      	ldr	r3, [pc, #28]	; (800897c <OnRadioRxTimeout+0x2c>)
 800895e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008962:	b113      	cbz	r3, 800896a <OnRadioRxTimeout+0x1a>
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	b103      	cbz	r3, 800896a <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008968:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800896a:	4b05      	ldr	r3, [pc, #20]	; (8008980 <OnRadioRxTimeout+0x30>)
 800896c:	2201      	movs	r2, #1
 800896e:	2100      	movs	r1, #0
 8008970:	2002      	movs	r0, #2
 8008972:	f007 fe4f 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 8008976:	bd08      	pop	{r3, pc}
 8008978:	20000584 	.word	0x20000584
 800897c:	20000588 	.word	0x20000588
 8008980:	08011840 	.word	0x08011840

08008984 <OnRadioTxTimeout>:
{
 8008984:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008986:	4a09      	ldr	r2, [pc, #36]	; (80089ac <OnRadioTxTimeout+0x28>)
 8008988:	7813      	ldrb	r3, [r2, #0]
 800898a:	f043 0304 	orr.w	r3, r3, #4
 800898e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <OnRadioTxTimeout+0x2c>)
 8008992:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008996:	b113      	cbz	r3, 800899e <OnRadioTxTimeout+0x1a>
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	b103      	cbz	r3, 800899e <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800899c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800899e:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <OnRadioTxTimeout+0x30>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	2100      	movs	r1, #0
 80089a4:	2002      	movs	r0, #2
 80089a6:	f007 fe35 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 80089aa:	bd08      	pop	{r3, pc}
 80089ac:	20000584 	.word	0x20000584
 80089b0:	20000588 	.word	0x20000588
 80089b4:	08011850 	.word	0x08011850

080089b8 <OnRadioRxDone>:
{
 80089b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089bc:	4680      	mov	r8, r0
 80089be:	460f      	mov	r7, r1
 80089c0:	4616      	mov	r6, r2
 80089c2:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80089c4:	f008 f92a 	bl	8010c1c <UTIL_TIMER_GetCurrentTime>
 80089c8:	4c0d      	ldr	r4, [pc, #52]	; (8008a00 <OnRadioRxDone+0x48>)
 80089ca:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 80089cc:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 80089d0:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 80089d2:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 80089d4:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 80089d6:	4a0b      	ldr	r2, [pc, #44]	; (8008a04 <OnRadioRxDone+0x4c>)
 80089d8:	7813      	ldrb	r3, [r2, #0]
 80089da:	f043 0308 	orr.w	r3, r3, #8
 80089de:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <OnRadioRxDone+0x50>)
 80089e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80089e6:	b113      	cbz	r3, 80089ee <OnRadioRxDone+0x36>
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	b103      	cbz	r3, 80089ee <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80089ec:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80089ee:	4b07      	ldr	r3, [pc, #28]	; (8008a0c <OnRadioRxDone+0x54>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	2100      	movs	r1, #0
 80089f4:	2002      	movs	r0, #2
 80089f6:	f007 fe0d 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 80089fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fe:	bf00      	nop
 8008a00:	200010a0 	.word	0x200010a0
 8008a04:	20000584 	.word	0x20000584
 8008a08:	20000588 	.word	0x20000588
 8008a0c:	08011860 	.word	0x08011860

08008a10 <OnRadioTxDone>:
{
 8008a10:	b530      	push	{r4, r5, lr}
 8008a12:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008a14:	f008 f902 	bl	8010c1c <UTIL_TIMER_GetCurrentTime>
 8008a18:	4b0f      	ldr	r3, [pc, #60]	; (8008a58 <OnRadioTxDone+0x48>)
 8008a1a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008a1c:	4d0f      	ldr	r5, [pc, #60]	; (8008a5c <OnRadioTxDone+0x4c>)
 8008a1e:	466c      	mov	r4, sp
 8008a20:	4620      	mov	r0, r4
 8008a22:	f008 f84d 	bl	8010ac0 <SysTimeGet>
 8008a26:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8008a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a2e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8008a32:	4a0b      	ldr	r2, [pc, #44]	; (8008a60 <OnRadioTxDone+0x50>)
 8008a34:	7813      	ldrb	r3, [r2, #0]
 8008a36:	f043 0310 	orr.w	r3, r3, #16
 8008a3a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008a3c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8008a40:	b113      	cbz	r3, 8008a48 <OnRadioTxDone+0x38>
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	b103      	cbz	r3, 8008a48 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008a46:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <OnRadioTxDone+0x54>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	2002      	movs	r0, #2
 8008a50:	f007 fde0 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 8008a54:	b003      	add	sp, #12
 8008a56:	bd30      	pop	{r4, r5, pc}
 8008a58:	200010b0 	.word	0x200010b0
 8008a5c:	20000588 	.word	0x20000588
 8008a60:	20000584 	.word	0x20000584
 8008a64:	08011870 	.word	0x08011870

08008a68 <ResetMacParameters>:
{
 8008a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6a:	b08f      	sub	sp, #60	; 0x3c
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8008a6c:	4c4d      	ldr	r4, [pc, #308]	; (8008ba4 <ResetMacParameters+0x13c>)
 8008a6e:	2600      	movs	r6, #0
 8008a70:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    Nvm.MacGroup1.AdrAckCounter = 0;
 8008a74:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8008a76:	4d4c      	ldr	r5, [pc, #304]	; (8008ba8 <ResetMacParameters+0x140>)
 8008a78:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8008a7c:	2701      	movs	r7, #1
 8008a7e:	f885 7411 	strb.w	r7, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008a82:	f885 7412 	strb.w	r7, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8008a86:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 8008a8a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8008a8e:	f8a4 7102 	strh.w	r7, [r4, #258]	; 0x102
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008a92:	f994 30c4 	ldrsb.w	r3, [r4, #196]	; 0xc4
 8008a96:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8008a9a:	f994 30c5 	ldrsb.w	r3, [r4, #197]	; 0xc5
 8008a9e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8008aa2:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8008aa6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8008aaa:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8008aae:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 8008ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ab6:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8008aba:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8008abe:	f104 02ac 	add.w	r2, r4, #172	; 0xac
 8008ac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ac6:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8008aca:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8008ace:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8008ad2:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8008ad6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8008ada:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8008ade:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8008ae0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8008ae4:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 8008ae6:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8008aea:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8008aee:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8008af2:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8008af6:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8008af8:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 8008afc:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008afe:	a901      	add	r1, sp, #4
 8008b00:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008b04:	f002 facf 	bl	800b0a6 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8008b08:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008b0c:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b12:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008b16:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8008b1a:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008b1e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8008b22:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008b26:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8008b2a:	f885 73df 	strb.w	r7, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008b2e:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 8008b32:	f505 7c73 	add.w	ip, r5, #972	; 0x3cc
 8008b36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b3c:	f8dc 3000 	ldr.w	r3, [ip]
 8008b40:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008b42:	f885 73f2 	strb.w	r7, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008b46:	2302      	movs	r3, #2
 8008b48:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 8008b4c:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8008b4e:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 8008b50:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8008b54:	b11b      	cbz	r3, 8008b5e <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8008b5e:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <ResetMacParameters+0x140>)
 8008b60:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8008b64:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8008b66:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 8008b6a:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8008b6c:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 8008b70:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8008b72:	f203 4381 	addw	r3, r3, #1153	; 0x481
 8008b76:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8008b78:	4a0a      	ldr	r2, [pc, #40]	; (8008ba4 <ResetMacParameters+0x13c>)
 8008b7a:	f102 03cc 	add.w	r3, r2, #204	; 0xcc
 8008b7e:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8008b80:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8008b84:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8008b86:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8008b8a:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8008b8c:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 8008b90:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008b92:	f502 62bf 	add.w	r2, r2, #1528	; 0x5f8
 8008b96:	a90c      	add	r1, sp, #48	; 0x30
 8008b98:	a804      	add	r0, sp, #16
 8008b9a:	f001 fa7d 	bl	800a098 <LoRaMacClassBInit>
}
 8008b9e:	b00f      	add	sp, #60	; 0x3c
 8008ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000a90 	.word	0x20000a90
 8008ba8:	20000588 	.word	0x20000588

08008bac <SwitchClass>:
{
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8008bb0:	4b3e      	ldr	r3, [pc, #248]	; (8008cac <SwitchClass+0x100>)
 8008bb2:	f893 50fc 	ldrb.w	r5, [r3, #252]	; 0xfc
 8008bb6:	2d01      	cmp	r5, #1
 8008bb8:	d064      	beq.n	8008c84 <SwitchClass+0xd8>
 8008bba:	2d02      	cmp	r5, #2
 8008bbc:	d06a      	beq.n	8008c94 <SwitchClass+0xe8>
 8008bbe:	b10d      	cbz	r5, 8008bc4 <SwitchClass+0x18>
 8008bc0:	2003      	movs	r0, #3
}
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 8008bc4:	b930      	cbnz	r0, 8008bd4 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8008bc6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8008bca:	3364      	adds	r3, #100	; 0x64
 8008bcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008bd0:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 8008bd4:	2c01      	cmp	r4, #1
 8008bd6:	d021      	beq.n	8008c1c <SwitchClass+0x70>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008bd8:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8008bda:	2c02      	cmp	r4, #2
 8008bdc:	d1f1      	bne.n	8008bc2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008bde:	4b33      	ldr	r3, [pc, #204]	; (8008cac <SwitchClass+0x100>)
 8008be0:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008be4:	4e32      	ldr	r6, [pc, #200]	; (8008cb0 <SwitchClass+0x104>)
 8008be6:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 8008bea:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 8008bee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bf4:	f8dc 3000 	ldr.w	r3, [ip]
 8008bf8:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008c00:	2300      	movs	r3, #0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dd13      	ble.n	8008c2e <SwitchClass+0x82>
                MacCtx.NodeAckRequested = false;
 8008c06:	4b2a      	ldr	r3, [pc, #168]	; (8008cb0 <SwitchClass+0x104>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 8008c0e:	4b29      	ldr	r3, [pc, #164]	; (8008cb4 <SwitchClass+0x108>)
 8008c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c12:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8008c14:	f7ff fe00 	bl	8008818 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8008c18:	4628      	mov	r0, r5
 8008c1a:	e7d2      	b.n	8008bc2 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f001 fa51 	bl	800a0c4 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d1d9      	bne.n	8008bda <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8008c26:	4b21      	ldr	r3, [pc, #132]	; (8008cac <SwitchClass+0x100>)
 8008c28:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8008c2c:	e7d5      	b.n	8008bda <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8008c2e:	4618      	mov	r0, r3
 8008c30:	4a1e      	ldr	r2, [pc, #120]	; (8008cac <SwitchClass+0x100>)
 8008c32:	212c      	movs	r1, #44	; 0x2c
 8008c34:	fb01 2203 	mla	r2, r1, r3, r2
 8008c38:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
 8008c3c:	b912      	cbnz	r2, 8008c44 <SwitchClass+0x98>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008c3e:	3301      	adds	r3, #1
 8008c40:	b25b      	sxtb	r3, r3
 8008c42:	e7de      	b.n	8008c02 <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008c44:	4a19      	ldr	r2, [pc, #100]	; (8008cac <SwitchClass+0x100>)
 8008c46:	fb01 2000 	mla	r0, r1, r0, r2
 8008c4a:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 8008c4e:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8008c50:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 8008c54:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8008c58:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <SwitchClass+0x104>)
 8008c5a:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8008c5e:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8008c62:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008c66:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8008c6a:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008c6e:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8008c72:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008c76:	2203      	movs	r2, #3
 8008c78:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8008c82:	e7c0      	b.n	8008c06 <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8008c84:	f001 fa1e 	bl	800a0c4 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d19a      	bne.n	8008bc2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008c8c:	4b07      	ldr	r3, [pc, #28]	; (8008cac <SwitchClass+0x100>)
 8008c8e:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8008c92:	e796      	b.n	8008bc2 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8008c94:	b938      	cbnz	r0, 8008ca6 <SwitchClass+0xfa>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008c96:	4b05      	ldr	r3, [pc, #20]	; (8008cac <SwitchClass+0x100>)
 8008c98:	f883 00fc 	strb.w	r0, [r3, #252]	; 0xfc
                Radio.Sleep( );
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <SwitchClass+0x108>)
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	e78d      	b.n	8008bc2 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008ca6:	2003      	movs	r0, #3
 8008ca8:	e78b      	b.n	8008bc2 <SwitchClass+0x16>
 8008caa:	bf00      	nop
 8008cac:	20000a90 	.word	0x20000a90
 8008cb0:	20000588 	.word	0x20000588
 8008cb4:	08011ea4 	.word	0x08011ea4

08008cb8 <SendReJoinReq>:
{
 8008cb8:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 8008cba:	28ff      	cmp	r0, #255	; 0xff
 8008cbc:	d003      	beq.n	8008cc6 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8008cbe:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8008cc0:	f7ff fb60 	bl	8008384 <ScheduleTx>
}
 8008cc4:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	f7ff ff70 	bl	8008bac <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008ccc:	4d0e      	ldr	r5, [pc, #56]	; (8008d08 <SendReJoinReq+0x50>)
 8008cce:	2400      	movs	r4, #0
 8008cd0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8008cd4:	1cab      	adds	r3, r5, #2
 8008cd6:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008cda:	23ff      	movs	r3, #255	; 0xff
 8008cdc:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8008ce0:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008ce4:	f005 fad0 	bl	800e288 <SecureElementGetJoinEui>
 8008ce8:	4601      	mov	r1, r0
 8008cea:	2208      	movs	r2, #8
 8008cec:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8008cf0:	f005 fafb 	bl	800e2ea <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8008cf4:	f005 fab2 	bl	800e25c <SecureElementGetDevEui>
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8008d00:	f005 faf3 	bl	800e2ea <memcpy1>
            allowDelayedTx = false;
 8008d04:	4620      	mov	r0, r4
            break;
 8008d06:	e7db      	b.n	8008cc0 <SendReJoinReq+0x8>
 8008d08:	20000588 	.word	0x20000588

08008d0c <SetTxContinuousWave>:
{
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 8008d10:	4c10      	ldr	r4, [pc, #64]	; (8008d54 <SetTxContinuousWave+0x48>)
 8008d12:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 8008d16:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <SetTxContinuousWave+0x4c>)
 8008d1c:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8008d20:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008d24:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8008d28:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8008d2c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008d2e:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008d30:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008d32:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 8008d34:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8008d38:	4669      	mov	r1, sp
 8008d3a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008d3e:	f002 faa1 	bl	800b284 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008d42:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008d46:	f043 0302 	orr.w	r3, r3, #2
 8008d4a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 8008d4e:	2000      	movs	r0, #0
 8008d50:	b004      	add	sp, #16
 8008d52:	bd10      	pop	{r4, pc}
 8008d54:	20000588 	.word	0x20000588
 8008d58:	20000a90 	.word	0x20000a90

08008d5c <PrepareFrame>:
{
 8008d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d60:	b083      	sub	sp, #12
 8008d62:	4605      	mov	r5, r0
 8008d64:	460e      	mov	r6, r1
 8008d66:	4617      	mov	r7, r2
 8008d68:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8008d6c:	4959      	ldr	r1, [pc, #356]	; (8008ed4 <PrepareFrame+0x178>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8008d72:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8008d76:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8008d78:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8008d7a:	4698      	mov	r8, r3
 8008d7c:	b1cb      	cbz	r3, 8008db2 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008d7e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8008ed4 <PrepareFrame+0x178>
 8008d82:	4622      	mov	r2, r4
 8008d84:	4641      	mov	r1, r8
 8008d86:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8008d8a:	f005 faae 	bl	800e2ea <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8008d8e:	b2e0      	uxtb	r0, r4
 8008d90:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8008d94:	782b      	ldrb	r3, [r5, #0]
 8008d96:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8008d9a:	782b      	ldrb	r3, [r5, #0]
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d009      	beq.n	8008db6 <PrepareFrame+0x5a>
 8008da2:	2b07      	cmp	r3, #7
 8008da4:	d079      	beq.n	8008e9a <PrepareFrame+0x13e>
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d009      	beq.n	8008dbe <PrepareFrame+0x62>
 8008daa:	2002      	movs	r0, #2
}
 8008dac:	b003      	add	sp, #12
 8008dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8008db2:	4614      	mov	r4, r2
 8008db4:	e7e3      	b.n	8008d7e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8008db6:	4b47      	ldr	r3, [pc, #284]	; (8008ed4 <PrepareFrame+0x178>)
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8008dbe:	4b45      	ldr	r3, [pc, #276]	; (8008ed4 <PrepareFrame+0x178>)
 8008dc0:	2204      	movs	r2, #4
 8008dc2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8008dc6:	1c9a      	adds	r2, r3, #2
 8008dc8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008dcc:	22ff      	movs	r2, #255	; 0xff
 8008dce:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8008dd2:	782a      	ldrb	r2, [r5, #0]
 8008dd4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8008dd8:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8008ddc:	4a3e      	ldr	r2, [pc, #248]	; (8008ed8 <PrepareFrame+0x17c>)
 8008dde:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8008de2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008de6:	7832      	ldrb	r2, [r6, #0]
 8008de8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8008dec:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8008df0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8008df4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008df8:	a801      	add	r0, sp, #4
 8008dfa:	f001 fddb 	bl	800a9b4 <LoRaMacCryptoGetFCntUp>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d15c      	bne.n	8008ebc <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8008e02:	9a01      	ldr	r2, [sp, #4]
 8008e04:	4b33      	ldr	r3, [pc, #204]	; (8008ed4 <PrepareFrame+0x178>)
 8008e06:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8008e10:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8008e14:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008e18:	4668      	mov	r0, sp
 8008e1a:	f001 fa69 	bl	800a2f0 <LoRaMacCommandsGetSizeSerializedCmds>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d14e      	bne.n	8008ec0 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 8008e22:	9b00      	ldr	r3, [sp, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0c1      	beq.n	8008dac <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8008e28:	4b2b      	ldr	r3, [pc, #172]	; (8008ed8 <PrepareFrame+0x17c>)
 8008e2a:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8008e2e:	f7fe f903 	bl	8007038 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008e32:	4b28      	ldr	r3, [pc, #160]	; (8008ed4 <PrepareFrame+0x178>)
 8008e34:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8008e38:	b113      	cbz	r3, 8008e40 <PrepareFrame+0xe4>
 8008e3a:	9a00      	ldr	r2, [sp, #0]
 8008e3c:	2a0f      	cmp	r2, #15
 8008e3e:	d915      	bls.n	8008e6c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008e40:	b113      	cbz	r3, 8008e48 <PrepareFrame+0xec>
 8008e42:	9b00      	ldr	r3, [sp, #0]
 8008e44:	2b0f      	cmp	r3, #15
 8008e46:	d821      	bhi.n	8008e8c <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008e48:	4a24      	ldr	r2, [pc, #144]	; (8008edc <PrepareFrame+0x180>)
 8008e4a:	4669      	mov	r1, sp
 8008e4c:	f001 fa5c 	bl	800a308 <LoRaMacCommandsSerializeCmds>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d13b      	bne.n	8008ecc <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008e54:	4b1f      	ldr	r3, [pc, #124]	; (8008ed4 <PrepareFrame+0x178>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8008e5c:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8008e60:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008e64:	9a00      	ldr	r2, [sp, #0]
 8008e66:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8008e6a:	e79f      	b.n	8008dac <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8008e6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ee0 <PrepareFrame+0x184>)
 8008e6e:	4669      	mov	r1, sp
 8008e70:	200f      	movs	r0, #15
 8008e72:	f001 fa49 	bl	800a308 <LoRaMacCommandsSerializeCmds>
 8008e76:	bb28      	cbnz	r0, 8008ec4 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8008e78:	7833      	ldrb	r3, [r6, #0]
 8008e7a:	9a00      	ldr	r2, [sp, #0]
 8008e7c:	f362 0303 	bfi	r3, r2, #0, #4
 8008e80:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <PrepareFrame+0x178>)
 8008e86:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8008e8a:	e78f      	b.n	8008dac <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008e8c:	4a13      	ldr	r2, [pc, #76]	; (8008edc <PrepareFrame+0x180>)
 8008e8e:	4669      	mov	r1, sp
 8008e90:	f001 fa3a 	bl	800a308 <LoRaMacCommandsSerializeCmds>
 8008e94:	b1c0      	cbz	r0, 8008ec8 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008e96:	2013      	movs	r0, #19
 8008e98:	e788      	b.n	8008dac <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8008e9a:	f1b8 0f00 	cmp.w	r8, #0
 8008e9e:	d017      	beq.n	8008ed0 <PrepareFrame+0x174>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d083      	beq.n	8008dac <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8008ea4:	4c0b      	ldr	r4, [pc, #44]	; (8008ed4 <PrepareFrame+0x178>)
 8008ea6:	b282      	uxth	r2, r0
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	1ce0      	adds	r0, r4, #3
 8008eac:	f005 fa1d 	bl	800e2ea <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8008eb0:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e777      	b.n	8008dac <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008ebc:	2012      	movs	r0, #18
 8008ebe:	e775      	b.n	8008dac <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ec0:	2013      	movs	r0, #19
 8008ec2:	e773      	b.n	8008dac <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ec4:	2013      	movs	r0, #19
 8008ec6:	e771      	b.n	8008dac <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8008ec8:	200a      	movs	r0, #10
 8008eca:	e76f      	b.n	8008dac <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ecc:	2013      	movs	r0, #19
 8008ece:	e76d      	b.n	8008dac <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e76b      	b.n	8008dac <PrepareFrame+0x50>
 8008ed4:	20000588 	.word	0x20000588
 8008ed8:	20000a90 	.word	0x20000a90
 8008edc:	20000a10 	.word	0x20000a10
 8008ee0:	200006a0 	.word	0x200006a0

08008ee4 <Send>:
{
 8008ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee8:	b08a      	sub	sp, #40	; 0x28
 8008eea:	4617      	mov	r7, r2
 8008eec:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008eee:	4c43      	ldr	r4, [pc, #268]	; (8008ffc <Send+0x118>)
 8008ef0:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8008ef4:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008ef8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008efa:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008efc:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d079      	beq.n	8008ff8 <Send+0x114>
 8008f04:	4605      	mov	r5, r0
 8008f06:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8008f08:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 8008f0c:	b90b      	cbnz	r3, 8008f12 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8008f0e:	2100      	movs	r1, #0
 8008f10:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8008f18:	4838      	ldr	r0, [pc, #224]	; (8008ffc <Send+0x118>)
 8008f1a:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
 8008f1e:	f361 13c7 	bfi	r3, r1, #7, #1
 8008f22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008f26:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d051      	beq.n	8008fd2 <Send+0xee>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8008f2e:	4b33      	ldr	r3, [pc, #204]	; (8008ffc <Send+0x118>)
 8008f30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008f34:	b12b      	cbz	r3, 8008f42 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 8008f36:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008f3a:	f043 0320 	orr.w	r3, r3, #32
 8008f3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 8008f42:	4c2e      	ldr	r4, [pc, #184]	; (8008ffc <Send+0x118>)
 8008f44:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8008f48:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8008f50:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008f54:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008f56:	4b2a      	ldr	r3, [pc, #168]	; (8009000 <Send+0x11c>)
 8008f58:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 8008f5c:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8008f60:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8008f64:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008f68:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008f6c:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008f70:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8008f74:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8008f78:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008f7c:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008f80:	ab08      	add	r3, sp, #32
 8008f82:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8008f86:	f104 0139 	add.w	r1, r4, #57	; 0x39
 8008f8a:	a803      	add	r0, sp, #12
 8008f8c:	f001 f87c 	bl	800a088 <LoRaMacAdrCalcNext>
 8008f90:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008f94:	f360 1386 	bfi	r3, r0, #6, #1
 8008f98:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008f9c:	f8cd 8000 	str.w	r8, [sp]
 8008fa0:	463b      	mov	r3, r7
 8008fa2:	4632      	mov	r2, r6
 8008fa4:	a909      	add	r1, sp, #36	; 0x24
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f7ff fed8 	bl	8008d5c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8008fac:	4604      	mov	r4, r0
 8008fae:	b108      	cbz	r0, 8008fb4 <Send+0xd0>
 8008fb0:	280a      	cmp	r0, #10
 8008fb2:	d104      	bne.n	8008fbe <Send+0xda>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8008fb4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8008fb8:	f7ff f9e4 	bl	8008384 <ScheduleTx>
 8008fbc:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8008fbe:	b17c      	cbz	r4, 8008fe0 <Send+0xfc>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8008fc0:	4b0e      	ldr	r3, [pc, #56]	; (8008ffc <Send+0x118>)
 8008fc2:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8008fc6:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 8008fca:	4620      	mov	r0, r4
 8008fcc:	b00a      	add	sp, #40	; 0x28
 8008fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8008fd2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008fd6:	f043 0310 	orr.w	r3, r3, #16
 8008fda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8008fde:	e7a6      	b.n	8008f2e <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <Send+0x118>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8008fe8:	9a08      	ldr	r2, [sp, #32]
 8008fea:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8008fec:	f001 f954 	bl	800a298 <LoRaMacCommandsRemoveNoneStickyCmds>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d0ea      	beq.n	8008fca <Send+0xe6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ff4:	2413      	movs	r4, #19
 8008ff6:	e7e8      	b.n	8008fca <Send+0xe6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8008ff8:	2407      	movs	r4, #7
 8008ffa:	e7e6      	b.n	8008fca <Send+0xe6>
 8008ffc:	20000a90 	.word	0x20000a90
 8009000:	20000588 	.word	0x20000588

08009004 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009004:	4b07      	ldr	r3, [pc, #28]	; (8009024 <LoRaMacIsBusy+0x20>)
 8009006:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800900a:	b933      	cbnz	r3, 800901a <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800900c:	4b05      	ldr	r3, [pc, #20]	; (8009024 <LoRaMacIsBusy+0x20>)
 800900e:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009012:	2b01      	cmp	r3, #1
 8009014:	d003      	beq.n	800901e <LoRaMacIsBusy+0x1a>
    return true;
 8009016:	2001      	movs	r0, #1
 8009018:	4770      	bx	lr
 800901a:	2001      	movs	r0, #1
 800901c:	4770      	bx	lr
        return false;
 800901e:	2000      	movs	r0, #0
}
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000588 	.word	0x20000588

08009028 <LoRaMacProcess>:
{
 8009028:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800902a:	f7fe ffe1 	bl	8007ff0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800902e:	f001 f859 	bl	800a0e4 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009032:	4b15      	ldr	r3, [pc, #84]	; (8009088 <LoRaMacProcess+0x60>)
 8009034:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009038:	f013 0f20 	tst.w	r3, #32
 800903c:	d107      	bne.n	800904e <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 800903e:	f7fd fe97 	bl	8006d70 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009042:	4b11      	ldr	r3, [pc, #68]	; (8009088 <LoRaMacProcess+0x60>)
 8009044:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009048:	2b02      	cmp	r3, #2
 800904a:	d01a      	beq.n	8009082 <LoRaMacProcess+0x5a>
}
 800904c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800904e:	2000      	movs	r0, #0
 8009050:	f7fd fe88 	bl	8006d64 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8009054:	f7fd fed6 	bl	8006e04 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8009058:	f7fd ffb6 	bl	8006fc8 <IsRequestPending>
 800905c:	b110      	cbz	r0, 8009064 <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800905e:	f7fe f8e1 	bl	8007224 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 8009062:	b918      	cbnz	r0, 800906c <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 8009064:	f7fe fff2 	bl	800804c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8009068:	f7ff fa38 	bl	80084dc <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800906c:	f7ff fa82 	bl	8008574 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8009070:	f7ff faca 	bl	8008608 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 8009074:	4805      	ldr	r0, [pc, #20]	; (800908c <LoRaMacProcess+0x64>)
 8009076:	f7ff fadf 	bl	8008638 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800907a:	2001      	movs	r0, #1
 800907c:	f7fd fe72 	bl	8006d64 <LoRaMacEnableRequests>
 8009080:	e7dd      	b.n	800903e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8009082:	f7ff fbc9 	bl	8008818 <OpenContinuousRxCWindow>
}
 8009086:	e7e1      	b.n	800904c <LoRaMacProcess+0x24>
 8009088:	20000588 	.word	0x20000588
 800908c:	20000a90 	.word	0x20000a90

08009090 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8009096:	2800      	cmp	r0, #0
 8009098:	f000 81a0 	beq.w	80093dc <LoRaMacInitialization+0x34c>
 800909c:	460e      	mov	r6, r1
 800909e:	4691      	mov	r9, r2
 80090a0:	4680      	mov	r8, r0
 80090a2:	2900      	cmp	r1, #0
 80090a4:	f000 819c 	beq.w	80093e0 <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80090a8:	6803      	ldr	r3, [r0, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 819a 	beq.w	80093e4 <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 80090b0:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 8198 	beq.w	80093e8 <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80090b8:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 8196 	beq.w	80093ec <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 80090c0:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 8194 	beq.w	80093f0 <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80090c8:	4610      	mov	r0, r2
 80090ca:	f001 ffbc 	bl	800b046 <RegionIsActive>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f000 8190 	beq.w	80093f4 <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80090d4:	4640      	mov	r0, r8
 80090d6:	f001 f9c1 	bl	800a45c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80090da:	4ccc      	ldr	r4, [pc, #816]	; (800940c <LoRaMacInitialization+0x37c>)
 80090dc:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 80090e0:	2100      	movs	r1, #0
 80090e2:	4620      	mov	r0, r4
 80090e4:	f005 f919 	bl	800e31a <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80090e8:	4dc9      	ldr	r5, [pc, #804]	; (8009410 <LoRaMacInitialization+0x380>)
 80090ea:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 80090ee:	2100      	movs	r1, #0
 80090f0:	4628      	mov	r0, r5
 80090f2:	f005 f912 	bl	800e31a <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80090f6:	f04f 0a01 	mov.w	sl, #1
 80090fa:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 80090fe:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8009102:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009106:	2700      	movs	r7, #0
 8009108:	f884 70fc 	strb.w	r7, [r4, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800910c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009110:	4bc0      	ldr	r3, [pc, #768]	; (8009414 <LoRaMacInitialization+0x384>)
 8009112:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009116:	230f      	movs	r3, #15
 8009118:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800911c:	a908      	add	r1, sp, #32
 800911e:	4648      	mov	r0, r9
 8009120:	f001 ff9b 	bl	800b05a <RegionGetPhyParam>
 8009124:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009126:	1bc0      	subs	r0, r0, r7
 8009128:	bf18      	it	ne
 800912a:	2001      	movne	r0, #1
 800912c:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009130:	f04f 0b0a 	mov.w	fp, #10
 8009134:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009138:	a908      	add	r1, sp, #32
 800913a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800913e:	f001 ff8c 	bl	800b05a <RegionGetPhyParam>
 8009142:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009144:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009148:	f04f 0906 	mov.w	r9, #6
 800914c:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009150:	a908      	add	r1, sp, #32
 8009152:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009156:	f001 ff80 	bl	800b05a <RegionGetPhyParam>
 800915a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800915c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009160:	2310      	movs	r3, #16
 8009162:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009166:	a908      	add	r1, sp, #32
 8009168:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800916c:	f001 ff75 	bl	800b05a <RegionGetPhyParam>
 8009170:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009172:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009176:	2311      	movs	r3, #17
 8009178:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800917c:	a908      	add	r1, sp, #32
 800917e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009182:	f001 ff6a 	bl	800b05a <RegionGetPhyParam>
 8009186:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009188:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800918c:	2312      	movs	r3, #18
 800918e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009192:	a908      	add	r1, sp, #32
 8009194:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009198:	f001 ff5f 	bl	800b05a <RegionGetPhyParam>
 800919c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800919e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80091a2:	2313      	movs	r3, #19
 80091a4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80091a8:	a908      	add	r1, sp, #32
 80091aa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091ae:	f001 ff54 	bl	800b05a <RegionGetPhyParam>
 80091b2:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80091b4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80091b8:	2314      	movs	r3, #20
 80091ba:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80091be:	a908      	add	r1, sp, #32
 80091c0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091c4:	f001 ff49 	bl	800b05a <RegionGetPhyParam>
 80091c8:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80091ca:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80091ce:	2317      	movs	r3, #23
 80091d0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80091d4:	a908      	add	r1, sp, #32
 80091d6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091da:	f001 ff3e 	bl	800b05a <RegionGetPhyParam>
 80091de:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80091e0:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80091e4:	2318      	movs	r3, #24
 80091e6:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80091ea:	a908      	add	r1, sp, #32
 80091ec:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091f0:	f001 ff33 	bl	800b05a <RegionGetPhyParam>
 80091f4:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80091f6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80091fa:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80091fe:	2319      	movs	r3, #25
 8009200:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009204:	a908      	add	r1, sp, #32
 8009206:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800920a:	f001 ff26 	bl	800b05a <RegionGetPhyParam>
 800920e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009210:	b2c0      	uxtb	r0, r0
 8009212:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8009216:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800921a:	231e      	movs	r3, #30
 800921c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009220:	a908      	add	r1, sp, #32
 8009222:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009226:	f001 ff18 	bl	800b05a <RegionGetPhyParam>
 800922a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800922c:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009230:	231f      	movs	r3, #31
 8009232:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009236:	a908      	add	r1, sp, #32
 8009238:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800923c:	f001 ff0d 	bl	800b05a <RegionGetPhyParam>
 8009240:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009242:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009246:	2320      	movs	r3, #32
 8009248:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800924c:	eb0d 0103 	add.w	r1, sp, r3
 8009250:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009254:	f001 ff01 	bl	800b05a <RegionGetPhyParam>
 8009258:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800925a:	9b07      	ldr	r3, [sp, #28]
 800925c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009260:	2321      	movs	r3, #33	; 0x21
 8009262:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009266:	a908      	add	r1, sp, #32
 8009268:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800926c:	f001 fef5 	bl	800b05a <RegionGetPhyParam>
 8009270:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009272:	9b07      	ldr	r3, [sp, #28]
 8009274:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009278:	230b      	movs	r3, #11
 800927a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800927e:	a908      	add	r1, sp, #32
 8009280:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009284:	f001 fee9 	bl	800b05a <RegionGetPhyParam>
 8009288:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckLimit = phyParam.Value;
 800928a:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800928e:	230c      	movs	r3, #12
 8009290:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009294:	a908      	add	r1, sp, #32
 8009296:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800929a:	f001 fede 	bl	800b05a <RegionGetPhyParam>
 800929e:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckDelay = phyParam.Value;
 80092a0:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80092a4:	f884 a0a0 	strb.w	sl, [r4, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80092a8:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80092ac:	f884 9088 	strb.w	r9, [r4, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80092b0:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80092b4:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80092b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80092bc:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80092be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80092c2:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80092c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80092c8:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80092ca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80092ce:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80092d0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80092d4:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80092d6:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80092da:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80092de:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 80092e2:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80092e4:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 80092e8:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80092ea:	a904      	add	r1, sp, #16
 80092ec:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80092f0:	f001 fed9 	bl	800b0a6 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 80092f4:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 80092f8:	f7ff fbb6 	bl	8008a68 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80092fc:	f884 a0fd 	strb.w	sl, [r4, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8009300:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8009304:	f885 7481 	strb.w	r7, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8009308:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800930c:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800930e:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009310:	9700      	str	r7, [sp, #0]
 8009312:	4b41      	ldr	r3, [pc, #260]	; (8009418 <LoRaMacInitialization+0x388>)
 8009314:	463a      	mov	r2, r7
 8009316:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800931a:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800931e:	f007 fc5f 	bl	8010be0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009322:	9700      	str	r7, [sp, #0]
 8009324:	4b3d      	ldr	r3, [pc, #244]	; (800941c <LoRaMacInitialization+0x38c>)
 8009326:	463a      	mov	r2, r7
 8009328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800932c:	f505 7060 	add.w	r0, r5, #896	; 0x380
 8009330:	f007 fc56 	bl	8010be0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009334:	9700      	str	r7, [sp, #0]
 8009336:	4b3a      	ldr	r3, [pc, #232]	; (8009420 <LoRaMacInitialization+0x390>)
 8009338:	463a      	mov	r2, r7
 800933a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800933e:	f505 7066 	add.w	r0, r5, #920	; 0x398
 8009342:	f007 fc4d 	bl	8010be0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009346:	9700      	str	r7, [sp, #0]
 8009348:	4b36      	ldr	r3, [pc, #216]	; (8009424 <LoRaMacInitialization+0x394>)
 800934a:	463a      	mov	r2, r7
 800934c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009350:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 8009354:	f007 fc44 	bl	8010be0 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8009358:	af02      	add	r7, sp, #8
 800935a:	4638      	mov	r0, r7
 800935c:	f007 fbd2 	bl	8010b04 <SysTimeGetMcuTime>
 8009360:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8009364:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009368:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800936c:	4b2e      	ldr	r3, [pc, #184]	; (8009428 <LoRaMacInitialization+0x398>)
 800936e:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8009372:	4b2e      	ldr	r3, [pc, #184]	; (800942c <LoRaMacInitialization+0x39c>)
 8009374:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009378:	4b2d      	ldr	r3, [pc, #180]	; (8009430 <LoRaMacInitialization+0x3a0>)
 800937a:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800937e:	4b2d      	ldr	r3, [pc, #180]	; (8009434 <LoRaMacInitialization+0x3a4>)
 8009380:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8009384:	4b2c      	ldr	r3, [pc, #176]	; (8009438 <LoRaMacInitialization+0x3a8>)
 8009386:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800938a:	4b2c      	ldr	r3, [pc, #176]	; (800943c <LoRaMacInitialization+0x3ac>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 8009392:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8009394:	68b1      	ldr	r1, [r6, #8]
 8009396:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800939a:	f004 fdb7 	bl	800df0c <SecureElementInit>
 800939e:	bb70      	cbnz	r0, 80093fe <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80093a0:	4620      	mov	r0, r4
 80093a2:	f001 fae7 	bl	800a974 <LoRaMacCryptoInit>
 80093a6:	bb60      	cbnz	r0, 8009402 <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80093a8:	f000 ff20 	bl	800a1ec <LoRaMacCommandsInit>
 80093ac:	bb58      	cbnz	r0, 8009406 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80093ae:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80093b2:	f001 fb45 	bl	800aa40 <LoRaMacCryptoSetMulticastReference>
 80093b6:	4604      	mov	r4, r0
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d141      	bne.n	8009440 <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80093bc:	4d1f      	ldr	r5, [pc, #124]	; (800943c <LoRaMacInitialization+0x3ac>)
 80093be:	696b      	ldr	r3, [r5, #20]
 80093c0:	4798      	blx	r3
 80093c2:	f004 ff7f 	bl	800e2c4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80093c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80093c8:	4a10      	ldr	r2, [pc, #64]	; (800940c <LoRaMacInitialization+0x37c>)
 80093ca:	f892 00fd 	ldrb.w	r0, [r2, #253]	; 0xfd
 80093ce:	4798      	blx	r3
    Radio.Sleep( );
 80093d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80093d2:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80093d4:	4650      	mov	r0, sl
 80093d6:	f7fd fcc5 	bl	8006d64 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80093da:	e00c      	b.n	80093f6 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80093dc:	2403      	movs	r4, #3
 80093de:	e00a      	b.n	80093f6 <LoRaMacInitialization+0x366>
 80093e0:	2403      	movs	r4, #3
 80093e2:	e008      	b.n	80093f6 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80093e4:	2403      	movs	r4, #3
 80093e6:	e006      	b.n	80093f6 <LoRaMacInitialization+0x366>
 80093e8:	2403      	movs	r4, #3
 80093ea:	e004      	b.n	80093f6 <LoRaMacInitialization+0x366>
 80093ec:	2403      	movs	r4, #3
 80093ee:	e002      	b.n	80093f6 <LoRaMacInitialization+0x366>
 80093f0:	2403      	movs	r4, #3
 80093f2:	e000      	b.n	80093f6 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80093f4:	2409      	movs	r4, #9
}
 80093f6:	4620      	mov	r0, r4
 80093f8:	b00b      	add	sp, #44	; 0x2c
 80093fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80093fe:	2411      	movs	r4, #17
 8009400:	e7f9      	b.n	80093f6 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009402:	2411      	movs	r4, #17
 8009404:	e7f7      	b.n	80093f6 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009406:	2413      	movs	r4, #19
 8009408:	e7f5      	b.n	80093f6 <LoRaMacInitialization+0x366>
 800940a:	bf00      	nop
 800940c:	20000a90 	.word	0x20000a90
 8009410:	20000588 	.word	0x20000588
 8009414:	01000300 	.word	0x01000300
 8009418:	0800848d 	.word	0x0800848d
 800941c:	08008909 	.word	0x08008909
 8009420:	080088b9 	.word	0x080088b9
 8009424:	08007199 	.word	0x08007199
 8009428:	08008a11 	.word	0x08008a11
 800942c:	080089b9 	.word	0x080089b9
 8009430:	08006d19 	.word	0x08006d19
 8009434:	08008985 	.word	0x08008985
 8009438:	08008951 	.word	0x08008951
 800943c:	08011ea4 	.word	0x08011ea4
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009440:	2411      	movs	r4, #17
 8009442:	e7d8      	b.n	80093f6 <LoRaMacInitialization+0x366>

08009444 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8009444:	2000      	movs	r0, #0
 8009446:	4b02      	ldr	r3, [pc, #8]	; (8009450 <LoRaMacStart+0xc>)
 8009448:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	20000588 	.word	0x20000588

08009454 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8009454:	b530      	push	{r4, r5, lr}
 8009456:	b089      	sub	sp, #36	; 0x24
 8009458:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800945a:	4b2f      	ldr	r3, [pc, #188]	; (8009518 <LoRaMacQueryTxPossible+0xc4>)
 800945c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800945e:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009460:	f993 00c5 	ldrsb.w	r0, [r3, #197]	; 0xc5
 8009464:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009468:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800946c:	f88d 3006 	strb.w	r3, [sp, #6]
    size_t macCmdsSize = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 8009474:	2900      	cmp	r1, #0
 8009476:	d048      	beq.n	800950a <LoRaMacQueryTxPossible+0xb6>
 8009478:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800947a:	4b27      	ldr	r3, [pc, #156]	; (8009518 <LoRaMacQueryTxPossible+0xc4>)
 800947c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8009480:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 8009482:	2100      	movs	r1, #0
 8009484:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009488:	f893 10fe 	ldrb.w	r1, [r3, #254]	; 0xfe
 800948c:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009490:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009492:	4a22      	ldr	r2, [pc, #136]	; (800951c <LoRaMacQueryTxPossible+0xc8>)
 8009494:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 8009498:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800949c:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 80094a0:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80094a4:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80094a8:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80094ac:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80094b0:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80094b4:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80094b8:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 80094bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094c0:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80094c4:	ab02      	add	r3, sp, #8
 80094c6:	f10d 0206 	add.w	r2, sp, #6
 80094ca:	f10d 0107 	add.w	r1, sp, #7
 80094ce:	a803      	add	r0, sp, #12
 80094d0:	f000 fdda 	bl	800a088 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80094d4:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80094d8:	f7fd fdae 	bl	8007038 <GetMaxAppPayloadWithoutFOptsLength>
 80094dc:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80094de:	4668      	mov	r0, sp
 80094e0:	f000 ff06 	bl	800a2f0 <LoRaMacCommandsGetSizeSerializedCmds>
 80094e4:	b998      	cbnz	r0, 800950e <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80094e6:	9b00      	ldr	r3, [sp, #0]
 80094e8:	2b0f      	cmp	r3, #15
 80094ea:	d80a      	bhi.n	8009502 <LoRaMacQueryTxPossible+0xae>
 80094ec:	786a      	ldrb	r2, [r5, #1]
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d807      	bhi.n	8009502 <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80094f6:	9b00      	ldr	r3, [sp, #0]
 80094f8:	441c      	add	r4, r3
 80094fa:	42a2      	cmp	r2, r4
 80094fc:	d309      	bcc.n	8009512 <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 80094fe:	b009      	add	sp, #36	; 0x24
 8009500:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8009506:	2008      	movs	r0, #8
 8009508:	e7f9      	b.n	80094fe <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800950a:	2003      	movs	r0, #3
 800950c:	e7f7      	b.n	80094fe <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800950e:	2013      	movs	r0, #19
 8009510:	e7f5      	b.n	80094fe <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 8009512:	2008      	movs	r0, #8
 8009514:	e7f3      	b.n	80094fe <LoRaMacQueryTxPossible+0xaa>
 8009516:	bf00      	nop
 8009518:	20000a90 	.word	0x20000a90
 800951c:	20000588 	.word	0x20000588

08009520 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8009520:	2800      	cmp	r0, #0
 8009522:	f000 810c 	beq.w	800973e <LoRaMacMibGetRequestConfirm+0x21e>
{
 8009526:	b510      	push	{r4, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800952c:	7800      	ldrb	r0, [r0, #0]
 800952e:	2828      	cmp	r0, #40	; 0x28
 8009530:	f200 8101 	bhi.w	8009736 <LoRaMacMibGetRequestConfirm+0x216>
 8009534:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009538:	002f0029 	.word	0x002f0029
 800953c:	003a0035 	.word	0x003a0035
 8009540:	0045003f 	.word	0x0045003f
 8009544:	00ff004b 	.word	0x00ff004b
 8009548:	00ff00ff 	.word	0x00ff00ff
 800954c:	00ff00ff 	.word	0x00ff00ff
 8009550:	00ff00ff 	.word	0x00ff00ff
 8009554:	005100ff 	.word	0x005100ff
 8009558:	005d0057 	.word	0x005d0057
 800955c:	0072006a 	.word	0x0072006a
 8009560:	0082007a 	.word	0x0082007a
 8009564:	008a0097 	.word	0x008a0097
 8009568:	00aa00a4 	.word	0x00aa00a4
 800956c:	00b400af 	.word	0x00b400af
 8009570:	00be00b9 	.word	0x00be00b9
 8009574:	00c900c3 	.word	0x00c900c3
 8009578:	00cf00d5 	.word	0x00cf00d5
 800957c:	00e000db 	.word	0x00e000db
 8009580:	00f000e6 	.word	0x00f000e6
 8009584:	00ff00eb 	.word	0x00ff00eb
 8009588:	00f6      	.short	0x00f6
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800958a:	4b6e      	ldr	r3, [pc, #440]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 800958c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009590:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8009592:	b004      	add	sp, #16
 8009594:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009596:	4b6b      	ldr	r3, [pc, #428]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 8009598:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800959c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800959e:	2000      	movs	r0, #0
            break;
 80095a0:	e7f7      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80095a2:	f004 fe5b 	bl	800e25c <SecureElementGetDevEui>
 80095a6:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095a8:	2000      	movs	r0, #0
            break;
 80095aa:	e7f2      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80095ac:	f004 fe6c 	bl	800e288 <SecureElementGetJoinEui>
 80095b0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095b2:	2000      	movs	r0, #0
            break;
 80095b4:	e7ed      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80095b6:	4b63      	ldr	r3, [pc, #396]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80095b8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80095bc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095be:	2000      	movs	r0, #0
            break;
 80095c0:	e7e7      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80095c2:	4b60      	ldr	r3, [pc, #384]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80095c4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80095c8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095ca:	2000      	movs	r0, #0
            break;
 80095cc:	e7e1      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80095ce:	4b5d      	ldr	r3, [pc, #372]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80095d0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80095d4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095d6:	2000      	movs	r0, #0
            break;
 80095d8:	e7db      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80095da:	4b5a      	ldr	r3, [pc, #360]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80095dc:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80095e0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095e2:	2000      	movs	r0, #0
            break;
 80095e4:	e7d5      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80095e6:	4b57      	ldr	r3, [pc, #348]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80095e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095ec:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095ee:	2000      	movs	r0, #0
            break;
 80095f0:	e7cf      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS;
 80095f2:	231d      	movs	r3, #29
 80095f4:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80095f8:	a902      	add	r1, sp, #8
 80095fa:	4b52      	ldr	r3, [pc, #328]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80095fc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009600:	f001 fd2b 	bl	800b05a <RegionGetPhyParam>
 8009604:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 8009606:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009608:	2000      	movs	r0, #0
            break;
 800960a:	e7c2      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800960c:	3404      	adds	r4, #4
 800960e:	4b4e      	ldr	r3, [pc, #312]	; (8009748 <LoRaMacMibGetRequestConfirm+0x228>)
 8009610:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009614:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009618:	2000      	movs	r0, #0
            break;
 800961a:	e7ba      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800961c:	3404      	adds	r4, #4
 800961e:	4b4b      	ldr	r3, [pc, #300]	; (800974c <LoRaMacMibGetRequestConfirm+0x22c>)
 8009620:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009624:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009628:	2000      	movs	r0, #0
            break;
 800962a:	e7b2      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800962c:	3404      	adds	r4, #4
 800962e:	4b48      	ldr	r3, [pc, #288]	; (8009750 <LoRaMacMibGetRequestConfirm+0x230>)
 8009630:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009634:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009638:	2000      	movs	r0, #0
            break;
 800963a:	e7aa      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800963c:	3404      	adds	r4, #4
 800963e:	4b45      	ldr	r3, [pc, #276]	; (8009754 <LoRaMacMibGetRequestConfirm+0x234>)
 8009640:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009644:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009648:	2000      	movs	r0, #0
            break;
 800964a:	e7a2      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800964c:	231b      	movs	r3, #27
 800964e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009652:	a902      	add	r1, sp, #8
 8009654:	4b3b      	ldr	r3, [pc, #236]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 8009656:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800965a:	f001 fcfe 	bl	800b05a <RegionGetPhyParam>
 800965e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8009660:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009662:	2000      	movs	r0, #0
            break;
 8009664:	e795      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8009666:	231a      	movs	r3, #26
 8009668:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800966c:	a902      	add	r1, sp, #8
 800966e:	4b35      	ldr	r3, [pc, #212]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 8009670:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009674:	f001 fcf1 	bl	800b05a <RegionGetPhyParam>
 8009678:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800967a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800967c:	2000      	movs	r0, #0
            break;
 800967e:	e788      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009680:	4b30      	ldr	r3, [pc, #192]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 8009682:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009686:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009688:	2000      	movs	r0, #0
            break;
 800968a:	e782      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800968c:	4b2d      	ldr	r3, [pc, #180]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 800968e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009690:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009692:	2000      	movs	r0, #0
            break;
 8009694:	e77d      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8009696:	4b2b      	ldr	r3, [pc, #172]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 8009698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800969a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800969c:	2000      	movs	r0, #0
            break;
 800969e:	e778      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80096a0:	4b28      	ldr	r3, [pc, #160]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80096a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096a6:	2000      	movs	r0, #0
            break;
 80096a8:	e773      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80096aa:	4b26      	ldr	r3, [pc, #152]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80096ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ae:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096b0:	2000      	movs	r0, #0
            break;
 80096b2:	e76e      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80096b4:	4b23      	ldr	r3, [pc, #140]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80096b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096b8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096ba:	2000      	movs	r0, #0
            break;
 80096bc:	e769      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80096be:	4b21      	ldr	r3, [pc, #132]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80096c0:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 80096c4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096c6:	2000      	movs	r0, #0
            break;
 80096c8:	e763      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80096ca:	4b1e      	ldr	r3, [pc, #120]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80096cc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80096d0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096d2:	2000      	movs	r0, #0
            break;
 80096d4:	e75d      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80096d6:	4b1b      	ldr	r3, [pc, #108]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80096d8:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 80096dc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096de:	2000      	movs	r0, #0
            break;
 80096e0:	e757      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80096e2:	4b18      	ldr	r3, [pc, #96]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80096e4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80096e8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096ea:	2000      	movs	r0, #0
            break;
 80096ec:	e751      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80096ee:	4b15      	ldr	r3, [pc, #84]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096f4:	2000      	movs	r0, #0
            break;
 80096f6:	e74c      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80096f8:	4b12      	ldr	r3, [pc, #72]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 80096fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80096fe:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009700:	2000      	movs	r0, #0
            break;
 8009702:	e746      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009704:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 8009706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009708:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800970a:	2000      	movs	r0, #0
            break;
 800970c:	e741      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Contexts = GetNvmData( );
 800970e:	f7fd fbbd 	bl	8006e8c <GetNvmData>
 8009712:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009714:	2000      	movs	r0, #0
            break;
 8009716:	e73c      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009718:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 800971a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800971e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009720:	2000      	movs	r0, #0
            break;
 8009722:	e736      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <LoRaMacMibGetRequestConfirm+0x224>)
 8009726:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800972a:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800972c:	f001 fdcc 	bl	800b2c8 <RegionGetVersion>
 8009730:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009732:	2000      	movs	r0, #0
            break;
 8009734:	e72d      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009736:	4620      	mov	r0, r4
 8009738:	f000 fcc6 	bl	800a0c8 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800973c:	e729      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x72>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800973e:	2003      	movs	r0, #3
}
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20000a90 	.word	0x20000a90
 8009748:	20000af4 	.word	0x20000af4
 800974c:	20000b34 	.word	0x20000b34
 8009750:	20000afc 	.word	0x20000afc
 8009754:	20000b3c 	.word	0x20000b3c

08009758 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009758:	b530      	push	{r4, r5, lr}
 800975a:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800975c:	2800      	cmp	r0, #0
 800975e:	f000 8244 	beq.w	8009bea <LoRaMacMibSetRequestConfirm+0x492>
 8009762:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009764:	4bb3      	ldr	r3, [pc, #716]	; (8009a34 <LoRaMacMibSetRequestConfirm+0x2dc>)
 8009766:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800976a:	f013 0f02 	tst.w	r3, #2
 800976e:	f040 823e 	bne.w	8009bee <LoRaMacMibSetRequestConfirm+0x496>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 8009772:	7804      	ldrb	r4, [r0, #0]
 8009774:	2c27      	cmp	r4, #39	; 0x27
 8009776:	f200 8234 	bhi.w	8009be2 <LoRaMacMibSetRequestConfirm+0x48a>
 800977a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800977e:	0028      	.short	0x0028
 8009780:	0036002d 	.word	0x0036002d
 8009784:	0047003f 	.word	0x0047003f
 8009788:	0053004d 	.word	0x0053004d
 800978c:	00660059 	.word	0x00660059
 8009790:	00800073 	.word	0x00800073
 8009794:	009a008d 	.word	0x009a008d
 8009798:	00b400a7 	.word	0x00b400a7
 800979c:	00cc00c1 	.word	0x00cc00c1
 80097a0:	00d20232 	.word	0x00d20232
 80097a4:	011200f8 	.word	0x011200f8
 80097a8:	01770140 	.word	0x01770140
 80097ac:	01870167 	.word	0x01870167
 80097b0:	01970192 	.word	0x01970192
 80097b4:	01a1019c 	.word	0x01a1019c
 80097b8:	01ab01a6 	.word	0x01ab01a6
 80097bc:	01ed01c0 	.word	0x01ed01c0
 80097c0:	020101d9 	.word	0x020101d9
 80097c4:	02100208 	.word	0x02100208
 80097c8:	021b0215 	.word	0x021b0215
 80097cc:	0222      	.short	0x0222
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80097ce:	7900      	ldrb	r0, [r0, #4]
 80097d0:	f7ff f9ec 	bl	8008bac <SwitchClass>
 80097d4:	4604      	mov	r4, r0
            break;
 80097d6:	e20b      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80097d8:	7903      	ldrb	r3, [r0, #4]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	f000 820b 	beq.w	8009bf6 <LoRaMacMibSetRequestConfirm+0x49e>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80097e0:	4a95      	ldr	r2, [pc, #596]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 80097e2:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097e6:	2400      	movs	r4, #0
 80097e8:	e202      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80097ea:	6840      	ldr	r0, [r0, #4]
 80097ec:	f004 fd28 	bl	800e240 <SecureElementSetDevEui>
 80097f0:	4604      	mov	r4, r0
 80097f2:	2800      	cmp	r0, #0
 80097f4:	f000 81fc 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80097f8:	2403      	movs	r4, #3
 80097fa:	e1f9      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80097fc:	6840      	ldr	r0, [r0, #4]
 80097fe:	f004 fd33 	bl	800e268 <SecureElementSetJoinEui>
 8009802:	2800      	cmp	r0, #0
 8009804:	f040 81f4 	bne.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009808:	4604      	mov	r4, r0
 800980a:	e1f1      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800980c:	7902      	ldrb	r2, [r0, #4]
 800980e:	4b8a      	ldr	r3, [pc, #552]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009810:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009814:	2400      	movs	r4, #0
            break;
 8009816:	e1eb      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8009818:	6842      	ldr	r2, [r0, #4]
 800981a:	4b87      	ldr	r3, [pc, #540]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800981c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009820:	2400      	movs	r4, #0
            break;
 8009822:	e1e5      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8009824:	6842      	ldr	r2, [r0, #4]
 8009826:	4b84      	ldr	r3, [pc, #528]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009828:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800982c:	2400      	movs	r4, #0
            break;
 800982e:	e1df      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8009830:	6841      	ldr	r1, [r0, #4]
 8009832:	2900      	cmp	r1, #0
 8009834:	f000 81e1 	beq.w	8009bfa <LoRaMacMibSetRequestConfirm+0x4a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8009838:	2000      	movs	r0, #0
 800983a:	f001 fa19 	bl	800ac70 <LoRaMacCryptoSetKey>
 800983e:	4604      	mov	r4, r0
 8009840:	2800      	cmp	r0, #0
 8009842:	f000 81d5 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009846:	2411      	movs	r4, #17
 8009848:	e1d2      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800984a:	6841      	ldr	r1, [r0, #4]
 800984c:	2900      	cmp	r1, #0
 800984e:	f000 81d6 	beq.w	8009bfe <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8009852:	2001      	movs	r0, #1
 8009854:	f001 fa0c 	bl	800ac70 <LoRaMacCryptoSetKey>
 8009858:	4604      	mov	r4, r0
 800985a:	2800      	cmp	r0, #0
 800985c:	f000 81c8 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009860:	2411      	movs	r4, #17
 8009862:	e1c5      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8009864:	6841      	ldr	r1, [r0, #4]
 8009866:	2900      	cmp	r1, #0
 8009868:	f000 81cb 	beq.w	8009c02 <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800986c:	2002      	movs	r0, #2
 800986e:	f001 f9ff 	bl	800ac70 <LoRaMacCryptoSetKey>
 8009872:	4604      	mov	r4, r0
 8009874:	2800      	cmp	r0, #0
 8009876:	f000 81bb 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800987a:	2411      	movs	r4, #17
 800987c:	e1b8      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800987e:	6841      	ldr	r1, [r0, #4]
 8009880:	2900      	cmp	r1, #0
 8009882:	f000 81c0 	beq.w	8009c06 <LoRaMacMibSetRequestConfirm+0x4ae>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8009886:	2003      	movs	r0, #3
 8009888:	f001 f9f2 	bl	800ac70 <LoRaMacCryptoSetKey>
 800988c:	4604      	mov	r4, r0
 800988e:	2800      	cmp	r0, #0
 8009890:	f000 81ae 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009894:	2411      	movs	r4, #17
 8009896:	e1ab      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8009898:	6841      	ldr	r1, [r0, #4]
 800989a:	2900      	cmp	r1, #0
 800989c:	f000 81b5 	beq.w	8009c0a <LoRaMacMibSetRequestConfirm+0x4b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80098a0:	207f      	movs	r0, #127	; 0x7f
 80098a2:	f001 f9e5 	bl	800ac70 <LoRaMacCryptoSetKey>
 80098a6:	4604      	mov	r4, r0
 80098a8:	2800      	cmp	r0, #0
 80098aa:	f000 81a1 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80098ae:	2411      	movs	r4, #17
 80098b0:	e19e      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80098b2:	6841      	ldr	r1, [r0, #4]
 80098b4:	2900      	cmp	r1, #0
 80098b6:	f000 81aa 	beq.w	8009c0e <LoRaMacMibSetRequestConfirm+0x4b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80098ba:	2080      	movs	r0, #128	; 0x80
 80098bc:	f001 f9d8 	bl	800ac70 <LoRaMacCryptoSetKey>
 80098c0:	4604      	mov	r4, r0
 80098c2:	2800      	cmp	r0, #0
 80098c4:	f000 8194 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80098c8:	2411      	movs	r4, #17
 80098ca:	e191      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80098cc:	6841      	ldr	r1, [r0, #4]
 80098ce:	2900      	cmp	r1, #0
 80098d0:	f000 819f 	beq.w	8009c12 <LoRaMacMibSetRequestConfirm+0x4ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80098d4:	2081      	movs	r0, #129	; 0x81
 80098d6:	f001 f9cb 	bl	800ac70 <LoRaMacCryptoSetKey>
 80098da:	4604      	mov	r4, r0
 80098dc:	2800      	cmp	r0, #0
 80098de:	f000 8187 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80098e2:	2411      	movs	r4, #17
 80098e4:	e184      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80098e6:	6841      	ldr	r1, [r0, #4]
 80098e8:	2900      	cmp	r1, #0
 80098ea:	f000 8194 	beq.w	8009c16 <LoRaMacMibSetRequestConfirm+0x4be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80098ee:	2082      	movs	r0, #130	; 0x82
 80098f0:	f001 f9be 	bl	800ac70 <LoRaMacCryptoSetKey>
 80098f4:	4604      	mov	r4, r0
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f000 817a 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80098fc:	2411      	movs	r4, #17
 80098fe:	e177      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009900:	7900      	ldrb	r0, [r0, #4]
 8009902:	4b4d      	ldr	r3, [pc, #308]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009904:	f883 00fd 	strb.w	r0, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009908:	4c4c      	ldr	r4, [pc, #304]	; (8009a3c <LoRaMacMibSetRequestConfirm+0x2e4>)
 800990a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800990c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800990e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009910:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009912:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 8009914:	e16c      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009916:	7902      	ldrb	r2, [r0, #4]
 8009918:	4b47      	ldr	r3, [pc, #284]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800991a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800991e:	2400      	movs	r4, #0
            break;
 8009920:	e166      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009922:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009926:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800992a:	4b43      	ldr	r3, [pc, #268]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800992c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009930:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009934:	2207      	movs	r2, #7
 8009936:	a901      	add	r1, sp, #4
 8009938:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800993c:	f001 fbc1 	bl	800b0c2 <RegionVerify>
 8009940:	b908      	cbnz	r0, 8009946 <LoRaMacMibSetRequestConfirm+0x1ee>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009942:	2403      	movs	r4, #3
 8009944:	e154      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009946:	686b      	ldr	r3, [r5, #4]
 8009948:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800994a:	2200      	movs	r2, #0
 800994c:	a901      	add	r1, sp, #4
 800994e:	4b3a      	ldr	r3, [pc, #232]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009950:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009954:	f001 fbb5 	bl	800b0c2 <RegionVerify>
 8009958:	2800      	cmp	r0, #0
 800995a:	f000 815e 	beq.w	8009c1a <LoRaMacMibSetRequestConfirm+0x4c2>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800995e:	4b38      	ldr	r3, [pc, #224]	; (8009a40 <LoRaMacMibSetRequestConfirm+0x2e8>)
 8009960:	3504      	adds	r5, #4
 8009962:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009966:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800996a:	2400      	movs	r4, #0
 800996c:	e140      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800996e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009972:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009976:	4b30      	ldr	r3, [pc, #192]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009978:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800997c:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009980:	2207      	movs	r2, #7
 8009982:	a901      	add	r1, sp, #4
 8009984:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009988:	f001 fb9b 	bl	800b0c2 <RegionVerify>
 800998c:	2800      	cmp	r0, #0
 800998e:	f000 8146 	beq.w	8009c1e <LoRaMacMibSetRequestConfirm+0x4c6>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009992:	4b2c      	ldr	r3, [pc, #176]	; (8009a44 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8009994:	3504      	adds	r5, #4
 8009996:	e895 0003 	ldmia.w	r5, {r0, r1}
 800999a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800999e:	2400      	movs	r4, #0
 80099a0:	e126      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80099a2:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80099a6:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80099aa:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 80099ac:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80099b0:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80099b4:	2207      	movs	r2, #7
 80099b6:	a901      	add	r1, sp, #4
 80099b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80099bc:	f001 fb81 	bl	800b0c2 <RegionVerify>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f000 812e 	beq.w	8009c22 <LoRaMacMibSetRequestConfirm+0x4ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80099c6:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 80099c8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80099cc:	3504      	adds	r5, #4
 80099ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80099d2:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80099d6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d001      	beq.n	80099e2 <LoRaMacMibSetRequestConfirm+0x28a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099de:	2400      	movs	r4, #0
 80099e0:	e106      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80099e2:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 80099e6:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 80099ea:	2c00      	cmp	r4, #0
 80099ec:	f000 8100 	beq.w	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80099f0:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <LoRaMacMibSetRequestConfirm+0x2e4>)
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80099f6:	f7fe ff0f 	bl	8008818 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099fa:	2400      	movs	r4, #0
 80099fc:	e0f8      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80099fe:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009a02:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a06:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009a08:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009a0c:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009a10:	2207      	movs	r2, #7
 8009a12:	a901      	add	r1, sp, #4
 8009a14:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a18:	f001 fb53 	bl	800b0c2 <RegionVerify>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	f000 8102 	beq.w	8009c26 <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009a22:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009a24:	3504      	adds	r5, #4
 8009a26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a2a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a2e:	2400      	movs	r4, #0
 8009a30:	e0de      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
 8009a32:	bf00      	nop
 8009a34:	20000588 	.word	0x20000588
 8009a38:	20000a90 	.word	0x20000a90
 8009a3c:	08011ea4 	.word	0x08011ea4
 8009a40:	20000af4 	.word	0x20000af4
 8009a44:	20000b34 	.word	0x20000b34
 8009a48:	20000b3c 	.word	0x20000b3c
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009a4c:	6843      	ldr	r3, [r0, #4]
 8009a4e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009a56:	a902      	add	r1, sp, #8
 8009a58:	4b7c      	ldr	r3, [pc, #496]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009a5a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a5e:	f001 fb4e 	bl	800b0fe <RegionChanMaskSet>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	f000 80e1 	beq.w	8009c2a <LoRaMacMibSetRequestConfirm+0x4d2>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a68:	2400      	movs	r4, #0
 8009a6a:	e0c1      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009a6c:	6843      	ldr	r3, [r0, #4]
 8009a6e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009a76:	a902      	add	r1, sp, #8
 8009a78:	4b74      	ldr	r3, [pc, #464]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009a7a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a7e:	f001 fb3e 	bl	800b0fe <RegionChanMaskSet>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f000 80d3 	beq.w	8009c2e <LoRaMacMibSetRequestConfirm+0x4d6>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a88:	2400      	movs	r4, #0
 8009a8a:	e0b1      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8009a8c:	7902      	ldrb	r2, [r0, #4]
 8009a8e:	1e53      	subs	r3, r2, #1
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b0e      	cmp	r3, #14
 8009a94:	f200 80cd 	bhi.w	8009c32 <LoRaMacMibSetRequestConfirm+0x4da>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009a98:	4b6c      	ldr	r3, [pc, #432]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009a9a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a9e:	2400      	movs	r4, #0
 8009aa0:	e0a6      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009aa2:	6842      	ldr	r2, [r0, #4]
 8009aa4:	4b69      	ldr	r3, [pc, #420]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009aa6:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009aa8:	2400      	movs	r4, #0
            break;
 8009aaa:	e0a1      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009aac:	6842      	ldr	r2, [r0, #4]
 8009aae:	4b67      	ldr	r3, [pc, #412]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009ab0:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ab2:	2400      	movs	r4, #0
            break;
 8009ab4:	e09c      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009ab6:	6842      	ldr	r2, [r0, #4]
 8009ab8:	4b64      	ldr	r3, [pc, #400]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009aba:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009abc:	2400      	movs	r4, #0
            break;
 8009abe:	e097      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009ac0:	6842      	ldr	r2, [r0, #4]
 8009ac2:	4b62      	ldr	r3, [pc, #392]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009ac4:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ac6:	2400      	movs	r4, #0
            break;
 8009ac8:	e092      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009aca:	6842      	ldr	r2, [r0, #4]
 8009acc:	4b5f      	ldr	r3, [pc, #380]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009ace:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ad0:	2400      	movs	r4, #0
            break;
 8009ad2:	e08d      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009ad4:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009ad8:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009adc:	2206      	movs	r2, #6
 8009ade:	a901      	add	r1, sp, #4
 8009ae0:	4b5a      	ldr	r3, [pc, #360]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009ae2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009ae6:	f001 faec 	bl	800b0c2 <RegionVerify>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f000 80a3 	beq.w	8009c36 <LoRaMacMibSetRequestConfirm+0x4de>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8009af0:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009af4:	4b55      	ldr	r3, [pc, #340]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009af6:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009afa:	2400      	movs	r4, #0
 8009afc:	e078      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009afe:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009b02:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009b06:	4b51      	ldr	r3, [pc, #324]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009b08:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009b0c:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009b10:	2205      	movs	r2, #5
 8009b12:	a901      	add	r1, sp, #4
 8009b14:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b18:	f001 fad3 	bl	800b0c2 <RegionVerify>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f000 808c 	beq.w	8009c3a <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009b22:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009b26:	4b49      	ldr	r3, [pc, #292]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b2c:	2400      	movs	r4, #0
 8009b2e:	e05f      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009b30:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009b34:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009b38:	220a      	movs	r2, #10
 8009b3a:	a901      	add	r1, sp, #4
 8009b3c:	4b43      	ldr	r3, [pc, #268]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009b3e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b42:	f001 fabe 	bl	800b0c2 <RegionVerify>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d079      	beq.n	8009c3e <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8009b4a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009b4e:	4b3f      	ldr	r3, [pc, #252]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009b50:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b54:	2400      	movs	r4, #0
 8009b56:	e04b      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009b58:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009b5c:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009b60:	2209      	movs	r2, #9
 8009b62:	a901      	add	r1, sp, #4
 8009b64:	4b39      	ldr	r3, [pc, #228]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009b66:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b6a:	f001 faaa 	bl	800b0c2 <RegionVerify>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d067      	beq.n	8009c42 <LoRaMacMibSetRequestConfirm+0x4ea>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009b72:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009b76:	4b35      	ldr	r3, [pc, #212]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b7c:	2400      	movs	r4, #0
 8009b7e:	e037      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009b80:	6842      	ldr	r2, [r0, #4]
 8009b82:	4b32      	ldr	r3, [pc, #200]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009b88:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b8a:	2400      	movs	r4, #0
            break;
 8009b8c:	e030      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009b8e:	7902      	ldrb	r2, [r0, #4]
 8009b90:	4b2e      	ldr	r3, [pc, #184]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009b92:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8009b96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b9a:	2400      	movs	r4, #0
            break;
 8009b9c:	e028      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009b9e:	6842      	ldr	r2, [r0, #4]
 8009ba0:	4b2a      	ldr	r3, [pc, #168]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009ba2:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ba4:	2400      	movs	r4, #0
            break;
 8009ba6:	e023      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009ba8:	6842      	ldr	r2, [r0, #4]
 8009baa:	4b28      	ldr	r3, [pc, #160]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009bac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bb0:	2400      	movs	r4, #0
            break;
 8009bb2:	e01d      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8009bb4:	6840      	ldr	r0, [r0, #4]
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d045      	beq.n	8009c46 <LoRaMacMibSetRequestConfirm+0x4ee>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8009bba:	f7fe fda1 	bl	8008700 <RestoreNvmData>
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	e016      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009bc2:	7983      	ldrb	r3, [r0, #6]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d901      	bls.n	8009bcc <LoRaMacMibSetRequestConfirm+0x474>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009bc8:	2403      	movs	r4, #3
 8009bca:	e011      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009bcc:	6842      	ldr	r2, [r0, #4]
 8009bce:	4b1f      	ldr	r3, [pc, #124]	; (8009c4c <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009bd0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009bd4:	6840      	ldr	r0, [r0, #4]
 8009bd6:	f000 fee5 	bl	800a9a4 <LoRaMacCryptoSetLrWanVersion>
 8009bda:	4604      	mov	r4, r0
 8009bdc:	b140      	cbz	r0, 8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009bde:	2411      	movs	r4, #17
 8009be0:	e006      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009be2:	f000 fa73 	bl	800a0cc <LoRaMacMibClassBSetRequestConfirm>
 8009be6:	4604      	mov	r4, r0
            break;
 8009be8:	e002      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009bea:	2403      	movs	r4, #3
 8009bec:	e000      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
        return LORAMAC_STATUS_BUSY;
 8009bee:	2401      	movs	r4, #1
        }
    }
    return status;
}
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	b005      	add	sp, #20
 8009bf4:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009bf6:	2403      	movs	r4, #3
 8009bf8:	e7fa      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009bfa:	2403      	movs	r4, #3
 8009bfc:	e7f8      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009bfe:	2403      	movs	r4, #3
 8009c00:	e7f6      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c02:	2403      	movs	r4, #3
 8009c04:	e7f4      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c06:	2403      	movs	r4, #3
 8009c08:	e7f2      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c0a:	2403      	movs	r4, #3
 8009c0c:	e7f0      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c0e:	2403      	movs	r4, #3
 8009c10:	e7ee      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c12:	2403      	movs	r4, #3
 8009c14:	e7ec      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c16:	2403      	movs	r4, #3
 8009c18:	e7ea      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c1a:	2403      	movs	r4, #3
 8009c1c:	e7e8      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c1e:	2403      	movs	r4, #3
 8009c20:	e7e6      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c22:	2403      	movs	r4, #3
 8009c24:	e7e4      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c26:	2403      	movs	r4, #3
 8009c28:	e7e2      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c2a:	2403      	movs	r4, #3
 8009c2c:	e7e0      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c2e:	2403      	movs	r4, #3
 8009c30:	e7de      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c32:	2403      	movs	r4, #3
 8009c34:	e7dc      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c36:	2403      	movs	r4, #3
 8009c38:	e7da      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c3a:	2403      	movs	r4, #3
 8009c3c:	e7d8      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c3e:	2403      	movs	r4, #3
 8009c40:	e7d6      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c42:	2403      	movs	r4, #3
 8009c44:	e7d4      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c46:	2403      	movs	r4, #3
 8009c48:	e7d2      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0x498>
 8009c4a:	bf00      	nop
 8009c4c:	20000a90 	.word	0x20000a90

08009c50 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009c54:	2300      	movs	r3, #0
 8009c56:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f000 80c5 	beq.w	8009dea <LoRaMacMlmeRequest+0x19a>
 8009c60:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8009c62:	f7ff f9cf 	bl	8009004 <LoRaMacIsBusy>
 8009c66:	b118      	cbz	r0, 8009c70 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 8009c68:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	b002      	add	sp, #8
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009c70:	f000 fcd2 	bl	800a618 <LoRaMacConfirmQueueIsFull>
 8009c74:	b108      	cbz	r0, 8009c7a <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 8009c76:	2401      	movs	r4, #1
 8009c78:	e7f7      	b.n	8009c6a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009c7a:	f000 fcc7 	bl	800a60c <LoRaMacConfirmQueueGetCnt>
 8009c7e:	b1f8      	cbz	r0, 8009cc0 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009c80:	4b5b      	ldr	r3, [pc, #364]	; (8009df0 <LoRaMacMlmeRequest+0x1a0>)
 8009c82:	2101      	movs	r1, #1
 8009c84:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009c88:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009c8c:	f042 0204 	orr.w	r2, r2, #4
 8009c90:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8009c94:	782b      	ldrb	r3, [r5, #0]
 8009c96:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009c9a:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 8009ca4:	461c      	mov	r4, r3
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	2b0d      	cmp	r3, #13
 8009caa:	f200 8084 	bhi.w	8009db6 <LoRaMacMlmeRequest+0x166>
 8009cae:	e8df f003 	tbb	[pc, r3]
 8009cb2:	820d      	.short	0x820d
 8009cb4:	423d3382 	.word	0x423d3382
 8009cb8:	4b828282 	.word	0x4b828282
 8009cbc:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009cc0:	2214      	movs	r2, #20
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	484b      	ldr	r0, [pc, #300]	; (8009df4 <LoRaMacMlmeRequest+0x1a4>)
 8009cc6:	f004 fb28 	bl	800e31a <memset1>
 8009cca:	e7d9      	b.n	8009c80 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8009ccc:	4b48      	ldr	r3, [pc, #288]	; (8009df0 <LoRaMacMlmeRequest+0x1a0>)
 8009cce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009cd2:	f013 0f20 	tst.w	r3, #32
 8009cd6:	d1c8      	bne.n	8009c6a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 8009cd8:	f7fe fec6 	bl	8008a68 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009cdc:	4c46      	ldr	r4, [pc, #280]	; (8009df8 <LoRaMacMlmeRequest+0x1a8>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8009ce4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009ce8:	f001 faa7 	bl	800b23a <RegionAlternateDr>
 8009cec:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009cf0:	2307      	movs	r3, #7
 8009cf2:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 8009cf6:	20ff      	movs	r0, #255	; 0xff
 8009cf8:	f7fe ffde 	bl	8008cb8 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d05a      	beq.n	8009db8 <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8009d02:	4e3d      	ldr	r6, [pc, #244]	; (8009df8 <LoRaMacMlmeRequest+0x1a8>)
 8009d04:	2201      	movs	r2, #1
 8009d06:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8009d0a:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8009d0e:	f001 fa94 	bl	800b23a <RegionAlternateDr>
 8009d12:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 8009d16:	e04f      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4669      	mov	r1, sp
 8009d1c:	2002      	movs	r0, #2
 8009d1e:	f000 fa73 	bl	800a208 <LoRaMacCommandsAddCmd>
 8009d22:	4604      	mov	r4, r0
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d047      	beq.n	8009db8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009d28:	2413      	movs	r4, #19
 8009d2a:	e045      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009d2c:	88a8      	ldrh	r0, [r5, #4]
 8009d2e:	f7fe ffed 	bl	8008d0c <SetTxContinuousWave>
 8009d32:	4604      	mov	r4, r0
            break;
 8009d34:	e040      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8009d36:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8009d3a:	b2d2      	uxtb	r2, r2
 8009d3c:	68a9      	ldr	r1, [r5, #8]
 8009d3e:	88a8      	ldrh	r0, [r5, #4]
 8009d40:	f7fd f88e 	bl	8006e60 <SetTxContinuousWave1>
 8009d44:	4604      	mov	r4, r0
            break;
 8009d46:	e037      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d48:	2200      	movs	r2, #0
 8009d4a:	4669      	mov	r1, sp
 8009d4c:	200d      	movs	r0, #13
 8009d4e:	f000 fa5b 	bl	800a208 <LoRaMacCommandsAddCmd>
 8009d52:	4604      	mov	r4, r0
 8009d54:	b380      	cbz	r0, 8009db8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009d56:	2413      	movs	r4, #19
 8009d58:	e02e      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009d5a:	4b27      	ldr	r3, [pc, #156]	; (8009df8 <LoRaMacMlmeRequest+0x1a8>)
 8009d5c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009d60:	b10b      	cbz	r3, 8009d66 <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009d62:	2402      	movs	r4, #2
 8009d64:	e028      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8009d66:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8009d68:	f004 0007 	and.w	r0, r4, #7
 8009d6c:	f000 f9a7 	bl	800a0be <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8009d70:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d74:	2201      	movs	r2, #1
 8009d76:	4669      	mov	r1, sp
 8009d78:	2010      	movs	r0, #16
 8009d7a:	f000 fa45 	bl	800a208 <LoRaMacCommandsAddCmd>
 8009d7e:	4604      	mov	r4, r0
 8009d80:	b1d0      	cbz	r0, 8009db8 <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009d82:	2413      	movs	r4, #19
 8009d84:	e018      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d86:	2200      	movs	r2, #0
 8009d88:	4669      	mov	r1, sp
 8009d8a:	2012      	movs	r0, #18
 8009d8c:	f000 fa3c 	bl	800a208 <LoRaMacCommandsAddCmd>
 8009d90:	4604      	mov	r4, r0
 8009d92:	b188      	cbz	r0, 8009db8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009d94:	2413      	movs	r4, #19
 8009d96:	e00f      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009d9e:	f000 f97f 	bl	800a0a0 <LoRaMacClassBIsAcquisitionInProgress>
 8009da2:	b108      	cbz	r0, 8009da8 <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 8009da4:	2401      	movs	r4, #1
 8009da6:	e007      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8009da8:	f000 f977 	bl	800a09a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8009dac:	2000      	movs	r0, #0
 8009dae:	f000 f979 	bl	800a0a4 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8009db2:	2400      	movs	r4, #0
 8009db4:	e000      	b.n	8009db8 <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 8009db6:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009db8:	4b0d      	ldr	r3, [pc, #52]	; (8009df0 <LoRaMacMlmeRequest+0x1a0>)
 8009dba:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8009dbe:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8009dc0:	b17c      	cbz	r4, 8009de2 <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009dc2:	f000 fc23 	bl	800a60c <LoRaMacConfirmQueueGetCnt>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f47f af4f 	bne.w	8009c6a <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 8009dcc:	4b08      	ldr	r3, [pc, #32]	; (8009df0 <LoRaMacMlmeRequest+0x1a0>)
 8009dce:	2100      	movs	r1, #0
 8009dd0:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009dd4:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009dd8:	f361 0282 	bfi	r2, r1, #2, #1
 8009ddc:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8009de0:	e743      	b.n	8009c6a <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 8009de2:	a801      	add	r0, sp, #4
 8009de4:	f000 fb4e 	bl	800a484 <LoRaMacConfirmQueueAdd>
 8009de8:	e73f      	b.n	8009c6a <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009dea:	2403      	movs	r4, #3
 8009dec:	e73d      	b.n	8009c6a <LoRaMacMlmeRequest+0x1a>
 8009dee:	bf00      	nop
 8009df0:	20000588 	.word	0x20000588
 8009df4:	200009d4 	.word	0x200009d4
 8009df8:	20000a90 	.word	0x20000a90

08009dfc <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	f000 80b0 	beq.w	8009f62 <LoRaMacMcpsRequest+0x166>
{
 8009e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	460d      	mov	r5, r1
 8009e0a:	f04f 0800 	mov.w	r8, #0
 8009e0e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8009e10:	f7ff f8f8 	bl	8009004 <LoRaMacIsBusy>
 8009e14:	4606      	mov	r6, r0
 8009e16:	b118      	cbz	r0, 8009e20 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8009e18:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8009e1a:	b008      	add	sp, #32
 8009e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 8009e20:	4641      	mov	r1, r8
 8009e22:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009e26:	4f51      	ldr	r7, [pc, #324]	; (8009f6c <LoRaMacMcpsRequest+0x170>)
 8009e28:	2214      	movs	r2, #20
 8009e2a:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 8009e2e:	f004 fa74 	bl	800e31a <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009e38:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 8009e3c:	7823      	ldrb	r3, [r4, #0]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d059      	beq.n	8009ef6 <LoRaMacMcpsRequest+0xfa>
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d06f      	beq.n	8009f26 <LoRaMacMcpsRequest+0x12a>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d042      	beq.n	8009ed0 <LoRaMacMcpsRequest+0xd4>
 8009e4a:	2700      	movs	r7, #0
 8009e4c:	46ba      	mov	sl, r7
 8009e4e:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009e50:	2302      	movs	r3, #2
 8009e52:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e56:	4b46      	ldr	r3, [pc, #280]	; (8009f70 <LoRaMacMcpsRequest+0x174>)
 8009e58:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009e5c:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e60:	a906      	add	r1, sp, #24
 8009e62:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009e66:	f001 f8f8 	bl	800b05a <RegionGetPhyParam>
 8009e6a:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009e6c:	b240      	sxtb	r0, r0
 8009e6e:	42b8      	cmp	r0, r7
 8009e70:	bfb8      	it	lt
 8009e72:	4638      	movlt	r0, r7
    if( readyToSend == true )
 8009e74:	2e00      	cmp	r6, #0
 8009e76:	d06e      	beq.n	8009f56 <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8009e78:	4b3d      	ldr	r3, [pc, #244]	; (8009f70 <LoRaMacMcpsRequest+0x174>)
 8009e7a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8009e7e:	b99b      	cbnz	r3, 8009ea8 <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 8009e80:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e84:	4b3a      	ldr	r3, [pc, #232]	; (8009f70 <LoRaMacMcpsRequest+0x174>)
 8009e86:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009e8a:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009e8e:	2205      	movs	r2, #5
 8009e90:	a903      	add	r1, sp, #12
 8009e92:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009e96:	f001 f914 	bl	800b0c2 <RegionVerify>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d063      	beq.n	8009f66 <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009e9e:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 8009ea2:	4b33      	ldr	r3, [pc, #204]	; (8009f70 <LoRaMacMcpsRequest+0x174>)
 8009ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009ea8:	9500      	str	r5, [sp, #0]
 8009eaa:	4643      	mov	r3, r8
 8009eac:	4652      	mov	r2, sl
 8009eae:	4649      	mov	r1, r9
 8009eb0:	a804      	add	r0, sp, #16
 8009eb2:	f7ff f817 	bl	8008ee4 <Send>
        if( status == LORAMAC_STATUS_OK )
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d148      	bne.n	8009f4c <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8009eba:	7822      	ldrb	r2, [r4, #0]
 8009ebc:	4b2b      	ldr	r3, [pc, #172]	; (8009f6c <LoRaMacMcpsRequest+0x170>)
 8009ebe:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8009ec2:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009ec6:	f042 0201 	orr.w	r2, r2, #1
 8009eca:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8009ece:	e043      	b.n	8009f58 <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 8009ed0:	2601      	movs	r6, #1
 8009ed2:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009ed6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f362 1347 	bfi	r3, r2, #5, #3
 8009ee0:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8009ee4:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8009ee8:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8009eec:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8009ef0:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 8009ef4:	e7ac      	b.n	8009e50 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8009ef6:	7be3      	ldrb	r3, [r4, #15]
 8009ef8:	2b08      	cmp	r3, #8
 8009efa:	bf28      	it	cs
 8009efc:	2308      	movcs	r3, #8
 8009efe:	4a1b      	ldr	r2, [pc, #108]	; (8009f6c <LoRaMacMcpsRequest+0x170>)
 8009f00:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009f04:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009f08:	2204      	movs	r2, #4
 8009f0a:	f362 1347 	bfi	r3, r2, #5, #3
 8009f0e:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8009f12:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8009f16:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8009f1a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009f1e:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 8009f22:	2601      	movs	r6, #1
            break;
 8009f24:	e794      	b.n	8009e50 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 8009f26:	2601      	movs	r6, #1
 8009f28:	4b10      	ldr	r3, [pc, #64]	; (8009f6c <LoRaMacMcpsRequest+0x170>)
 8009f2a:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8009f2e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009f32:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8009f36:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009f3a:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8009f3e:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8009f42:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 8009f46:	f04f 0900 	mov.w	r9, #0
            break;
 8009f4a:	e781      	b.n	8009e50 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 8009f4c:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <LoRaMacMcpsRequest+0x170>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8009f54:	e000      	b.n	8009f58 <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009f56:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009f58:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <LoRaMacMcpsRequest+0x170>)
 8009f5a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8009f5e:	6123      	str	r3, [r4, #16]
    return status;
 8009f60:	e75b      	b.n	8009e1a <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009f62:	2003      	movs	r0, #3
}
 8009f64:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8009f66:	2003      	movs	r0, #3
 8009f68:	e757      	b.n	8009e1a <LoRaMacMcpsRequest+0x1e>
 8009f6a:	bf00      	nop
 8009f6c:	20000588 	.word	0x20000588
 8009f70:	20000a90 	.word	0x20000a90

08009f74 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8009f74:	b510      	push	{r4, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8009f7a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8009f7e:	220f      	movs	r2, #15
 8009f80:	a901      	add	r1, sp, #4
 8009f82:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <LoRaMacTestSetDutyCycleOn+0x24>)
 8009f84:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009f88:	f001 f89b 	bl	800b0c2 <RegionVerify>
 8009f8c:	b110      	cbz	r0, 8009f94 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8009f8e:	4b02      	ldr	r3, [pc, #8]	; (8009f98 <LoRaMacTestSetDutyCycleOn+0x24>)
 8009f90:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
    }
}
 8009f94:	b002      	add	sp, #8
 8009f96:	bd10      	pop	{r4, pc}
 8009f98:	20000a90 	.word	0x20000a90

08009f9c <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	b089      	sub	sp, #36	; 0x24
 8009fa2:	460f      	mov	r7, r1
 8009fa4:	4616      	mov	r6, r2
 8009fa6:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 8009fa8:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 8009fac:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8009fb0:	6883      	ldr	r3, [r0, #8]
 8009fb2:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 8009fb4:	f890 8005 	ldrb.w	r8, [r0, #5]
 8009fb8:	f1b8 0f00 	cmp.w	r8, #0
 8009fbc:	d107      	bne.n	8009fce <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 8009fbe:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 8009fc2:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	b009      	add	sp, #36	; 0x24
 8009fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fce:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009fd6:	7c83      	ldrb	r3, [r0, #18]
 8009fd8:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009fdc:	a906      	add	r1, sp, #24
 8009fde:	7cc0      	ldrb	r0, [r0, #19]
 8009fe0:	f001 f83b 	bl	800b05a <RegionGetPhyParam>
 8009fe4:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 8009fe6:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 8009fea:	464a      	mov	r2, r9
 8009fec:	45d1      	cmp	r9, sl
 8009fee:	bfb8      	it	lt
 8009ff0:	4652      	movlt	r2, sl
 8009ff2:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 8009ff4:	45d1      	cmp	r9, sl
 8009ff6:	dc04      	bgt.n	800a002 <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 8009ffc:	4691      	mov	r9, r2
            adrAckReq = false;
 8009ffe:	4698      	mov	r8, r3
 800a000:	e7dd      	b.n	8009fbe <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a002:	68a2      	ldr	r2, [r4, #8]
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	429a      	cmp	r2, r3
 800a008:	d201      	bcs.n	800a00e <CalcNextV10X+0x72>
                adrAckReq = false;
 800a00a:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a00e:	89e1      	ldrh	r1, [r4, #14]
 800a010:	440b      	add	r3, r1
 800a012:	429a      	cmp	r2, r3
 800a014:	d202      	bcs.n	800a01c <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800a016:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a01a:	e7d0      	b.n	8009fbe <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800a01c:	2308      	movs	r3, #8
 800a01e:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a022:	a906      	add	r1, sp, #24
 800a024:	7ce0      	ldrb	r0, [r4, #19]
 800a026:	f001 f818 	bl	800b05a <RegionGetPhyParam>
 800a02a:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800a02c:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a030:	68a3      	ldr	r3, [r4, #8]
 800a032:	89e2      	ldrh	r2, [r4, #14]
 800a034:	fbb3 f1f2 	udiv	r1, r3, r2
 800a038:	fb02 3311 	mls	r3, r2, r1, r3
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d002      	beq.n	800a046 <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800a040:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a044:	e7bb      	b.n	8009fbe <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a046:	2322      	movs	r3, #34	; 0x22
 800a048:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800a04c:	9b01      	ldr	r3, [sp, #4]
 800a04e:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a052:	7ca3      	ldrb	r3, [r4, #18]
 800a054:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a058:	a906      	add	r1, sp, #24
 800a05a:	7ce0      	ldrb	r0, [r4, #19]
 800a05c:	f000 fffd 	bl	800b05a <RegionGetPhyParam>
 800a060:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800a062:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800a066:	45ca      	cmp	sl, r9
 800a068:	d1a9      	bne.n	8009fbe <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800a06a:	f894 8004 	ldrb.w	r8, [r4, #4]
 800a06e:	f1b8 0f00 	cmp.w	r8, #0
 800a072:	d0a4      	beq.n	8009fbe <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a074:	2302      	movs	r3, #2
 800a076:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800a07a:	a902      	add	r1, sp, #8
 800a07c:	7ce0      	ldrb	r0, [r4, #19]
 800a07e:	f001 f812 	bl	800b0a6 <RegionInitDefaults>
                        adrAckReq = false;
 800a082:	f04f 0800 	mov.w	r8, #0
 800a086:	e79a      	b.n	8009fbe <CalcNextV10X+0x22>

0800a088 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a088:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800a08a:	7884      	ldrb	r4, [r0, #2]
 800a08c:	b10c      	cbz	r4, 800a092 <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800a08e:	2000      	movs	r0, #0
}
 800a090:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800a092:	f7ff ff83 	bl	8009f9c <CalcNextV10X>
 800a096:	e7fb      	b.n	800a090 <LoRaMacAdrCalcNext+0x8>

0800a098 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a098:	4770      	bx	lr

0800a09a <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a09a:	4770      	bx	lr

0800a09c <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a09c:	4770      	bx	lr

0800a09e <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a09e:	4770      	bx	lr

0800a0a0 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	4770      	bx	lr

0800a0a4 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0a4:	4770      	bx	lr

0800a0a6 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0a6:	4770      	bx	lr

0800a0a8 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0a8:	4770      	bx	lr

0800a0aa <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	4770      	bx	lr

0800a0ae <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	4770      	bx	lr

0800a0b2 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	4770      	bx	lr

0800a0b6 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	4770      	bx	lr

0800a0ba <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	4770      	bx	lr

0800a0be <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0be:	4770      	bx	lr

0800a0c0 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0c0:	4770      	bx	lr

0800a0c2 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0c2:	4770      	bx	lr

0800a0c4 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0c4:	2002      	movs	r0, #2
 800a0c6:	4770      	bx	lr

0800a0c8 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0c8:	2002      	movs	r0, #2
 800a0ca:	4770      	bx	lr

0800a0cc <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0cc:	2002      	movs	r0, #2
 800a0ce:	4770      	bx	lr

0800a0d0 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0d0:	4770      	bx	lr

0800a0d2 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	4770      	bx	lr

0800a0d6 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0d6:	4770      	bx	lr

0800a0d8 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0d8:	4770      	bx	lr

0800a0da <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0da:	2000      	movs	r0, #0
 800a0dc:	4770      	bx	lr

0800a0de <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0de:	2000      	movs	r0, #0
 800a0e0:	4770      	bx	lr

0800a0e2 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0e2:	4770      	bx	lr

0800a0e4 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0e4:	4770      	bx	lr

0800a0e6 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	2b0f      	cmp	r3, #15
 800a0ea:	d804      	bhi.n	800a0f6 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800a0ec:	5cc2      	ldrb	r2, [r0, r3]
 800a0ee:	b922      	cbnz	r2, 800a0fa <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	e7f8      	b.n	800a0e8 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	4770      	bx	lr
            return false;
 800a0fa:	2000      	movs	r0, #0
}
 800a0fc:	4770      	bx	lr
	...

0800a100 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800a100:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800a102:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800a104:	0123      	lsls	r3, r4, #4
 800a106:	3308      	adds	r3, #8
 800a108:	4d06      	ldr	r5, [pc, #24]	; (800a124 <MallocNewMacCommandSlot+0x24>)
 800a10a:	441d      	add	r5, r3
 800a10c:	4628      	mov	r0, r5
 800a10e:	f7ff ffea 	bl	800a0e6 <IsSlotFree>
 800a112:	b920      	cbnz	r0, 800a11e <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800a114:	3401      	adds	r4, #1
 800a116:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800a118:	2c0f      	cmp	r4, #15
 800a11a:	d1f3      	bne.n	800a104 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800a11c:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800a11e:	4628      	mov	r0, r5
 800a120:	bd38      	pop	{r3, r4, r5, pc}
 800a122:	bf00      	nop
 800a124:	200010b4 	.word	0x200010b4

0800a128 <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800a128:	b120      	cbz	r0, 800a134 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800a12a:	2200      	movs	r2, #0
 800a12c:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800a12e:	6042      	str	r2, [r0, #4]

    return true;
 800a130:	2001      	movs	r0, #1
 800a132:	4770      	bx	lr
        return false;
 800a134:	2000      	movs	r0, #0
}
 800a136:	4770      	bx	lr

0800a138 <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a138:	4603      	mov	r3, r0
 800a13a:	b160      	cbz	r0, 800a156 <LinkedListAdd+0x1e>
 800a13c:	b169      	cbz	r1, 800a15a <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800a13e:	6802      	ldr	r2, [r0, #0]
 800a140:	b13a      	cbz	r2, 800a152 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	b102      	cbz	r2, 800a148 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800a146:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800a148:	2200      	movs	r2, #0
 800a14a:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800a14c:	6059      	str	r1, [r3, #4]

    return true;
 800a14e:	2001      	movs	r0, #1
 800a150:	4770      	bx	lr
        list->First = element;
 800a152:	6001      	str	r1, [r0, #0]
 800a154:	e7f5      	b.n	800a142 <LinkedListAdd+0xa>
        return false;
 800a156:	2000      	movs	r0, #0
 800a158:	4770      	bx	lr
 800a15a:	2000      	movs	r0, #0
}
 800a15c:	4770      	bx	lr

0800a15e <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a15e:	b160      	cbz	r0, 800a17a <LinkedListGetPrevious+0x1c>
 800a160:	b161      	cbz	r1, 800a17c <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800a162:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800a164:	4281      	cmp	r1, r0
 800a166:	d102      	bne.n	800a16e <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800a168:	2000      	movs	r0, #0
    }

    return curElement;
}
 800a16a:	4770      	bx	lr
            curElement = curElement->Next;
 800a16c:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a16e:	2800      	cmp	r0, #0
 800a170:	d0fb      	beq.n	800a16a <LinkedListGetPrevious+0xc>
 800a172:	6803      	ldr	r3, [r0, #0]
 800a174:	428b      	cmp	r3, r1
 800a176:	d1f9      	bne.n	800a16c <LinkedListGetPrevious+0xe>
 800a178:	4770      	bx	lr
 800a17a:	4770      	bx	lr
        return NULL;
 800a17c:	4608      	mov	r0, r1
 800a17e:	4770      	bx	lr

0800a180 <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a180:	b1b8      	cbz	r0, 800a1b2 <LinkedListRemove+0x32>
{
 800a182:	b538      	push	{r3, r4, r5, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800a188:	b1a9      	cbz	r1, 800a1b6 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800a18a:	f7ff ffe8 	bl	800a15e <LinkedListGetPrevious>

    if( list->First == element )
 800a18e:	682b      	ldr	r3, [r5, #0]
 800a190:	42a3      	cmp	r3, r4
 800a192:	d009      	beq.n	800a1a8 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800a194:	686b      	ldr	r3, [r5, #4]
 800a196:	42a3      	cmp	r3, r4
 800a198:	d009      	beq.n	800a1ae <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800a19a:	b108      	cbz	r0, 800a1a0 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	6023      	str	r3, [r4, #0]

    return true;
 800a1a4:	2001      	movs	r0, #1
}
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	602b      	str	r3, [r5, #0]
 800a1ac:	e7f2      	b.n	800a194 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800a1ae:	6068      	str	r0, [r5, #4]
 800a1b0:	e7f3      	b.n	800a19a <LinkedListRemove+0x1a>
        return false;
 800a1b2:	2000      	movs	r0, #0
}
 800a1b4:	4770      	bx	lr
        return false;
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	e7f5      	b.n	800a1a6 <LinkedListRemove+0x26>

0800a1ba <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800a1ba:	2805      	cmp	r0, #5
 800a1bc:	d006      	beq.n	800a1cc <IsSticky+0x12>
 800a1be:	d307      	bcc.n	800a1d0 <IsSticky+0x16>
 800a1c0:	3808      	subs	r0, #8
 800a1c2:	b2c0      	uxtb	r0, r0
 800a1c4:	2802      	cmp	r0, #2
 800a1c6:	d905      	bls.n	800a1d4 <IsSticky+0x1a>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
        default:
            return false;
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	4770      	bx	lr
    switch( cid )
 800a1cc:	2001      	movs	r0, #1
 800a1ce:	4770      	bx	lr
            return false;
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	4770      	bx	lr
    switch( cid )
 800a1d4:	2001      	movs	r0, #1
    }
}
 800a1d6:	4770      	bx	lr

0800a1d8 <FreeMacCommandSlot>:
    if( slot == NULL )
 800a1d8:	b130      	cbz	r0, 800a1e8 <FreeMacCommandSlot+0x10>
{
 800a1da:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a1dc:	2210      	movs	r2, #16
 800a1de:	2100      	movs	r1, #0
 800a1e0:	f004 f89b 	bl	800e31a <memset1>
    return true;
 800a1e4:	2001      	movs	r0, #1
}
 800a1e6:	bd08      	pop	{r3, pc}
        return false;
 800a1e8:	2000      	movs	r0, #0
}
 800a1ea:	4770      	bx	lr

0800a1ec <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a1ec:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a1ee:	4c05      	ldr	r4, [pc, #20]	; (800a204 <LoRaMacCommandsInit+0x18>)
 800a1f0:	22fc      	movs	r2, #252	; 0xfc
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f004 f890 	bl	800e31a <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff ff94 	bl	800a128 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a200:	2000      	movs	r0, #0
 800a202:	bd10      	pop	{r4, pc}
 800a204:	200010b4 	.word	0x200010b4

0800a208 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800a208:	b301      	cbz	r1, 800a24c <LoRaMacCommandsAddCmd+0x44>
{
 800a20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20c:	4605      	mov	r5, r0
 800a20e:	4614      	mov	r4, r2
 800a210:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800a212:	f7ff ff75 	bl	800a100 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800a216:	4606      	mov	r6, r0
 800a218:	b1d0      	cbz	r0, 800a250 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800a21a:	4601      	mov	r1, r0
 800a21c:	480e      	ldr	r0, [pc, #56]	; (800a258 <LoRaMacCommandsAddCmd+0x50>)
 800a21e:	f7ff ff8b 	bl	800a138 <LinkedListAdd>
 800a222:	b1b8      	cbz	r0, 800a254 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800a224:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800a226:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a228:	b2a2      	uxth	r2, r4
 800a22a:	4639      	mov	r1, r7
 800a22c:	1d70      	adds	r0, r6, #5
 800a22e:	f004 f85c 	bl	800e2ea <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800a232:	4628      	mov	r0, r5
 800a234:	f7ff ffc1 	bl	800a1ba <IsSticky>
 800a238:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <LoRaMacCommandsAddCmd+0x50>)
 800a23c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800a240:	4414      	add	r4, r2
 800a242:	3401      	adds	r4, #1
 800a244:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800a248:	2000      	movs	r0, #0
}
 800a24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a24c:	2001      	movs	r0, #1
}
 800a24e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a250:	2002      	movs	r0, #2
 800a252:	e7fa      	b.n	800a24a <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800a254:	2005      	movs	r0, #5
 800a256:	e7f8      	b.n	800a24a <LoRaMacCommandsAddCmd+0x42>
 800a258:	200010b4 	.word	0x200010b4

0800a25c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800a25c:	b1a0      	cbz	r0, 800a288 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800a25e:	b510      	push	{r4, lr}
 800a260:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800a262:	4601      	mov	r1, r0
 800a264:	480b      	ldr	r0, [pc, #44]	; (800a294 <LoRaMacCommandsRemoveCmd+0x38>)
 800a266:	f7ff ff8b 	bl	800a180 <LinkedListRemove>
 800a26a:	b178      	cbz	r0, 800a28c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a26c:	68a1      	ldr	r1, [r4, #8]
 800a26e:	4a09      	ldr	r2, [pc, #36]	; (800a294 <LoRaMacCommandsRemoveCmd+0x38>)
 800a270:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800a274:	1a5b      	subs	r3, r3, r1
 800a276:	3b01      	subs	r3, #1
 800a278:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800a27c:	4620      	mov	r0, r4
 800a27e:	f7ff ffab 	bl	800a1d8 <FreeMacCommandSlot>
 800a282:	b128      	cbz	r0, 800a290 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a284:	2000      	movs	r0, #0
}
 800a286:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a288:	2001      	movs	r0, #1
}
 800a28a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800a28c:	2003      	movs	r0, #3
 800a28e:	e7fa      	b.n	800a286 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800a290:	2005      	movs	r0, #5
 800a292:	e7f8      	b.n	800a286 <LoRaMacCommandsRemoveCmd+0x2a>
 800a294:	200010b4 	.word	0x200010b4

0800a298 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a298:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800a29a:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a29c:	b120      	cbz	r0, 800a2a8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800a29e:	7b03      	ldrb	r3, [r0, #12]
 800a2a0:	b11b      	cbz	r3, 800a2aa <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800a2a2:	6800      	ldr	r0, [r0, #0]
 800a2a4:	e7fa      	b.n	800a29c <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a2a6:	bd10      	pop	{r4, pc}
 800a2a8:	4770      	bx	lr
{
 800a2aa:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800a2ac:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800a2ae:	f7ff ffd5 	bl	800a25c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800a2b2:	4620      	mov	r0, r4
    while( curElement != NULL )
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d0f6      	beq.n	800a2a6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800a2b8:	7b03      	ldrb	r3, [r0, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d0f6      	beq.n	800a2ac <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800a2be:	6800      	ldr	r0, [r0, #0]
 800a2c0:	e7f8      	b.n	800a2b4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800a2c2:	bf00      	nop
 800a2c4:	200010b4 	.word	0x200010b4

0800a2c8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a2c8:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a2ca:	4b08      	ldr	r3, [pc, #32]	; (800a2ec <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800a2cc:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a2ce:	e000      	b.n	800a2d2 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800a2d0:	462c      	mov	r4, r5
    while( curElement != NULL )
 800a2d2:	b14c      	cbz	r4, 800a2e8 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800a2d4:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800a2d6:	7920      	ldrb	r0, [r4, #4]
 800a2d8:	f7ff ff6f 	bl	800a1ba <IsSticky>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d0f7      	beq.n	800a2d0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f7ff ffbb 	bl	800a25c <LoRaMacCommandsRemoveCmd>
 800a2e6:	e7f3      	b.n	800a2d0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	200010b4 	.word	0x200010b4

0800a2f0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800a2f0:	b128      	cbz	r0, 800a2fe <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800a2f2:	4a04      	ldr	r2, [pc, #16]	; (800a304 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a2f4:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800a2f8:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a2fe:	2001      	movs	r0, #1
}
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	200010b4 	.word	0x200010b4

0800a308 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a30c:	4b16      	ldr	r3, [pc, #88]	; (800a368 <LoRaMacCommandsSerializeCmds+0x60>)
 800a30e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a310:	b32a      	cbz	r2, 800a35e <LoRaMacCommandsSerializeCmds+0x56>
 800a312:	4607      	mov	r7, r0
 800a314:	4688      	mov	r8, r1
 800a316:	4616      	mov	r6, r2
 800a318:	b319      	cbz	r1, 800a362 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800a31a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a31c:	b194      	cbz	r4, 800a344 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a31e:	1a7a      	subs	r2, r7, r1
 800a320:	68a3      	ldr	r3, [r4, #8]
 800a322:	3301      	adds	r3, #1
 800a324:	429a      	cmp	r2, r3
 800a326:	d30d      	bcc.n	800a344 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800a328:	1c4d      	adds	r5, r1, #1
 800a32a:	b2ed      	uxtb	r5, r5
 800a32c:	7923      	ldrb	r3, [r4, #4]
 800a32e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a330:	8922      	ldrh	r2, [r4, #8]
 800a332:	1d61      	adds	r1, r4, #5
 800a334:	1970      	adds	r0, r6, r5
 800a336:	f003 ffd8 	bl	800e2ea <memcpy1>
            itr += curElement->PayloadSize;
 800a33a:	68a3      	ldr	r3, [r4, #8]
 800a33c:	441d      	add	r5, r3
 800a33e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800a340:	6824      	ldr	r4, [r4, #0]
 800a342:	e7eb      	b.n	800a31c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800a344:	b12c      	cbz	r4, 800a352 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800a346:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a348:	4620      	mov	r0, r4
 800a34a:	f7ff ff87 	bl	800a25c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800a34e:	462c      	mov	r4, r5
 800a350:	e7f8      	b.n	800a344 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a352:	4640      	mov	r0, r8
 800a354:	f7ff ffcc 	bl	800a2f0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a358:	2000      	movs	r0, #0
}
 800a35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a35e:	2001      	movs	r0, #1
 800a360:	e7fb      	b.n	800a35a <LoRaMacCommandsSerializeCmds+0x52>
 800a362:	2001      	movs	r0, #1
 800a364:	e7f9      	b.n	800a35a <LoRaMacCommandsSerializeCmds+0x52>
 800a366:	bf00      	nop
 800a368:	200010b4 	.word	0x200010b4

0800a36c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800a36c:	4601      	mov	r1, r0
 800a36e:	b170      	cbz	r0, 800a38e <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800a370:	4b08      	ldr	r3, [pc, #32]	; (800a394 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a372:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800a374:	2200      	movs	r2, #0
 800a376:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a378:	b13b      	cbz	r3, 800a38a <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800a37a:	7b1a      	ldrb	r2, [r3, #12]
 800a37c:	b90a      	cbnz	r2, 800a382 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	e7fa      	b.n	800a378 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800a382:	2301      	movs	r3, #1
 800a384:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800a386:	2000      	movs	r0, #0
 800a388:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a38a:	2000      	movs	r0, #0
 800a38c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a38e:	2001      	movs	r0, #1
}
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	200010b4 	.word	0x200010b4

0800a398 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a398:	1e83      	subs	r3, r0, #2
 800a39a:	2b11      	cmp	r3, #17
 800a39c:	d80a      	bhi.n	800a3b4 <LoRaMacCommandsGetCmdSize+0x1c>
 800a39e:	e8df f003 	tbb	[pc, r3]
 800a3a2:	0b23      	.short	0x0b23
 800a3a4:	110f240d 	.word	0x110f240d
 800a3a8:	09171513 	.word	0x09171513
 800a3ac:	09091909 	.word	0x09091909
 800a3b0:	211f1d1b 	.word	0x211f1d1b
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800a3b8:	2005      	movs	r0, #5
            break;
 800a3ba:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800a3bc:	2002      	movs	r0, #2
            break;
 800a3be:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800a3c0:	2001      	movs	r0, #1
            break;
 800a3c2:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800a3c4:	2006      	movs	r0, #6
            break;
 800a3c6:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800a3c8:	2002      	movs	r0, #2
            break;
 800a3ca:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800a3cc:	2002      	movs	r0, #2
            break;
 800a3ce:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800a3d0:	2005      	movs	r0, #5
            break;
 800a3d2:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800a3d4:	2006      	movs	r0, #6
            break;
 800a3d6:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800a3d8:	2001      	movs	r0, #1
            break;
 800a3da:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800a3dc:	2005      	movs	r0, #5
            break;
 800a3de:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800a3e0:	2004      	movs	r0, #4
            break;
 800a3e2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800a3e4:	2004      	movs	r0, #4
            break;
 800a3e6:	4770      	bx	lr
            cidSize = 3;
 800a3e8:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a3ea:	4770      	bx	lr

0800a3ec <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a3ec:	4b03      	ldr	r3, [pc, #12]	; (800a3fc <IncreaseBufferPointer+0x10>)
 800a3ee:	4298      	cmp	r0, r3
 800a3f0:	d001      	beq.n	800a3f6 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800a3f2:	3004      	adds	r0, #4
 800a3f4:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a3f6:	4802      	ldr	r0, [pc, #8]	; (800a400 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	200011cc 	.word	0x200011cc
 800a400:	200011bc 	.word	0x200011bc

0800a404 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800a404:	b108      	cbz	r0, 800a40a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800a406:	2000      	movs	r0, #0
 800a408:	4770      	bx	lr
        return true;
 800a40a:	2001      	movs	r0, #1
}
 800a40c:	4770      	bx	lr

0800a40e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a40e:	2804      	cmp	r0, #4
 800a410:	d801      	bhi.n	800a416 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800a412:	2000      	movs	r0, #0
 800a414:	4770      	bx	lr
        return true;
 800a416:	2001      	movs	r0, #1
}
 800a418:	4770      	bx	lr
	...

0800a41c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	4606      	mov	r6, r0
 800a420:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a422:	4b0d      	ldr	r3, [pc, #52]	; (800a458 <GetElement+0x3c>)
 800a424:	f893 7020 	ldrb.w	r7, [r3, #32]
 800a428:	4638      	mov	r0, r7
 800a42a:	f7ff ffeb 	bl	800a404 <IsListEmpty>
 800a42e:	b970      	cbnz	r0, 800a44e <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a430:	2500      	movs	r5, #0
 800a432:	42af      	cmp	r7, r5
 800a434:	d909      	bls.n	800a44a <GetElement+0x2e>
    {
        if( element->Request == request )
 800a436:	7823      	ldrb	r3, [r4, #0]
 800a438:	42b3      	cmp	r3, r6
 800a43a:	d00a      	beq.n	800a452 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800a43c:	4620      	mov	r0, r4
 800a43e:	f7ff ffd5 	bl	800a3ec <IncreaseBufferPointer>
 800a442:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a444:	3501      	adds	r5, #1
 800a446:	b2ed      	uxtb	r5, r5
 800a448:	e7f3      	b.n	800a432 <GetElement+0x16>
    }

    return NULL;
 800a44a:	2000      	movs	r0, #0
}
 800a44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800a44e:	2000      	movs	r0, #0
 800a450:	e7fc      	b.n	800a44c <GetElement+0x30>
            return element;
 800a452:	4620      	mov	r0, r4
 800a454:	e7fa      	b.n	800a44c <GetElement+0x30>
 800a456:	bf00      	nop
 800a458:	200011b0 	.word	0x200011b0

0800a45c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a45c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a45e:	4c08      	ldr	r4, [pc, #32]	; (800a480 <LoRaMacConfirmQueueInit+0x24>)
 800a460:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a468:	f104 000c 	add.w	r0, r4, #12
 800a46c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a46e:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a470:	2214      	movs	r2, #20
 800a472:	21ff      	movs	r1, #255	; 0xff
 800a474:	f003 ff51 	bl	800e31a <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800a47e:	bd10      	pop	{r4, pc}
 800a480:	200011b0 	.word	0x200011b0

0800a484 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a488:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <LoRaMacConfirmQueueAdd+0x44>)
 800a48a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a48e:	f7ff ffbe 	bl	800a40e <IsListFull>
 800a492:	b9b8      	cbnz	r0, 800a4c4 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a494:	4c0c      	ldr	r4, [pc, #48]	; (800a4c8 <LoRaMacConfirmQueueAdd+0x44>)
 800a496:	68a3      	ldr	r3, [r4, #8]
 800a498:	782a      	ldrb	r2, [r5, #0]
 800a49a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a49c:	68a3      	ldr	r3, [r4, #8]
 800a49e:	786a      	ldrb	r2, [r5, #1]
 800a4a0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	78ea      	ldrb	r2, [r5, #3]
 800a4a6:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a4ae:	f894 3020 	ldrb.w	r3, [r4, #32]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a4b8:	68a0      	ldr	r0, [r4, #8]
 800a4ba:	f7ff ff97 	bl	800a3ec <IncreaseBufferPointer>
 800a4be:	60a0      	str	r0, [r4, #8]

    return true;
 800a4c0:	2001      	movs	r0, #1
}
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e7fc      	b.n	800a4c2 <LoRaMacConfirmQueueAdd+0x3e>
 800a4c8:	200011b0 	.word	0x200011b0

0800a4cc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800a4cc:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a4ce:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a4d0:	f893 4020 	ldrb.w	r4, [r3, #32]
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f7ff ff95 	bl	800a404 <IsListEmpty>
 800a4da:	b948      	cbnz	r0, 800a4f0 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a4dc:	4d05      	ldr	r5, [pc, #20]	; (800a4f4 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a4de:	3c01      	subs	r4, #1
 800a4e0:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a4e4:	6868      	ldr	r0, [r5, #4]
 800a4e6:	f7ff ff81 	bl	800a3ec <IncreaseBufferPointer>
 800a4ea:	6068      	str	r0, [r5, #4]

    return true;
 800a4ec:	2001      	movs	r0, #1
}
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	e7fc      	b.n	800a4ee <LoRaMacConfirmQueueRemoveFirst+0x22>
 800a4f4:	200011b0 	.word	0x200011b0

0800a4f8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a4fe:	4b08      	ldr	r3, [pc, #32]	; (800a520 <LoRaMacConfirmQueueSetStatus+0x28>)
 800a500:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a504:	f7ff ff7e 	bl	800a404 <IsListEmpty>
 800a508:	b948      	cbnz	r0, 800a51e <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a50a:	4b05      	ldr	r3, [pc, #20]	; (800a520 <LoRaMacConfirmQueueSetStatus+0x28>)
 800a50c:	689a      	ldr	r2, [r3, #8]
 800a50e:	6859      	ldr	r1, [r3, #4]
 800a510:	4620      	mov	r0, r4
 800a512:	f7ff ff83 	bl	800a41c <GetElement>
        if( element != NULL )
 800a516:	b110      	cbz	r0, 800a51e <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800a518:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800a51a:	2201      	movs	r2, #1
 800a51c:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	200011b0 	.word	0x200011b0

0800a524 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a524:	b510      	push	{r4, lr}
 800a526:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a528:	4b09      	ldr	r3, [pc, #36]	; (800a550 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800a52a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a52e:	f7ff ff69 	bl	800a404 <IsListEmpty>
 800a532:	b940      	cbnz	r0, 800a546 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a534:	4b06      	ldr	r3, [pc, #24]	; (800a550 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	6859      	ldr	r1, [r3, #4]
 800a53a:	4620      	mov	r0, r4
 800a53c:	f7ff ff6e 	bl	800a41c <GetElement>
        if( element != NULL )
 800a540:	b118      	cbz	r0, 800a54a <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800a542:	7840      	ldrb	r0, [r0, #1]
 800a544:	e000      	b.n	800a548 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a546:	2001      	movs	r0, #1
}
 800a548:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a54a:	2001      	movs	r0, #1
 800a54c:	e7fc      	b.n	800a548 <LoRaMacConfirmQueueGetStatus+0x24>
 800a54e:	bf00      	nop
 800a550:	200011b0 	.word	0x200011b0

0800a554 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800a55a:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a55c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a560:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a564:	f7ff ff4e 	bl	800a404 <IsListEmpty>
 800a568:	b150      	cbz	r0, 800a580 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800a56c:	2301      	movs	r3, #1
 800a56e:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800a570:	4620      	mov	r0, r4
 800a572:	f7ff ff3b 	bl	800a3ec <IncreaseBufferPointer>
 800a576:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	4283      	cmp	r3, r0
 800a57e:	d0f4      	beq.n	800a56a <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800a580:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a582:	78e3      	ldrb	r3, [r4, #3]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1f3      	bne.n	800a570 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800a588:	e7f0      	b.n	800a56c <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800a58a:	bf00      	nop
 800a58c:	200011b0 	.word	0x200011b0

0800a590 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800a590:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a592:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800a594:	689a      	ldr	r2, [r3, #8]
 800a596:	6859      	ldr	r1, [r3, #4]
 800a598:	f7ff ff40 	bl	800a41c <GetElement>
 800a59c:	b100      	cbz	r0, 800a5a0 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800a59e:	2001      	movs	r0, #1
    }
    return false;
}
 800a5a0:	bd08      	pop	{r3, pc}
 800a5a2:	bf00      	nop
 800a5a4:	200011b0 	.word	0x200011b0

0800a5a8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a5ae:	4b16      	ldr	r3, [pc, #88]	; (800a608 <LoRaMacConfirmQueueHandleCb+0x60>)
 800a5b0:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a5b4:	2400      	movs	r4, #0
 800a5b6:	e00d      	b.n	800a5d4 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a5b8:	781a      	ldrb	r2, [r3, #0]
 800a5ba:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a5be:	785a      	ldrb	r2, [r3, #1]
 800a5c0:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a5c4:	78db      	ldrb	r3, [r3, #3]
 800a5c6:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800a5ca:	f7ff ff7f 	bl	800a4cc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800a5ce:	b1a5      	cbz	r5, 800a5fa <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a5d0:	3401      	adds	r4, #1
 800a5d2:	b2e4      	uxtb	r4, r4
 800a5d4:	42bc      	cmp	r4, r7
 800a5d6:	d214      	bcs.n	800a602 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a5d8:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <LoRaMacConfirmQueueHandleCb+0x60>)
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	7812      	ldrb	r2, [r2, #0]
 800a5de:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	7852      	ldrb	r2, [r2, #1]
 800a5e4:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800a5ea:	2d00      	cmp	r5, #0
 800a5ec:	d0e4      	beq.n	800a5b8 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <LoRaMacConfirmQueueHandleCb+0x60>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4798      	blx	r3
 800a5f8:	e7e7      	b.n	800a5ca <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a5fa:	a801      	add	r0, sp, #4
 800a5fc:	f7ff ff42 	bl	800a484 <LoRaMacConfirmQueueAdd>
 800a600:	e7e6      	b.n	800a5d0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800a602:	b003      	add	sp, #12
 800a604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a606:	bf00      	nop
 800a608:	200011b0 	.word	0x200011b0

0800a60c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800a60c:	4b01      	ldr	r3, [pc, #4]	; (800a614 <LoRaMacConfirmQueueGetCnt+0x8>)
 800a60e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a612:	4770      	bx	lr
 800a614:	200011b0 	.word	0x200011b0

0800a618 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800a618:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a61a:	4b03      	ldr	r3, [pc, #12]	; (800a628 <LoRaMacConfirmQueueIsFull+0x10>)
 800a61c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a620:	f7ff fef5 	bl	800a40e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800a624:	bd08      	pop	{r3, pc}
 800a626:	bf00      	nop
 800a628:	200011b0 	.word	0x200011b0

0800a62c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800a62c:	b410      	push	{r4}
 800a62e:	9c01      	ldr	r4, [sp, #4]
 800a630:	9902      	ldr	r1, [sp, #8]
 800a632:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800a634:	b1da      	cbz	r2, 800a66e <PrepareB0+0x42>
 800a636:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800a638:	2049      	movs	r0, #73	; 0x49
 800a63a:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800a63c:	2000      	movs	r0, #0
 800a63e:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800a640:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800a642:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800a644:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800a646:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800a648:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a64a:	0a23      	lsrs	r3, r4, #8
 800a64c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a64e:	0c23      	lsrs	r3, r4, #16
 800a650:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a652:	0e24      	lsrs	r4, r4, #24
 800a654:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800a656:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a658:	0a0b      	lsrs	r3, r1, #8
 800a65a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a65c:	0c0b      	lsrs	r3, r1, #16
 800a65e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a660:	0e09      	lsrs	r1, r1, #24
 800a662:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800a664:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800a666:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a66a:	bc10      	pop	{r4}
 800a66c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a66e:	200a      	movs	r0, #10
 800a670:	e7fb      	b.n	800a66a <PrepareB0+0x3e>
	...

0800a674 <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800a674:	2300      	movs	r3, #0
 800a676:	2b01      	cmp	r3, #1
 800a678:	d80e      	bhi.n	800a698 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800a67a:	469c      	mov	ip, r3
 800a67c:	4a07      	ldr	r2, [pc, #28]	; (800a69c <GetKeyAddrItem+0x28>)
 800a67e:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800a682:	4282      	cmp	r2, r0
 800a684:	d002      	beq.n	800a68c <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800a686:	3301      	adds	r3, #1
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	e7f4      	b.n	800a676 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800a68c:	4b03      	ldr	r3, [pc, #12]	; (800a69c <GetKeyAddrItem+0x28>)
 800a68e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800a692:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800a694:	2000      	movs	r0, #0
 800a696:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800a698:	200c      	movs	r0, #12
}
 800a69a:	4770      	bx	lr
 800a69c:	200000c4 	.word	0x200000c4

0800a6a0 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	b309      	cbz	r1, 800a6e8 <GetLastFcntDown+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800a6a4:	3801      	subs	r0, #1
 800a6a6:	2803      	cmp	r0, #3
 800a6a8:	d820      	bhi.n	800a6ec <GetLastFcntDown+0x4c>
 800a6aa:	e8df f000 	tbb	[pc, r0]
 800a6ae:	0902      	.short	0x0902
 800a6b0:	1710      	.short	0x1710
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a6b2:	4a0f      	ldr	r2, [pc, #60]	; (800a6f0 <GetLastFcntDown+0x50>)
 800a6b4:	6812      	ldr	r2, [r2, #0]
 800a6b6:	6911      	ldr	r1, [r2, #16]
 800a6b8:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800a6ba:	6211      	str	r1, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800a6bc:	2000      	movs	r0, #0
            break;
 800a6be:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a6c0:	4a0b      	ldr	r2, [pc, #44]	; (800a6f0 <GetLastFcntDown+0x50>)
 800a6c2:	6812      	ldr	r2, [r2, #0]
 800a6c4:	6951      	ldr	r1, [r2, #20]
 800a6c6:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a6c8:	6211      	str	r1, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a6ca:	2000      	movs	r0, #0
            break;
 800a6cc:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a6ce:	4a08      	ldr	r2, [pc, #32]	; (800a6f0 <GetLastFcntDown+0x50>)
 800a6d0:	6812      	ldr	r2, [r2, #0]
 800a6d2:	6991      	ldr	r1, [r2, #24]
 800a6d4:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a6d6:	6211      	str	r1, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a6d8:	2000      	movs	r0, #0
            break;
 800a6da:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a6dc:	4a04      	ldr	r2, [pc, #16]	; (800a6f0 <GetLastFcntDown+0x50>)
 800a6de:	6812      	ldr	r2, [r2, #0]
 800a6e0:	69d2      	ldr	r2, [r2, #28]
 800a6e2:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800a6e4:	2000      	movs	r0, #0
            break;
 800a6e6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a6e8:	200a      	movs	r0, #10
 800a6ea:	4770      	bx	lr
    switch( fCntID )
 800a6ec:	2005      	movs	r0, #5
}
 800a6ee:	4770      	bx	lr
 800a6f0:	200011d4 	.word	0x200011d4

0800a6f4 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800a6fe:	a901      	add	r1, sp, #4
 800a700:	f7ff ffce 	bl	800a6a0 <GetLastFcntDown>
 800a704:	b948      	cbnz	r0, 800a71a <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800a706:	9b01      	ldr	r3, [sp, #4]
 800a708:	42a3      	cmp	r3, r4
 800a70a:	d309      	bcc.n	800a720 <CheckFCntDown+0x2c>
 800a70c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a710:	d001      	beq.n	800a716 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800a712:	2000      	movs	r0, #0
 800a714:	e002      	b.n	800a71c <CheckFCntDown+0x28>
        return true;
 800a716:	2001      	movs	r0, #1
 800a718:	e000      	b.n	800a71c <CheckFCntDown+0x28>
        return false;
 800a71a:	2000      	movs	r0, #0
    }
}
 800a71c:	b002      	add	sp, #8
 800a71e:	bd10      	pop	{r4, pc}
        return true;
 800a720:	2001      	movs	r0, #1
 800a722:	e7fb      	b.n	800a71c <CheckFCntDown+0x28>

0800a724 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800a724:	3801      	subs	r0, #1
 800a726:	2803      	cmp	r0, #3
 800a728:	d812      	bhi.n	800a750 <UpdateFCntDown+0x2c>
 800a72a:	e8df f000 	tbb	[pc, r0]
 800a72e:	0602      	.short	0x0602
 800a730:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800a732:	4b08      	ldr	r3, [pc, #32]	; (800a754 <UpdateFCntDown+0x30>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6119      	str	r1, [r3, #16]
            break;
 800a738:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800a73a:	4b06      	ldr	r3, [pc, #24]	; (800a754 <UpdateFCntDown+0x30>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6159      	str	r1, [r3, #20]
            break;
 800a740:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800a742:	4b04      	ldr	r3, [pc, #16]	; (800a754 <UpdateFCntDown+0x30>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6199      	str	r1, [r3, #24]
            break;
 800a748:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800a74a:	4b02      	ldr	r3, [pc, #8]	; (800a754 <UpdateFCntDown+0x30>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	200011d4 	.word	0x200011d4

0800a758 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800a758:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <ResetFCnts+0x2c>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	2300      	movs	r3, #0
 800a75e:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a764:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a766:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a768:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a76a:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dd00      	ble.n	800a772 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800a770:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800a772:	1d99      	adds	r1, r3, #6
 800a774:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a77c:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a77e:	3301      	adds	r3, #1
 800a780:	e7f4      	b.n	800a76c <ResetFCnts+0x14>
 800a782:	bf00      	nop
 800a784:	200011d4 	.word	0x200011d4

0800a788 <ComputeCmacB0>:
{
 800a788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78c:	b088      	sub	sp, #32
 800a78e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800a790:	b1f0      	cbz	r0, 800a7d0 <ComputeCmacB0+0x48>
 800a792:	460c      	mov	r4, r1
 800a794:	4615      	mov	r5, r2
 800a796:	461a      	mov	r2, r3
 800a798:	4680      	mov	r8, r0
 800a79a:	b1de      	cbz	r6, 800a7d4 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a79c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a7a0:	d81a      	bhi.n	800a7d8 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800a7a2:	af04      	add	r7, sp, #16
 800a7a4:	9702      	str	r7, [sp, #8]
 800a7a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f7ff ff39 	bl	800a62c <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800a7ba:	9600      	str	r6, [sp, #0]
 800a7bc:	462b      	mov	r3, r5
 800a7be:	4622      	mov	r2, r4
 800a7c0:	4641      	mov	r1, r8
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f003 fc2a 	bl	800e01c <SecureElementComputeAesCmac>
 800a7c8:	b940      	cbnz	r0, 800a7dc <ComputeCmacB0+0x54>
}
 800a7ca:	b008      	add	sp, #32
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a7d0:	200a      	movs	r0, #10
 800a7d2:	e7fa      	b.n	800a7ca <ComputeCmacB0+0x42>
 800a7d4:	200a      	movs	r0, #10
 800a7d6:	e7f8      	b.n	800a7ca <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a7d8:	200e      	movs	r0, #14
 800a7da:	e7f6      	b.n	800a7ca <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a7dc:	200f      	movs	r0, #15
 800a7de:	e7f4      	b.n	800a7ca <ComputeCmacB0+0x42>

0800a7e0 <DeriveSessionKey10x>:
{
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800a7e4:	2400      	movs	r4, #0
 800a7e6:	9400      	str	r4, [sp, #0]
 800a7e8:	9401      	str	r4, [sp, #4]
 800a7ea:	9402      	str	r4, [sp, #8]
 800a7ec:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800a7ee:	2802      	cmp	r0, #2
 800a7f0:	d003      	beq.n	800a7fa <DeriveSessionKey10x+0x1a>
 800a7f2:	2803      	cmp	r0, #3
 800a7f4:	d025      	beq.n	800a842 <DeriveSessionKey10x+0x62>
 800a7f6:	200b      	movs	r0, #11
 800a7f8:	e021      	b.n	800a83e <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800a7fa:	2401      	movs	r4, #1
 800a7fc:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800a800:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a804:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a808:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a80c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800a810:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800a814:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800a818:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a81c:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a820:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800a824:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800a828:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a82c:	0a1b      	lsrs	r3, r3, #8
 800a82e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a832:	4602      	mov	r2, r0
 800a834:	2101      	movs	r1, #1
 800a836:	4668      	mov	r0, sp
 800a838:	f003 fc90 	bl	800e15c <SecureElementDeriveAndStoreKey>
 800a83c:	b928      	cbnz	r0, 800a84a <DeriveSessionKey10x+0x6a>
}
 800a83e:	b004      	add	sp, #16
 800a840:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800a842:	2402      	movs	r4, #2
 800a844:	f88d 4000 	strb.w	r4, [sp]
            break;
 800a848:	e7da      	b.n	800a800 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a84a:	200f      	movs	r0, #15
 800a84c:	e7f7      	b.n	800a83e <DeriveSessionKey10x+0x5e>

0800a84e <PayloadEncrypt>:
{
 800a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a852:	b088      	sub	sp, #32
 800a854:	4690      	mov	r8, r2
 800a856:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800a858:	2800      	cmp	r0, #0
 800a85a:	d052      	beq.n	800a902 <PayloadEncrypt+0xb4>
 800a85c:	460d      	mov	r5, r1
 800a85e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800a860:	2600      	movs	r6, #0
 800a862:	9604      	str	r6, [sp, #16]
 800a864:	9605      	str	r6, [sp, #20]
 800a866:	9606      	str	r6, [sp, #24]
 800a868:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800a86a:	9600      	str	r6, [sp, #0]
 800a86c:	9601      	str	r6, [sp, #4]
 800a86e:	9602      	str	r6, [sp, #8]
 800a870:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800a872:	2701      	movs	r7, #1
 800a874:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800a878:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800a87c:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800a880:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800a884:	0a19      	lsrs	r1, r3, #8
 800a886:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a88a:	0c19      	lsrs	r1, r3, #16
 800a88c:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a890:	0e1b      	lsrs	r3, r3, #24
 800a892:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800a896:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800a89a:	0a13      	lsrs	r3, r2, #8
 800a89c:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a8a0:	0c13      	lsrs	r3, r2, #16
 800a8a2:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a8a6:	0e12      	lsrs	r2, r2, #24
 800a8a8:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800a8ac:	e014      	b.n	800a8d8 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a8ae:	18f2      	adds	r2, r6, r3
 800a8b0:	5ca0      	ldrb	r0, [r4, r2]
 800a8b2:	f103 0120 	add.w	r1, r3, #32
 800a8b6:	4469      	add	r1, sp
 800a8b8:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800a8bc:	4048      	eors	r0, r1
 800a8be:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	2d10      	cmp	r5, #16
 800a8c8:	bfa8      	it	ge
 800a8ca:	2210      	movge	r2, #16
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	dbee      	blt.n	800a8ae <PayloadEncrypt+0x60>
        size -= 16;
 800a8d0:	3d10      	subs	r5, #16
 800a8d2:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800a8d4:	3610      	adds	r6, #16
 800a8d6:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800a8d8:	2d00      	cmp	r5, #0
 800a8da:	dd0e      	ble.n	800a8fa <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800a8dc:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800a8e0:	3701      	adds	r7, #1
 800a8e2:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a8e4:	ab04      	add	r3, sp, #16
 800a8e6:	4642      	mov	r2, r8
 800a8e8:	2110      	movs	r1, #16
 800a8ea:	4668      	mov	r0, sp
 800a8ec:	f003 fbbb 	bl	800e066 <SecureElementAesEncrypt>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d0e6      	beq.n	800a8c4 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a8f6:	200f      	movs	r0, #15
 800a8f8:	e000      	b.n	800a8fc <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800a8fa:	2000      	movs	r0, #0
}
 800a8fc:	b008      	add	sp, #32
 800a8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a902:	200a      	movs	r0, #10
 800a904:	e7fa      	b.n	800a8fc <PayloadEncrypt+0xae>

0800a906 <VerifyCmacB0>:
    if( msg == 0 )
 800a906:	b370      	cbz	r0, 800a966 <VerifyCmacB0+0x60>
{
 800a908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a90c:	b0c8      	sub	sp, #288	; 0x120
 800a90e:	460c      	mov	r4, r1
 800a910:	4615      	mov	r5, r2
 800a912:	461e      	mov	r6, r3
 800a914:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a916:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a91a:	d826      	bhi.n	800a96a <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800a91c:	af04      	add	r7, sp, #16
 800a91e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a922:	2100      	movs	r1, #0
 800a924:	4638      	mov	r0, r7
 800a926:	f003 fcf8 	bl	800e31a <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800a92a:	9702      	str	r7, [sp, #8]
 800a92c:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800a92e:	9301      	str	r3, [sp, #4]
 800a930:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800a938:	4632      	mov	r2, r6
 800a93a:	4629      	mov	r1, r5
 800a93c:	4620      	mov	r0, r4
 800a93e:	f7ff fe75 	bl	800a62c <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a942:	4622      	mov	r2, r4
 800a944:	4641      	mov	r1, r8
 800a946:	a808      	add	r0, sp, #32
 800a948:	f003 fccf 	bl	800e2ea <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800a94c:	f104 0110 	add.w	r1, r4, #16
 800a950:	462b      	mov	r3, r5
 800a952:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800a954:	b289      	uxth	r1, r1
 800a956:	4638      	mov	r0, r7
 800a958:	f003 fb6f 	bl	800e03a <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800a95c:	b130      	cbz	r0, 800a96c <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800a95e:	2801      	cmp	r0, #1
 800a960:	d004      	beq.n	800a96c <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a962:	200f      	movs	r0, #15
 800a964:	e002      	b.n	800a96c <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a966:	200a      	movs	r0, #10
}
 800a968:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a96a:	200e      	movs	r0, #14
}
 800a96c:	b048      	add	sp, #288	; 0x120
 800a96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a974 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800a974:	b188      	cbz	r0, 800a99a <LoRaMacCryptoInit+0x26>
{
 800a976:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800a978:	4c09      	ldr	r4, [pc, #36]	; (800a9a0 <LoRaMacCryptoInit+0x2c>)
 800a97a:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800a97c:	2228      	movs	r2, #40	; 0x28
 800a97e:	2100      	movs	r1, #0
 800a980:	f003 fccb 	bl	800e31a <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	2201      	movs	r2, #1
 800a988:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800a98a:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800a98c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800a98e:	2400      	movs	r4, #0
 800a990:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800a992:	f7ff fee1 	bl	800a758 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800a996:	4620      	mov	r0, r4
}
 800a998:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800a99a:	2009      	movs	r0, #9
}
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	200011d4 	.word	0x200011d4

0800a9a4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800a9a4:	4b02      	ldr	r3, [pc, #8]	; (800a9b0 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	200011d4 	.word	0x200011d4

0800a9b4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800a9b4:	b130      	cbz	r0, 800a9c4 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800a9b6:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <LoRaMacCryptoGetFCntUp+0x14>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a9c4:	200a      	movs	r0, #10
}
 800a9c6:	4770      	bx	lr
 800a9c8:	200011d4 	.word	0x200011d4

0800a9cc <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800a9d6:	b363      	cbz	r3, 800aa32 <LoRaMacCryptoGetFCntDown+0x66>
 800a9d8:	460d      	mov	r5, r1
 800a9da:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800a9dc:	a901      	add	r1, sp, #4
 800a9de:	f7ff fe5f 	bl	800a6a0 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a9e2:	b9b8      	cbnz	r0, 800aa14 <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800a9e4:	9b01      	ldr	r3, [sp, #4]
 800a9e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ea:	d015      	beq.n	800aa18 <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	dd13      	ble.n	800aa1c <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800a9f4:	4413      	add	r3, r2
 800a9f6:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800a9f8:	4b10      	ldr	r3, [pc, #64]	; (800aa3c <LoRaMacCryptoGetFCntDown+0x70>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	789a      	ldrb	r2, [r3, #2]
 800a9fe:	b94a      	cbnz	r2, 800aa14 <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800aa00:	6833      	ldr	r3, [r6, #0]
 800aa02:	9901      	ldr	r1, [sp, #4]
 800aa04:	1a5b      	subs	r3, r3, r1
 800aa06:	eb61 0101 	sbc.w	r1, r1, r1
 800aa0a:	42ab      	cmp	r3, r5
 800aa0c:	f171 0100 	sbcs.w	r1, r1, #0
 800aa10:	da11      	bge.n	800aa36 <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800aa12:	4610      	mov	r0, r2
}
 800aa14:	b002      	add	sp, #8
 800aa16:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800aa18:	6034      	str	r4, [r6, #0]
 800aa1a:	e7ed      	b.n	800a9f8 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800aa1c:	b132      	cbz	r2, 800aa2c <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800aa1e:	0c1b      	lsrs	r3, r3, #16
 800aa20:	041b      	lsls	r3, r3, #16
 800aa22:	4423      	add	r3, r4
 800aa24:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800aa28:	6033      	str	r3, [r6, #0]
 800aa2a:	e7e5      	b.n	800a9f8 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800aa2c:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800aa2e:	2007      	movs	r0, #7
 800aa30:	e7f0      	b.n	800aa14 <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aa32:	200a      	movs	r0, #10
 800aa34:	e7ee      	b.n	800aa14 <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800aa36:	2008      	movs	r0, #8
 800aa38:	e7ec      	b.n	800aa14 <LoRaMacCryptoGetFCntDown+0x48>
 800aa3a:	bf00      	nop
 800aa3c:	200011d4 	.word	0x200011d4

0800aa40 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800aa40:	4601      	mov	r1, r0
 800aa42:	b908      	cbnz	r0, 800aa48 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aa44:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800aa46:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800aa48:	2300      	movs	r3, #0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	dd01      	ble.n	800aa52 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800aa4e:	2000      	movs	r0, #0
 800aa50:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800aa52:	4a06      	ldr	r2, [pc, #24]	; (800aa6c <LoRaMacCryptoSetMulticastReference+0x2c>)
 800aa54:	6812      	ldr	r2, [r2, #0]
 800aa56:	202c      	movs	r0, #44	; 0x2c
 800aa58:	fb00 1003 	mla	r0, r0, r3, r1
 800aa5c:	f103 0c06 	add.w	ip, r3, #6
 800aa60:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800aa64:	3204      	adds	r2, #4
 800aa66:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800aa68:	3301      	adds	r3, #1
 800aa6a:	e7ee      	b.n	800aa4a <LoRaMacCryptoSetMulticastReference+0xa>
 800aa6c:	200011d4 	.word	0x200011d4

0800aa70 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800aa70:	b300      	cbz	r0, 800aab4 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800aa72:	b510      	push	{r4, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800aa7c:	a803      	add	r0, sp, #12
 800aa7e:	f003 fbd1 	bl	800e224 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800aa82:	4b10      	ldr	r3, [pc, #64]	; (800aac4 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800aa8a:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800aa8c:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 fa2f 	bl	800aef2 <LoRaMacSerializerJoinRequest>
 800aa94:	b980      	cbnz	r0, 800aab8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800aa96:	4623      	mov	r3, r4
 800aa98:	f853 1b18 	ldr.w	r1, [r3], #24
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	2213      	movs	r2, #19
 800aaa2:	f003 fabb 	bl	800e01c <SecureElementComputeAesCmac>
 800aaa6:	b950      	cbnz	r0, 800aabe <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fa22 	bl	800aef2 <LoRaMacSerializerJoinRequest>
 800aaae:	b120      	cbz	r0, 800aaba <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800aab0:	2011      	movs	r0, #17
 800aab2:	e002      	b.n	800aaba <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aab4:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800aab6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800aab8:	2011      	movs	r0, #17
}
 800aaba:	b004      	add	sp, #16
 800aabc:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aabe:	200f      	movs	r0, #15
 800aac0:	e7fb      	b.n	800aaba <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800aac2:	bf00      	nop
 800aac4:	200011d4 	.word	0x200011d4

0800aac8 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d036      	beq.n	800ab3a <LoRaMacCryptoSecureMessage+0x72>
{
 800aacc:	b530      	push	{r4, r5, lr}
 800aace:	b085      	sub	sp, #20
 800aad0:	4604      	mov	r4, r0
 800aad2:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800aad4:	4b1d      	ldr	r3, [pc, #116]	; (800ab4c <LoRaMacCryptoSecureMessage+0x84>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	4283      	cmp	r3, r0
 800aadc:	d82f      	bhi.n	800ab3e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800aade:	f895 2020 	ldrb.w	r2, [r5, #32]
 800aae2:	b342      	cbz	r2, 800ab36 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800aae4:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800aae6:	42a3      	cmp	r3, r4
 800aae8:	d209      	bcs.n	800aafe <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800aaea:	9401      	str	r4, [sp, #4]
 800aaec:	2300      	movs	r3, #0
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	68ab      	ldr	r3, [r5, #8]
 800aaf2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800aaf6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800aaf8:	f7ff fea9 	bl	800a84e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aafc:	bb10      	cbnz	r0, 800ab44 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800aafe:	4628      	mov	r0, r5
 800ab00:	f000 fa2d 	bl	800af5e <LoRaMacSerializerData>
 800ab04:	b9e8      	cbnz	r0, 800ab42 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ab06:	7929      	ldrb	r1, [r5, #4]
 800ab08:	3904      	subs	r1, #4
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	f853 0b2c 	ldr.w	r0, [r3], #44
 800ab10:	9303      	str	r3, [sp, #12]
 800ab12:	9402      	str	r4, [sp, #8]
 800ab14:	68ab      	ldr	r3, [r5, #8]
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	b289      	uxth	r1, r1
 800ab20:	f7ff fe32 	bl	800a788 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ab24:	b970      	cbnz	r0, 800ab44 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab26:	4628      	mov	r0, r5
 800ab28:	f000 fa19 	bl	800af5e <LoRaMacSerializerData>
 800ab2c:	b960      	cbnz	r0, 800ab48 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ab2e:	4b07      	ldr	r3, [pc, #28]	; (800ab4c <LoRaMacCryptoSecureMessage+0x84>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800ab34:	e006      	b.n	800ab44 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800ab36:	2202      	movs	r2, #2
 800ab38:	e7d5      	b.n	800aae6 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab3a:	200a      	movs	r0, #10
}
 800ab3c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ab3e:	2006      	movs	r0, #6
 800ab40:	e000      	b.n	800ab44 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ab42:	2011      	movs	r0, #17
}
 800ab44:	b005      	add	sp, #20
 800ab46:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ab48:	2011      	movs	r0, #17
 800ab4a:	e7fb      	b.n	800ab44 <LoRaMacCryptoSecureMessage+0x7c>
 800ab4c:	200011d4 	.word	0x200011d4

0800ab50 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800ab50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab54:	b087      	sub	sp, #28
 800ab56:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800ab58:	2e00      	cmp	r6, #0
 800ab5a:	d049      	beq.n	800abf0 <LoRaMacCryptoUnsecureMessage+0xa0>
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	4688      	mov	r8, r1
 800ab60:	4617      	mov	r7, r2
 800ab62:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7ff fdc4 	bl	800a6f4 <CheckFCntDown>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d041      	beq.n	800abf4 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ab70:	4630      	mov	r0, r6
 800ab72:	f000 f95f 	bl	800ae34 <LoRaMacParserData>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d141      	bne.n	800abfe <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800ab7a:	a905      	add	r1, sp, #20
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f7ff fd79 	bl	800a674 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ab82:	4605      	mov	r5, r0
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d136      	bne.n	800abf6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800ab88:	9b05      	ldr	r3, [sp, #20]
 800ab8a:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800ab8e:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800ab90:	68b3      	ldr	r3, [r6, #8]
 800ab92:	4543      	cmp	r3, r8
 800ab94:	d135      	bne.n	800ac02 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ab96:	7b33      	ldrb	r3, [r6, #12]
 800ab98:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ab9c:	491a      	ldr	r1, [pc, #104]	; (800ac08 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800ab9e:	6809      	ldr	r1, [r1, #0]
 800aba0:	7889      	ldrb	r1, [r1, #2]
 800aba2:	b901      	cbnz	r1, 800aba6 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800aba4:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800aba6:	7931      	ldrb	r1, [r6, #4]
 800aba8:	3904      	subs	r1, #4
 800abaa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800abac:	9003      	str	r0, [sp, #12]
 800abae:	9402      	str	r4, [sp, #8]
 800abb0:	f8cd 8004 	str.w	r8, [sp, #4]
 800abb4:	2001      	movs	r0, #1
 800abb6:	9000      	str	r0, [sp, #0]
 800abb8:	b289      	uxth	r1, r1
 800abba:	6830      	ldr	r0, [r6, #0]
 800abbc:	f7ff fea3 	bl	800a906 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800abc0:	4605      	mov	r5, r0
 800abc2:	b9c0      	cbnz	r0, 800abf6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800abc4:	f896 3020 	ldrb.w	r3, [r6, #32]
 800abc8:	b90b      	cbnz	r3, 800abce <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800abca:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800abce:	9401      	str	r4, [sp, #4]
 800abd0:	2301      	movs	r3, #1
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	4643      	mov	r3, r8
 800abd6:	464a      	mov	r2, r9
 800abd8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800abdc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800abde:	f7ff fe36 	bl	800a84e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800abe2:	4605      	mov	r5, r0
 800abe4:	b938      	cbnz	r0, 800abf6 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800abe6:	4621      	mov	r1, r4
 800abe8:	4638      	mov	r0, r7
 800abea:	f7ff fd9b 	bl	800a724 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800abee:	e002      	b.n	800abf6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800abf0:	250a      	movs	r5, #10
 800abf2:	e000      	b.n	800abf6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800abf4:	2506      	movs	r5, #6
}
 800abf6:	4628      	mov	r0, r5
 800abf8:	b007      	add	sp, #28
 800abfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800abfe:	2510      	movs	r5, #16
 800ac00:	e7f9      	b.n	800abf6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800ac02:	2502      	movs	r5, #2
 800ac04:	e7f7      	b.n	800abf6 <LoRaMacCryptoUnsecureMessage+0xa6>
 800ac06:	bf00      	nop
 800ac08:	200011d4 	.word	0x200011d4

0800ac0c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800ac0c:	b9b1      	cbnz	r1, 800ac3c <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800ac0e:	b500      	push	{lr}
 800ac10:	b085      	sub	sp, #20
 800ac12:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800ac14:	2300      	movs	r3, #0
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	9302      	str	r3, [sp, #8]
 800ac1c:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800ac1e:	2801      	cmp	r0, #1
 800ac20:	d008      	beq.n	800ac34 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ac22:	2204      	movs	r2, #4
 800ac24:	4661      	mov	r1, ip
 800ac26:	4668      	mov	r0, sp
 800ac28:	f003 fa98 	bl	800e15c <SecureElementDeriveAndStoreKey>
 800ac2c:	b940      	cbnz	r0, 800ac40 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ac2e:	b005      	add	sp, #20
 800ac30:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800ac34:	2320      	movs	r3, #32
 800ac36:	f88d 3000 	strb.w	r3, [sp]
 800ac3a:	e7f2      	b.n	800ac22 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ac3c:	200b      	movs	r0, #11
}
 800ac3e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac40:	200f      	movs	r0, #15
 800ac42:	e7f4      	b.n	800ac2e <LoRaMacCryptoDeriveMcRootKey+0x22>

0800ac44 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800ac44:	2804      	cmp	r0, #4
 800ac46:	d001      	beq.n	800ac4c <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ac48:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ac4a:	4770      	bx	lr
{
 800ac4c:	b500      	push	{lr}
 800ac4e:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800ac50:	2300      	movs	r3, #0
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	9302      	str	r3, [sp, #8]
 800ac58:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ac5a:	227f      	movs	r2, #127	; 0x7f
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	4668      	mov	r0, sp
 800ac60:	f003 fa7c 	bl	800e15c <SecureElementDeriveAndStoreKey>
 800ac64:	b910      	cbnz	r0, 800ac6c <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800ac66:	b005      	add	sp, #20
 800ac68:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac6c:	200f      	movs	r0, #15
 800ac6e:	e7fa      	b.n	800ac66 <LoRaMacCryptoDeriveMcKEKey+0x22>

0800ac70 <LoRaMacCryptoSetKey>:
{
 800ac70:	b510      	push	{r4, lr}
 800ac72:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ac74:	f003 fa30 	bl	800e0d8 <SecureElementSetKey>
 800ac78:	b978      	cbnz	r0, 800ac9a <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800ac7a:	b104      	cbz	r4, 800ac7e <LoRaMacCryptoSetKey+0xe>
}
 800ac7c:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ac7e:	4b09      	ldr	r3, [pc, #36]	; (800aca4 <LoRaMacCryptoSetKey+0x34>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4621      	mov	r1, r4
 800ac84:	7898      	ldrb	r0, [r3, #2]
 800ac86:	f7ff ffc1 	bl	800ac0c <LoRaMacCryptoDeriveMcRootKey>
 800ac8a:	b940      	cbnz	r0, 800ac9e <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ac8c:	2004      	movs	r0, #4
 800ac8e:	f7ff ffd9 	bl	800ac44 <LoRaMacCryptoDeriveMcKEKey>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d0f2      	beq.n	800ac7c <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac96:	200f      	movs	r0, #15
 800ac98:	e7f0      	b.n	800ac7c <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac9a:	200f      	movs	r0, #15
 800ac9c:	e7ee      	b.n	800ac7c <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac9e:	200f      	movs	r0, #15
 800aca0:	e7ec      	b.n	800ac7c <LoRaMacCryptoSetKey+0xc>
 800aca2:	bf00      	nop
 800aca4:	200011d4 	.word	0x200011d4

0800aca8 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800aca8:	2a00      	cmp	r2, #0
 800acaa:	d064      	beq.n	800ad76 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800acac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acae:	b08f      	sub	sp, #60	; 0x3c
 800acb0:	4607      	mov	r7, r0
 800acb2:	460d      	mov	r5, r1
 800acb4:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800acb6:	2900      	cmp	r1, #0
 800acb8:	d05f      	beq.n	800ad7a <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800acba:	2600      	movs	r6, #0
 800acbc:	9605      	str	r6, [sp, #20]
 800acbe:	221d      	movs	r2, #29
 800acc0:	4631      	mov	r1, r6
 800acc2:	a806      	add	r0, sp, #24
 800acc4:	f006 fa4c 	bl	8011160 <memset>
    uint8_t versionMinor         = 0;
 800acc8:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800accc:	4b2f      	ldr	r3, [pc, #188]	; (800ad8c <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800acd2:	f10d 0313 	add.w	r3, sp, #19
 800acd6:	9302      	str	r3, [sp, #8]
 800acd8:	ab05      	add	r3, sp, #20
 800acda:	9301      	str	r3, [sp, #4]
 800acdc:	7923      	ldrb	r3, [r4, #4]
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	4632      	mov	r2, r6
 800ace4:	4629      	mov	r1, r5
 800ace6:	4638      	mov	r0, r7
 800ace8:	f003 fa58 	bl	800e19c <SecureElementProcessJoinAccept>
 800acec:	2800      	cmp	r0, #0
 800acee:	d146      	bne.n	800ad7e <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800acf0:	7922      	ldrb	r2, [r4, #4]
 800acf2:	a905      	add	r1, sp, #20
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	f003 faf8 	bl	800e2ea <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f848 	bl	800ad90 <LoRaMacParserJoinAccept>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d13f      	bne.n	800ad84 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800ad04:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ad06:	79e3      	ldrb	r3, [r4, #7]
 800ad08:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ad0c:	7a23      	ldrb	r3, [r4, #8]
 800ad0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800ad12:	4b1e      	ldr	r3, [pc, #120]	; (800ad8c <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	689a      	ldr	r2, [r3, #8]
 800ad18:	42aa      	cmp	r2, r5
 800ad1a:	d035      	beq.n	800ad88 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ad1c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ad1e:	2100      	movs	r1, #0
 800ad20:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800ad24:	f7ff ff72 	bl	800ac0c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad28:	bb50      	cbnz	r0, 800ad80 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800ad2a:	2004      	movs	r0, #4
 800ad2c:	f7ff ff8a 	bl	800ac44 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad30:	bb30      	cbnz	r0, 800ad80 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800ad32:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ad34:	7aa2      	ldrb	r2, [r4, #10]
 800ad36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ad3a:	7ae2      	ldrb	r2, [r4, #11]
 800ad3c:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ad40:	4633      	mov	r3, r6
 800ad42:	4622      	mov	r2, r4
 800ad44:	4629      	mov	r1, r5
 800ad46:	2003      	movs	r0, #3
 800ad48:	f7ff fd4a 	bl	800a7e0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad4c:	b9c0      	cbnz	r0, 800ad80 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800ad4e:	4633      	mov	r3, r6
 800ad50:	4622      	mov	r2, r4
 800ad52:	4629      	mov	r1, r5
 800ad54:	2002      	movs	r0, #2
 800ad56:	f7ff fd43 	bl	800a7e0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad5a:	b988      	cbnz	r0, 800ad80 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ad5c:	4b0b      	ldr	r3, [pc, #44]	; (800ad8c <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800ad64:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800ad66:	2200      	movs	r2, #0
 800ad68:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ad6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad6e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ad70:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ad72:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800ad74:	e004      	b.n	800ad80 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ad76:	200a      	movs	r0, #10
}
 800ad78:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ad7a:	200a      	movs	r0, #10
 800ad7c:	e000      	b.n	800ad80 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ad7e:	200f      	movs	r0, #15
}
 800ad80:	b00f      	add	sp, #60	; 0x3c
 800ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ad84:	2010      	movs	r0, #16
 800ad86:	e7fb      	b.n	800ad80 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ad88:	2003      	movs	r0, #3
 800ad8a:	e7f9      	b.n	800ad80 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800ad8c:	200011d4 	.word	0x200011d4

0800ad90 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d049      	beq.n	800ae28 <LoRaMacParserJoinAccept+0x98>
{
 800ad94:	b510      	push	{r4, lr}
 800ad96:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ad98:	6801      	ldr	r1, [r0, #0]
 800ad9a:	2900      	cmp	r1, #0
 800ad9c:	d046      	beq.n	800ae2c <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ad9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ada2:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ada4:	2203      	movs	r2, #3
 800ada6:	3006      	adds	r0, #6
 800ada8:	f003 fa9f 	bl	800e2ea <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800adac:	4620      	mov	r0, r4
 800adae:	f850 1b09 	ldr.w	r1, [r0], #9
 800adb2:	2203      	movs	r2, #3
 800adb4:	3104      	adds	r1, #4
 800adb6:	f003 fa98 	bl	800e2ea <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800adba:	6821      	ldr	r1, [r4, #0]
 800adbc:	79cb      	ldrb	r3, [r1, #7]
 800adbe:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800adc0:	7a0a      	ldrb	r2, [r1, #8]
 800adc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800adc6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800adc8:	7a4a      	ldrb	r2, [r1, #9]
 800adca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adce:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800add0:	7a8a      	ldrb	r2, [r1, #10]
 800add2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800add6:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800add8:	7acb      	ldrb	r3, [r1, #11]
 800adda:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800addc:	7b0b      	ldrb	r3, [r1, #12]
 800adde:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800ade0:	7923      	ldrb	r3, [r4, #4]
 800ade2:	2b21      	cmp	r3, #33	; 0x21
 800ade4:	d018      	beq.n	800ae18 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800ade6:	2b11      	cmp	r3, #17
 800ade8:	dc22      	bgt.n	800ae30 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800adea:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800adec:	6821      	ldr	r1, [r4, #0]
 800adee:	f102 0c01 	add.w	ip, r2, #1
 800adf2:	5c8b      	ldrb	r3, [r1, r2]
 800adf4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800adf6:	1c90      	adds	r0, r2, #2
 800adf8:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800adfc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800ae00:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ae02:	3203      	adds	r2, #3
 800ae04:	5c08      	ldrb	r0, [r1, r0]
 800ae06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae0a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ae0c:	5c8a      	ldrb	r2, [r1, r2]
 800ae0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ae12:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800ae14:	2000      	movs	r0, #0
}
 800ae16:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800ae18:	2210      	movs	r2, #16
 800ae1a:	310d      	adds	r1, #13
 800ae1c:	f104 0012 	add.w	r0, r4, #18
 800ae20:	f003 fa63 	bl	800e2ea <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800ae24:	221d      	movs	r2, #29
 800ae26:	e7e1      	b.n	800adec <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800ae28:	2002      	movs	r0, #2
}
 800ae2a:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800ae2c:	2002      	movs	r0, #2
 800ae2e:	e7f2      	b.n	800ae16 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800ae30:	2001      	movs	r0, #1
 800ae32:	e7f0      	b.n	800ae16 <LoRaMacParserJoinAccept+0x86>

0800ae34 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ae34:	2800      	cmp	r0, #0
 800ae36:	d058      	beq.n	800aeea <LoRaMacParserData+0xb6>
{
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ae3c:	6801      	ldr	r1, [r0, #0]
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	d055      	beq.n	800aeee <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ae42:	780b      	ldrb	r3, [r1, #0]
 800ae44:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800ae46:	784b      	ldrb	r3, [r1, #1]
 800ae48:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ae4a:	788a      	ldrb	r2, [r1, #2]
 800ae4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ae50:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ae52:	78ca      	ldrb	r2, [r1, #3]
 800ae54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae58:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ae5a:	790a      	ldrb	r2, [r1, #4]
 800ae5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ae60:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800ae62:	794b      	ldrb	r3, [r1, #5]
 800ae64:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800ae66:	798b      	ldrb	r3, [r1, #6]
 800ae68:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ae6a:	79ca      	ldrb	r2, [r1, #7]
 800ae6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ae70:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ae72:	7b02      	ldrb	r2, [r0, #12]
 800ae74:	f002 020f 	and.w	r2, r2, #15
 800ae78:	3108      	adds	r1, #8
 800ae7a:	3010      	adds	r0, #16
 800ae7c:	f003 fa35 	bl	800e2ea <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ae80:	7b23      	ldrb	r3, [r4, #12]
 800ae82:	f003 030f 	and.w	r3, r3, #15
 800ae86:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800ae90:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ae94:	7922      	ldrb	r2, [r4, #4]
 800ae96:	1a11      	subs	r1, r2, r0
 800ae98:	2904      	cmp	r1, #4
 800ae9a:	dc16      	bgt.n	800aeca <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800ae9c:	6822      	ldr	r2, [r4, #0]
 800ae9e:	7923      	ldrb	r3, [r4, #4]
 800aea0:	441a      	add	r2, r3
 800aea2:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800aea6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800aea8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800aeac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800aeb0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800aeb2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800aeb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800aeba:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800aebc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800aec0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800aec4:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800aec6:	2000      	movs	r0, #0
}
 800aec8:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800aeca:	6821      	ldr	r1, [r4, #0]
 800aecc:	3309      	adds	r3, #9
 800aece:	5c08      	ldrb	r0, [r1, r0]
 800aed0:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800aed4:	1ad2      	subs	r2, r2, r3
 800aed6:	b2d2      	uxtb	r2, r2
 800aed8:	3a04      	subs	r2, #4
 800aeda:	b2d2      	uxtb	r2, r2
 800aedc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800aee0:	4419      	add	r1, r3
 800aee2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aee4:	f003 fa01 	bl	800e2ea <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800aee8:	e7d8      	b.n	800ae9c <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800aeea:	2002      	movs	r0, #2
}
 800aeec:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800aeee:	2002      	movs	r0, #2
 800aef0:	e7ea      	b.n	800aec8 <LoRaMacParserData+0x94>

0800aef2 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800aef2:	b370      	cbz	r0, 800af52 <LoRaMacSerializerJoinRequest+0x60>
{
 800aef4:	b510      	push	{r4, lr}
 800aef6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800aef8:	6803      	ldr	r3, [r0, #0]
 800aefa:	b363      	cbz	r3, 800af56 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800aefc:	7902      	ldrb	r2, [r0, #4]
 800aefe:	2a16      	cmp	r2, #22
 800af00:	d92b      	bls.n	800af5a <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800af02:	7942      	ldrb	r2, [r0, #5]
 800af04:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800af06:	4601      	mov	r1, r0
 800af08:	f851 0b06 	ldr.w	r0, [r1], #6
 800af0c:	2208      	movs	r2, #8
 800af0e:	3001      	adds	r0, #1
 800af10:	f003 f9f6 	bl	800e300 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800af14:	4621      	mov	r1, r4
 800af16:	f851 0b0e 	ldr.w	r0, [r1], #14
 800af1a:	2208      	movs	r2, #8
 800af1c:	3009      	adds	r0, #9
 800af1e:	f003 f9ef 	bl	800e300 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800af22:	8ae2      	ldrh	r2, [r4, #22]
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800af28:	8ae3      	ldrh	r3, [r4, #22]
 800af2a:	6822      	ldr	r2, [r4, #0]
 800af2c:	0a1b      	lsrs	r3, r3, #8
 800af2e:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800af30:	69a2      	ldr	r2, [r4, #24]
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800af36:	69a3      	ldr	r3, [r4, #24]
 800af38:	0a1b      	lsrs	r3, r3, #8
 800af3a:	6822      	ldr	r2, [r4, #0]
 800af3c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800af3e:	8b62      	ldrh	r2, [r4, #26]
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800af44:	7ee2      	ldrb	r2, [r4, #27]
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800af4a:	2317      	movs	r3, #23
 800af4c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800af4e:	2000      	movs	r0, #0
}
 800af50:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800af52:	2001      	movs	r0, #1
}
 800af54:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800af56:	2001      	movs	r0, #1
 800af58:	e7fa      	b.n	800af50 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800af5a:	2002      	movs	r0, #2
 800af5c:	e7f8      	b.n	800af50 <LoRaMacSerializerJoinRequest+0x5e>

0800af5e <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af5e:	2800      	cmp	r0, #0
 800af60:	d066      	beq.n	800b030 <LoRaMacSerializerData+0xd2>
{
 800af62:	b538      	push	{r3, r4, r5, lr}
 800af64:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af66:	6801      	ldr	r1, [r0, #0]
 800af68:	2900      	cmp	r1, #0
 800af6a:	d063      	beq.n	800b034 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800af6c:	7b02      	ldrb	r2, [r0, #12]
 800af6e:	f002 020f 	and.w	r2, r2, #15
 800af72:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800af76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800af7a:	b10b      	cbz	r3, 800af80 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800af7c:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800af80:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800af82:	3304      	adds	r3, #4
 800af84:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800af86:	7922      	ldrb	r2, [r4, #4]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d355      	bcc.n	800b038 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800af8c:	7963      	ldrb	r3, [r4, #5]
 800af8e:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800af90:	68a2      	ldr	r2, [r4, #8]
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	0a1b      	lsrs	r3, r3, #8
 800af9a:	6822      	ldr	r2, [r4, #0]
 800af9c:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800af9e:	8962      	ldrh	r2, [r4, #10]
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800afa4:	7ae2      	ldrb	r2, [r4, #11]
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	7b22      	ldrb	r2, [r4, #12]
 800afae:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800afb0:	89e2      	ldrh	r2, [r4, #14]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800afb6:	89e3      	ldrh	r3, [r4, #14]
 800afb8:	6822      	ldr	r2, [r4, #0]
 800afba:	0a1b      	lsrs	r3, r3, #8
 800afbc:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800afbe:	4621      	mov	r1, r4
 800afc0:	f851 0b10 	ldr.w	r0, [r1], #16
 800afc4:	7b22      	ldrb	r2, [r4, #12]
 800afc6:	f002 020f 	and.w	r2, r2, #15
 800afca:	3008      	adds	r0, #8
 800afcc:	f003 f98d 	bl	800e2ea <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800afd0:	7b23      	ldrb	r3, [r4, #12]
 800afd2:	f003 030f 	and.w	r3, r3, #15
 800afd6:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800afda:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800afde:	b12a      	cbz	r2, 800afec <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	f894 1020 	ldrb.w	r1, [r4, #32]
 800afe6:	5551      	strb	r1, [r2, r5]
 800afe8:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800afec:	6820      	ldr	r0, [r4, #0]
 800afee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800aff2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aff4:	4428      	add	r0, r5
 800aff6:	f003 f978 	bl	800e2ea <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800affa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800affe:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b000:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b002:	6821      	ldr	r1, [r4, #0]
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	b292      	uxth	r2, r2
 800b008:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b00a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b00c:	0a08      	lsrs	r0, r1, #8
 800b00e:	6825      	ldr	r5, [r4, #0]
 800b010:	1c99      	adds	r1, r3, #2
 800b012:	b289      	uxth	r1, r1
 800b014:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b016:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800b018:	6820      	ldr	r0, [r4, #0]
 800b01a:	1cda      	adds	r2, r3, #3
 800b01c:	b292      	uxth	r2, r2
 800b01e:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b020:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800b024:	6821      	ldr	r1, [r4, #0]
 800b026:	3304      	adds	r3, #4
 800b028:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800b02a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800b02c:	2000      	movs	r0, #0
}
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b030:	2001      	movs	r0, #1
}
 800b032:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b034:	2001      	movs	r0, #1
 800b036:	e7fa      	b.n	800b02e <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b038:	2002      	movs	r0, #2
 800b03a:	e7f8      	b.n	800b02e <LoRaMacSerializerData+0xd0>

0800b03c <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800b03c:	4770      	bx	lr

0800b03e <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800b03e:	2000      	movs	r0, #0
 800b040:	4770      	bx	lr

0800b042 <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 800b042:	2000      	movs	r0, #0
 800b044:	4770      	bx	lr

0800b046 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800b046:	2805      	cmp	r0, #5
 800b048:	d005      	beq.n	800b056 <RegionIsActive+0x10>
 800b04a:	2808      	cmp	r0, #8
 800b04c:	d001      	beq.n	800b052 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800b04e:	2000      	movs	r0, #0
        }
    }
}
 800b050:	4770      	bx	lr
    switch( region )
 800b052:	2001      	movs	r0, #1
 800b054:	4770      	bx	lr
 800b056:	2001      	movs	r0, #1
 800b058:	4770      	bx	lr

0800b05a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800b05a:	b500      	push	{lr}
 800b05c:	b083      	sub	sp, #12
 800b05e:	4603      	mov	r3, r0
 800b060:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800b062:	2200      	movs	r2, #0
 800b064:	9200      	str	r2, [sp, #0]
    switch( region )
 800b066:	2b05      	cmp	r3, #5
 800b068:	d004      	beq.n	800b074 <RegionGetPhyParam+0x1a>
 800b06a:	2b08      	cmp	r3, #8
 800b06c:	d009      	beq.n	800b082 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800b06e:	9b00      	ldr	r3, [sp, #0]
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	e002      	b.n	800b07a <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800b074:	f000 fe00 	bl	800bc78 <RegionEU868GetPhyParam>
 800b078:	9001      	str	r0, [sp, #4]
        }
    }
}
 800b07a:	9801      	ldr	r0, [sp, #4]
 800b07c:	b003      	add	sp, #12
 800b07e:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800b082:	f001 fc1f 	bl	800c8c4 <RegionUS915GetPhyParam>
 800b086:	9001      	str	r0, [sp, #4]
 800b088:	e7f7      	b.n	800b07a <RegionGetPhyParam+0x20>

0800b08a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800b08a:	b508      	push	{r3, lr}
 800b08c:	4603      	mov	r3, r0
 800b08e:	4608      	mov	r0, r1
    switch( region )
 800b090:	2b05      	cmp	r3, #5
 800b092:	d002      	beq.n	800b09a <RegionSetBandTxDone+0x10>
 800b094:	2b08      	cmp	r3, #8
 800b096:	d003      	beq.n	800b0a0 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800b098:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800b09a:	f000 feaf 	bl	800bdfc <RegionEU868SetBandTxDone>
 800b09e:	e7fb      	b.n	800b098 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800b0a0:	f001 fcec 	bl	800ca7c <RegionUS915SetBandTxDone>
 800b0a4:	e7f8      	b.n	800b098 <RegionSetBandTxDone+0xe>

0800b0a6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800b0a6:	b508      	push	{r3, lr}
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	4608      	mov	r0, r1
    switch( region )
 800b0ac:	2b05      	cmp	r3, #5
 800b0ae:	d002      	beq.n	800b0b6 <RegionInitDefaults+0x10>
 800b0b0:	2b08      	cmp	r3, #8
 800b0b2:	d003      	beq.n	800b0bc <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800b0b4:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800b0b6:	f000 febf 	bl	800be38 <RegionEU868InitDefaults>
 800b0ba:	e7fb      	b.n	800b0b4 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800b0bc:	f001 fcfc 	bl	800cab8 <RegionUS915InitDefaults>
}
 800b0c0:	e7f8      	b.n	800b0b4 <RegionInitDefaults+0xe>

0800b0c2 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b0c2:	b508      	push	{r3, lr}
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	4611      	mov	r1, r2
    switch( region )
 800b0ca:	2b05      	cmp	r3, #5
 800b0cc:	d003      	beq.n	800b0d6 <RegionVerify+0x14>
 800b0ce:	2b08      	cmp	r3, #8
 800b0d0:	d004      	beq.n	800b0dc <RegionVerify+0x1a>
 800b0d2:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b0d4:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800b0d6:	f000 ff1b 	bl	800bf10 <RegionEU868Verify>
 800b0da:	e7fb      	b.n	800b0d4 <RegionVerify+0x12>
        US915_VERIFY( );
 800b0dc:	f001 fd92 	bl	800cc04 <RegionUS915Verify>
 800b0e0:	e7f8      	b.n	800b0d4 <RegionVerify+0x12>

0800b0e2 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800b0e2:	b508      	push	{r3, lr}
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	4608      	mov	r0, r1
    switch( region )
 800b0e8:	2b05      	cmp	r3, #5
 800b0ea:	d002      	beq.n	800b0f2 <RegionApplyCFList+0x10>
 800b0ec:	2b08      	cmp	r3, #8
 800b0ee:	d003      	beq.n	800b0f8 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800b0f0:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800b0f2:	f001 fadb 	bl	800c6ac <RegionEU868ApplyCFList>
 800b0f6:	e7fb      	b.n	800b0f0 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800b0f8:	f001 fdb4 	bl	800cc64 <RegionUS915ApplyCFList>
}
 800b0fc:	e7f8      	b.n	800b0f0 <RegionApplyCFList+0xe>

0800b0fe <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800b0fe:	b508      	push	{r3, lr}
 800b100:	4603      	mov	r3, r0
 800b102:	4608      	mov	r0, r1
    switch( region )
 800b104:	2b05      	cmp	r3, #5
 800b106:	d003      	beq.n	800b110 <RegionChanMaskSet+0x12>
 800b108:	2b08      	cmp	r3, #8
 800b10a:	d004      	beq.n	800b116 <RegionChanMaskSet+0x18>
 800b10c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b10e:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800b110:	f000 ff44 	bl	800bf9c <RegionEU868ChanMaskSet>
 800b114:	e7fb      	b.n	800b10e <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800b116:	f001 fde7 	bl	800cce8 <RegionUS915ChanMaskSet>
 800b11a:	e7f8      	b.n	800b10e <RegionChanMaskSet+0x10>

0800b11c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b11c:	b508      	push	{r3, lr}
 800b11e:	4684      	mov	ip, r0
 800b120:	4608      	mov	r0, r1
 800b122:	4611      	mov	r1, r2
 800b124:	461a      	mov	r2, r3
    switch( region )
 800b126:	f1bc 0f05 	cmp.w	ip, #5
 800b12a:	d003      	beq.n	800b134 <RegionComputeRxWindowParameters+0x18>
 800b12c:	f1bc 0f08 	cmp.w	ip, #8
 800b130:	d004      	beq.n	800b13c <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800b132:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b134:	9b02      	ldr	r3, [sp, #8]
 800b136:	f000 ff4f 	bl	800bfd8 <RegionEU868ComputeRxWindowParameters>
 800b13a:	e7fa      	b.n	800b132 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b13c:	9b02      	ldr	r3, [sp, #8]
 800b13e:	f001 fe17 	bl	800cd70 <RegionUS915ComputeRxWindowParameters>
}
 800b142:	e7f6      	b.n	800b132 <RegionComputeRxWindowParameters+0x16>

0800b144 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b144:	b508      	push	{r3, lr}
 800b146:	4603      	mov	r3, r0
 800b148:	4608      	mov	r0, r1
 800b14a:	4611      	mov	r1, r2
    switch( region )
 800b14c:	2b05      	cmp	r3, #5
 800b14e:	d003      	beq.n	800b158 <RegionRxConfig+0x14>
 800b150:	2b08      	cmp	r3, #8
 800b152:	d004      	beq.n	800b15e <RegionRxConfig+0x1a>
 800b154:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b156:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800b158:	f000 ff74 	bl	800c044 <RegionEU868RxConfig>
 800b15c:	e7fb      	b.n	800b156 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800b15e:	f001 fe35 	bl	800cdcc <RegionUS915RxConfig>
 800b162:	e7f8      	b.n	800b156 <RegionRxConfig+0x12>

0800b164 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b164:	b508      	push	{r3, lr}
 800b166:	4684      	mov	ip, r0
 800b168:	4608      	mov	r0, r1
 800b16a:	4611      	mov	r1, r2
 800b16c:	461a      	mov	r2, r3
    switch( region )
 800b16e:	f1bc 0f05 	cmp.w	ip, #5
 800b172:	d004      	beq.n	800b17e <RegionTxConfig+0x1a>
 800b174:	f1bc 0f08 	cmp.w	ip, #8
 800b178:	d004      	beq.n	800b184 <RegionTxConfig+0x20>
 800b17a:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b17c:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800b17e:	f000 ffe5 	bl	800c14c <RegionEU868TxConfig>
 800b182:	e7fb      	b.n	800b17c <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800b184:	f001 fe7c 	bl	800ce80 <RegionUS915TxConfig>
 800b188:	e7f8      	b.n	800b17c <RegionTxConfig+0x18>

0800b18a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b18a:	b500      	push	{lr}
 800b18c:	b083      	sub	sp, #12
 800b18e:	4684      	mov	ip, r0
 800b190:	4608      	mov	r0, r1
 800b192:	4611      	mov	r1, r2
 800b194:	461a      	mov	r2, r3
    switch( region )
 800b196:	f1bc 0f05 	cmp.w	ip, #5
 800b19a:	d006      	beq.n	800b1aa <RegionLinkAdrReq+0x20>
 800b19c:	f1bc 0f08 	cmp.w	ip, #8
 800b1a0:	d009      	beq.n	800b1b6 <RegionLinkAdrReq+0x2c>
 800b1a2:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b1a4:	b003      	add	sp, #12
 800b1a6:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800b1aa:	9b05      	ldr	r3, [sp, #20]
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	9b04      	ldr	r3, [sp, #16]
 800b1b0:	f001 f864 	bl	800c27c <RegionEU868LinkAdrReq>
 800b1b4:	e7f6      	b.n	800b1a4 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800b1b6:	9b05      	ldr	r3, [sp, #20]
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	9b04      	ldr	r3, [sp, #16]
 800b1bc:	f001 feda 	bl	800cf74 <RegionUS915LinkAdrReq>
 800b1c0:	e7f0      	b.n	800b1a4 <RegionLinkAdrReq+0x1a>

0800b1c2 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800b1c2:	b508      	push	{r3, lr}
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	4608      	mov	r0, r1
    switch( region )
 800b1c8:	2b05      	cmp	r3, #5
 800b1ca:	d003      	beq.n	800b1d4 <RegionRxParamSetupReq+0x12>
 800b1cc:	2b08      	cmp	r3, #8
 800b1ce:	d004      	beq.n	800b1da <RegionRxParamSetupReq+0x18>
 800b1d0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b1d2:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800b1d4:	f001 f918 	bl	800c408 <RegionEU868RxParamSetupReq>
 800b1d8:	e7fb      	b.n	800b1d2 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800b1da:	f002 f821 	bl	800d220 <RegionUS915RxParamSetupReq>
 800b1de:	e7f8      	b.n	800b1d2 <RegionRxParamSetupReq+0x10>

0800b1e0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800b1e0:	b508      	push	{r3, lr}
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	4608      	mov	r0, r1
    switch( region )
 800b1e6:	2b05      	cmp	r3, #5
 800b1e8:	d003      	beq.n	800b1f2 <RegionNewChannelReq+0x12>
 800b1ea:	2b08      	cmp	r3, #8
 800b1ec:	d004      	beq.n	800b1f8 <RegionNewChannelReq+0x18>
 800b1ee:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b1f0:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800b1f2:	f001 fa9c 	bl	800c72e <RegionEU868NewChannelReq>
 800b1f6:	e7fb      	b.n	800b1f0 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800b1f8:	f002 f83d 	bl	800d276 <RegionUS915NewChannelReq>
 800b1fc:	e7f8      	b.n	800b1f0 <RegionNewChannelReq+0x10>

0800b1fe <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800b1fe:	b508      	push	{r3, lr}
 800b200:	4603      	mov	r3, r0
 800b202:	4608      	mov	r0, r1
    switch( region )
 800b204:	2b05      	cmp	r3, #5
 800b206:	d003      	beq.n	800b210 <RegionTxParamSetupReq+0x12>
 800b208:	2b08      	cmp	r3, #8
 800b20a:	d004      	beq.n	800b216 <RegionTxParamSetupReq+0x18>
 800b20c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b20e:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800b210:	f001 f91e 	bl	800c450 <RegionEU868TxParamSetupReq>
 800b214:	e7fb      	b.n	800b20e <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800b216:	f002 f831 	bl	800d27c <RegionUS915TxParamSetupReq>
 800b21a:	e7f8      	b.n	800b20e <RegionTxParamSetupReq+0x10>

0800b21c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800b21c:	b508      	push	{r3, lr}
 800b21e:	4603      	mov	r3, r0
 800b220:	4608      	mov	r0, r1
    switch( region )
 800b222:	2b05      	cmp	r3, #5
 800b224:	d003      	beq.n	800b22e <RegionDlChannelReq+0x12>
 800b226:	2b08      	cmp	r3, #8
 800b228:	d004      	beq.n	800b234 <RegionDlChannelReq+0x18>
 800b22a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b22c:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800b22e:	f001 f913 	bl	800c458 <RegionEU868DlChannelReq>
 800b232:	e7fb      	b.n	800b22c <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800b234:	f002 f825 	bl	800d282 <RegionUS915DlChannelReq>
 800b238:	e7f8      	b.n	800b22c <RegionDlChannelReq+0x10>

0800b23a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800b23a:	b508      	push	{r3, lr}
 800b23c:	4603      	mov	r3, r0
 800b23e:	4608      	mov	r0, r1
 800b240:	4611      	mov	r1, r2
    switch( region )
 800b242:	2b05      	cmp	r3, #5
 800b244:	d003      	beq.n	800b24e <RegionAlternateDr+0x14>
 800b246:	2b08      	cmp	r3, #8
 800b248:	d004      	beq.n	800b254 <RegionAlternateDr+0x1a>
 800b24a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b24c:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800b24e:	f001 f92b 	bl	800c4a8 <RegionEU868AlternateDr>
 800b252:	e7fb      	b.n	800b24c <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800b254:	f002 f818 	bl	800d288 <RegionUS915AlternateDr>
 800b258:	e7f8      	b.n	800b24c <RegionAlternateDr+0x12>

0800b25a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b25a:	b508      	push	{r3, lr}
 800b25c:	4684      	mov	ip, r0
 800b25e:	4608      	mov	r0, r1
 800b260:	4611      	mov	r1, r2
 800b262:	461a      	mov	r2, r3
    switch( region )
 800b264:	f1bc 0f05 	cmp.w	ip, #5
 800b268:	d004      	beq.n	800b274 <RegionNextChannel+0x1a>
 800b26a:	f1bc 0f08 	cmp.w	ip, #8
 800b26e:	d005      	beq.n	800b27c <RegionNextChannel+0x22>
 800b270:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800b272:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800b274:	9b02      	ldr	r3, [sp, #8]
 800b276:	f001 f919 	bl	800c4ac <RegionEU868NextChannel>
 800b27a:	e7fa      	b.n	800b272 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800b27c:	9b02      	ldr	r3, [sp, #8]
 800b27e:	f002 f829 	bl	800d2d4 <RegionUS915NextChannel>
 800b282:	e7f6      	b.n	800b272 <RegionNextChannel+0x18>

0800b284 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800b284:	b508      	push	{r3, lr}
 800b286:	4603      	mov	r3, r0
 800b288:	4608      	mov	r0, r1
    switch( region )
 800b28a:	2b05      	cmp	r3, #5
 800b28c:	d002      	beq.n	800b294 <RegionSetContinuousWave+0x10>
 800b28e:	2b08      	cmp	r3, #8
 800b290:	d003      	beq.n	800b29a <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 800b292:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800b294:	f001 fa76 	bl	800c784 <RegionEU868SetContinuousWave>
 800b298:	e7fb      	b.n	800b292 <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 800b29a:	f002 f8cf 	bl	800d43c <RegionUS915SetContinuousWave>
}
 800b29e:	e7f8      	b.n	800b292 <RegionSetContinuousWave+0xe>

0800b2a0 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800b2a0:	b508      	push	{r3, lr}
 800b2a2:	4684      	mov	ip, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	461a      	mov	r2, r3
    switch( region )
 800b2aa:	f1bc 0f05 	cmp.w	ip, #5
 800b2ae:	d004      	beq.n	800b2ba <RegionApplyDrOffset+0x1a>
 800b2b0:	f1bc 0f08 	cmp.w	ip, #8
 800b2b4:	d004      	beq.n	800b2c0 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800b2b6:	b2c8      	uxtb	r0, r1
 800b2b8:	e001      	b.n	800b2be <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800b2ba:	f001 fa91 	bl	800c7e0 <RegionEU868ApplyDrOffset>
        }
    }
}
 800b2be:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800b2c0:	f002 f8f0 	bl	800d4a4 <RegionUS915ApplyDrOffset>
 800b2c4:	e7fb      	b.n	800b2be <RegionApplyDrOffset+0x1e>
	...

0800b2c8 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800b2c8:	4800      	ldr	r0, [pc, #0]	; (800b2cc <RegionGetVersion+0x4>)
 800b2ca:	4770      	bx	lr
 800b2cc:	01000300 	.word	0x01000300

0800b2d0 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800b2d0:	468c      	mov	ip, r1
 800b2d2:	b1a9      	cbz	r1, 800b300 <FindAvailable125kHzChannels+0x30>
 800b2d4:	b1b2      	cbz	r2, 800b304 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800b2da:	e001      	b.n	800b2e0 <FindAvailable125kHzChannels+0x10>
 800b2dc:	3301      	adds	r3, #1
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	2b07      	cmp	r3, #7
 800b2e2:	d80b      	bhi.n	800b2fc <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800b2e4:	fa40 f103 	asr.w	r1, r0, r3
 800b2e8:	f011 0f01 	tst.w	r1, #1
 800b2ec:	d0f6      	beq.n	800b2dc <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800b2ee:	7811      	ldrb	r1, [r2, #0]
 800b2f0:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800b2f4:	7811      	ldrb	r1, [r2, #0]
 800b2f6:	3101      	adds	r1, #1
 800b2f8:	7011      	strb	r1, [r2, #0]
 800b2fa:	e7ef      	b.n	800b2dc <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b300:	2003      	movs	r0, #3
 800b302:	4770      	bx	lr
 800b304:	2003      	movs	r0, #3
}
 800b306:	4770      	bx	lr

0800b308 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800b308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b30a:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800b30c:	2300      	movs	r3, #0
 800b30e:	9302      	str	r3, [sp, #8]
 800b310:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800b312:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800b316:	2800      	cmp	r0, #0
 800b318:	d03e      	beq.n	800b398 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800b31a:	460d      	mov	r5, r1
 800b31c:	4617      	mov	r7, r2
 800b31e:	4606      	mov	r6, r0
 800b320:	2900      	cmp	r1, #0
 800b322:	d03b      	beq.n	800b39c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800b324:	2a00      	cmp	r2, #0
 800b326:	d03b      	beq.n	800b3a0 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800b328:	780c      	ldrb	r4, [r1, #0]
 800b32a:	e017      	b.n	800b35c <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800b32c:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800b330:	0a00      	lsrs	r0, r0, #8
 800b332:	e019      	b.n	800b368 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800b334:	3901      	subs	r1, #1
 800b336:	2000      	movs	r0, #0
 800b338:	f002 ffca 	bl	800e2d0 <randr>
 800b33c:	f100 0310 	add.w	r3, r0, #16
 800b340:	eb0d 0003 	add.w	r0, sp, r3
 800b344:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800b348:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b34c:	703b      	strb	r3, [r7, #0]
 800b34e:	e016      	b.n	800b37e <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800b350:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b354:	b9cb      	cbnz	r3, 800b38a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800b356:	782a      	ldrb	r2, [r5, #0]
 800b358:	42a2      	cmp	r2, r4
 800b35a:	d016      	beq.n	800b38a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800b35c:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800b35e:	f014 0f01 	tst.w	r4, #1
 800b362:	d1e3      	bne.n	800b32c <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800b364:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800b368:	f10d 0207 	add.w	r2, sp, #7
 800b36c:	a902      	add	r1, sp, #8
 800b36e:	f7ff ffaf 	bl	800b2d0 <FindAvailable125kHzChannels>
 800b372:	2803      	cmp	r0, #3
 800b374:	d00b      	beq.n	800b38e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800b376:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b37a:	2900      	cmp	r1, #0
 800b37c:	d1da      	bne.n	800b334 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800b37e:	3401      	adds	r4, #1
 800b380:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800b382:	2c07      	cmp	r4, #7
 800b384:	d9e4      	bls.n	800b350 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800b386:	2400      	movs	r4, #0
 800b388:	e7e2      	b.n	800b350 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800b38a:	b913      	cbnz	r3, 800b392 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800b38c:	2003      	movs	r0, #3
}
 800b38e:	b005      	add	sp, #20
 800b390:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800b392:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800b394:	2000      	movs	r0, #0
 800b396:	e7fa      	b.n	800b38e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b398:	2003      	movs	r0, #3
 800b39a:	e7f8      	b.n	800b38e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800b39c:	2003      	movs	r0, #3
 800b39e:	e7f6      	b.n	800b38e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800b3a0:	2003      	movs	r0, #3
 800b3a2:	e7f4      	b.n	800b38e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800b3a4 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800b3a4:	fb02 1000 	mla	r0, r2, r0, r1
 800b3a8:	4770      	bx	lr

0800b3aa <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	f10d 0c08 	add.w	ip, sp, #8
 800b3b0:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800b3b4:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800b3b6:	b971      	cbnz	r1, 800b3d6 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800b3be:	d306      	bcc.n	800b3ce <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800b3c0:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d80a      	bhi.n	800b3de <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800b3c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3cc:	e000      	b.n	800b3d0 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b3ce:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800b3d0:	4298      	cmp	r0, r3
 800b3d2:	bf38      	it	cc
 800b3d4:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800b3d6:	b900      	cbnz	r0, 800b3da <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800b3d8:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800b3da:	b002      	add	sp, #8
 800b3dc:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800b3de:	f242 7310 	movw	r3, #10000	; 0x2710
 800b3e2:	e7f5      	b.n	800b3d0 <GetDutyCycle+0x26>

0800b3e4 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800b3e4:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800b3e6:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800b3e8:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800b3ea:	e001      	b.n	800b3f0 <CountChannels+0xc>
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	428b      	cmp	r3, r1
 800b3f2:	d207      	bcs.n	800b404 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	409a      	lsls	r2, r3
 800b3f8:	ea32 020c 	bics.w	r2, r2, ip
 800b3fc:	d1f6      	bne.n	800b3ec <CountChannels+0x8>
        {
            nbActiveBits++;
 800b3fe:	3001      	adds	r0, #1
 800b400:	b2c0      	uxtb	r0, r0
 800b402:	e7f3      	b.n	800b3ec <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800b404:	4770      	bx	lr
	...

0800b408 <SetMaxTimeCredits>:
{
 800b408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b40c:	b089      	sub	sp, #36	; 0x24
 800b40e:	4604      	mov	r4, r0
 800b410:	460e      	mov	r6, r1
 800b412:	ad02      	add	r5, sp, #8
 800b414:	e885 000c 	stmia.w	r5, {r2, r3}
 800b418:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800b41c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800b420:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b424:	f005 fb84 	bl	8010b30 <SysTimeToMs>
 800b428:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800b42a:	2300      	movs	r3, #0
 800b42c:	9304      	str	r3, [sp, #16]
 800b42e:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800b430:	e895 000c 	ldmia.w	r5, {r2, r3}
 800b434:	4631      	mov	r1, r6
 800b436:	4620      	mov	r0, r4
 800b438:	f7ff ffb7 	bl	800b3aa <GetDutyCycle>
 800b43c:	4605      	mov	r5, r0
    if( joined == false )
 800b43e:	2e00      	cmp	r6, #0
 800b440:	d14c      	bne.n	800b4dc <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b442:	2864      	cmp	r0, #100	; 0x64
 800b444:	d025      	beq.n	800b492 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b446:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b44a:	d025      	beq.n	800b498 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800b44c:	4e27      	ldr	r6, [pc, #156]	; (800b4ec <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800b44e:	68a1      	ldr	r1, [r4, #8]
 800b450:	a806      	add	r0, sp, #24
 800b452:	f005 fb8d 	bl	8010b70 <SysTimeFromMs>
 800b456:	9b07      	ldr	r3, [sp, #28]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	9b06      	ldr	r3, [sp, #24]
 800b45c:	aa02      	add	r2, sp, #8
 800b45e:	ca06      	ldmia	r2, {r1, r2}
 800b460:	a804      	add	r0, sp, #16
 800b462:	f005 faec 	bl	8010a3e <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b466:	f1b8 0f00 	cmp.w	r8, #0
 800b46a:	d102      	bne.n	800b472 <SetMaxTimeCredits+0x6a>
 800b46c:	f1b9 0f00 	cmp.w	r9, #0
 800b470:	d002      	beq.n	800b478 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b472:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b474:	42b3      	cmp	r3, r6
 800b476:	d012      	beq.n	800b49e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800b478:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b47a:	9b02      	ldr	r3, [sp, #8]
 800b47c:	4a1c      	ldr	r2, [pc, #112]	; (800b4f0 <SetMaxTimeCredits+0xe8>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d812      	bhi.n	800b4a8 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800b482:	6863      	ldr	r3, [r4, #4]
 800b484:	b903      	cbnz	r3, 800b488 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800b486:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800b488:	6126      	str	r6, [r4, #16]
}
 800b48a:	4628      	mov	r0, r5
 800b48c:	b009      	add	sp, #36	; 0x24
 800b48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800b492:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b494:	4e17      	ldr	r6, [pc, #92]	; (800b4f4 <SetMaxTimeCredits+0xec>)
 800b496:	e7da      	b.n	800b44e <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800b498:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800b49a:	4e17      	ldr	r6, [pc, #92]	; (800b4f8 <SetMaxTimeCredits+0xf0>)
 800b49c:	e7d7      	b.n	800b44e <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b49e:	9a04      	ldr	r2, [sp, #16]
 800b4a0:	4b16      	ldr	r3, [pc, #88]	; (800b4fc <SetMaxTimeCredits+0xf4>)
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d9ed      	bls.n	800b482 <SetMaxTimeCredits+0x7a>
 800b4a6:	e7e7      	b.n	800b478 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800b4a8:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800b4ac:	3b30      	subs	r3, #48	; 0x30
 800b4ae:	4a14      	ldr	r2, [pc, #80]	; (800b500 <SetMaxTimeCredits+0xf8>)
 800b4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b4:	0c1b      	lsrs	r3, r3, #16
 800b4b6:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800b4b8:	4a12      	ldr	r2, [pc, #72]	; (800b504 <SetMaxTimeCredits+0xfc>)
 800b4ba:	fb02 f303 	mul.w	r3, r2, r3
 800b4be:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b4c0:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800b4c4:	3330      	adds	r3, #48	; 0x30
 800b4c6:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800b4ce:	ab04      	add	r3, sp, #16
 800b4d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4d4:	f005 fb2c 	bl	8010b30 <SysTimeToMs>
 800b4d8:	60a0      	str	r0, [r4, #8]
 800b4da:	e7d2      	b.n	800b482 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800b4dc:	f1b8 0f00 	cmp.w	r8, #0
 800b4e0:	d102      	bne.n	800b4e8 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800b4e2:	4e04      	ldr	r6, [pc, #16]	; (800b4f4 <SetMaxTimeCredits+0xec>)
 800b4e4:	60e6      	str	r6, [r4, #12]
 800b4e6:	e7cc      	b.n	800b482 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b4e8:	4e02      	ldr	r6, [pc, #8]	; (800b4f4 <SetMaxTimeCredits+0xec>)
 800b4ea:	e7ca      	b.n	800b482 <SetMaxTimeCredits+0x7a>
 800b4ec:	02932e00 	.word	0x02932e00
 800b4f0:	0001ec2f 	.word	0x0001ec2f
 800b4f4:	001b7740 	.word	0x001b7740
 800b4f8:	0112a880 	.word	0x0112a880
 800b4fc:	0001517f 	.word	0x0001517f
 800b500:	c22e4507 	.word	0xc22e4507
 800b504:	00015180 	.word	0x00015180

0800b508 <UpdateTimeCredits>:
{
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	4604      	mov	r4, r0
 800b50e:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	9200      	str	r2, [sp, #0]
 800b514:	ab06      	add	r3, sp, #24
 800b516:	cb0c      	ldmia	r3, {r2, r3}
 800b518:	f7ff ff76 	bl	800b408 <SetMaxTimeCredits>
 800b51c:	4605      	mov	r5, r0
    if( joined == true )
 800b51e:	b94e      	cbnz	r6, 800b534 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800b520:	68e2      	ldr	r2, [r4, #12]
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	429a      	cmp	r2, r3
 800b526:	d900      	bls.n	800b52a <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800b528:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800b52a:	9b08      	ldr	r3, [sp, #32]
 800b52c:	6063      	str	r3, [r4, #4]
}
 800b52e:	4628      	mov	r0, r5
 800b530:	b002      	add	sp, #8
 800b532:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800b534:	6860      	ldr	r0, [r4, #4]
 800b536:	f005 fb7b 	bl	8010c30 <UTIL_TIMER_GetElapsedTime>
 800b53a:	68e3      	ldr	r3, [r4, #12]
 800b53c:	4403      	add	r3, r0
 800b53e:	60e3      	str	r3, [r4, #12]
 800b540:	e7ee      	b.n	800b520 <UpdateTimeCredits+0x18>

0800b542 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800b542:	4288      	cmp	r0, r1
 800b544:	db03      	blt.n	800b54e <RegionCommonValueInRange+0xc>
 800b546:	4290      	cmp	r0, r2
 800b548:	dd03      	ble.n	800b552 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800b54a:	2000      	movs	r0, #0
 800b54c:	4770      	bx	lr
 800b54e:	2000      	movs	r0, #0
 800b550:	4770      	bx	lr
        return 1;
 800b552:	2001      	movs	r0, #1
}
 800b554:	4770      	bx	lr

0800b556 <RegionCommonChanVerifyDr>:
{
 800b556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b55a:	4682      	mov	sl, r0
 800b55c:	460e      	mov	r6, r1
 800b55e:	4690      	mov	r8, r2
 800b560:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800b564:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800b568:	4619      	mov	r1, r3
 800b56a:	4640      	mov	r0, r8
 800b56c:	f7ff ffe9 	bl	800b542 <RegionCommonValueInRange>
 800b570:	b338      	cbz	r0, 800b5c2 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b572:	2500      	movs	r5, #0
 800b574:	462f      	mov	r7, r5
 800b576:	e01e      	b.n	800b5b6 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800b578:	3401      	adds	r4, #1
 800b57a:	b2e4      	uxtb	r4, r4
 800b57c:	2c0f      	cmp	r4, #15
 800b57e:	d816      	bhi.n	800b5ae <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800b580:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800b584:	4123      	asrs	r3, r4
 800b586:	f013 0f01 	tst.w	r3, #1
 800b58a:	d0f5      	beq.n	800b578 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800b58c:	193b      	adds	r3, r7, r4
 800b58e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b592:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800b596:	7a19      	ldrb	r1, [r3, #8]
 800b598:	090a      	lsrs	r2, r1, #4
 800b59a:	f001 010f 	and.w	r1, r1, #15
 800b59e:	4640      	mov	r0, r8
 800b5a0:	f7ff ffcf 	bl	800b542 <RegionCommonValueInRange>
 800b5a4:	2801      	cmp	r0, #1
 800b5a6:	d1e7      	bne.n	800b578 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800b5a8:	2001      	movs	r0, #1
}
 800b5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	b2ff      	uxtb	r7, r7
 800b5b2:	3501      	adds	r5, #1
 800b5b4:	b2ed      	uxtb	r5, r5
 800b5b6:	4557      	cmp	r7, sl
 800b5b8:	d201      	bcs.n	800b5be <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800b5ba:	2400      	movs	r4, #0
 800b5bc:	e7de      	b.n	800b57c <RegionCommonChanVerifyDr+0x26>
    return false;
 800b5be:	2000      	movs	r0, #0
 800b5c0:	e7f3      	b.n	800b5aa <RegionCommonChanVerifyDr+0x54>
        return false;
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	e7f1      	b.n	800b5aa <RegionCommonChanVerifyDr+0x54>

0800b5c6 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b5c6:	0913      	lsrs	r3, r2, #4
 800b5c8:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800b5cc:	d313      	bcc.n	800b5f6 <RegionCommonChanDisable+0x30>
{
 800b5ce:	b500      	push	{lr}
 800b5d0:	4684      	mov	ip, r0
 800b5d2:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b5d6:	4291      	cmp	r1, r2
 800b5d8:	d20f      	bcs.n	800b5fa <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800b5da:	f001 030f 	and.w	r3, r1, #15
 800b5de:	2001      	movs	r0, #1
 800b5e0:	fa00 f303 	lsl.w	r3, r0, r3
 800b5e4:	43db      	mvns	r3, r3
 800b5e6:	b21b      	sxth	r3, r3
 800b5e8:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800b5f2:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800b5f6:	2000      	movs	r0, #0
}
 800b5f8:	4770      	bx	lr
        return false;
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	e7f9      	b.n	800b5f2 <RegionCommonChanDisable+0x2c>

0800b5fe <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800b5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800b600:	b188      	cbz	r0, 800b626 <RegionCommonCountChannels+0x28>
 800b602:	460c      	mov	r4, r1
 800b604:	4616      	mov	r6, r2
 800b606:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800b608:	2500      	movs	r5, #0
 800b60a:	e008      	b.n	800b61e <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b60c:	2110      	movs	r1, #16
 800b60e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800b612:	f7ff fee7 	bl	800b3e4 <CountChannels>
 800b616:	4405      	add	r5, r0
 800b618:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b61a:	3401      	adds	r4, #1
 800b61c:	b2e4      	uxtb	r4, r4
 800b61e:	42b4      	cmp	r4, r6
 800b620:	d3f4      	bcc.n	800b60c <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800b622:	4628      	mov	r0, r5
 800b624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800b626:	2500      	movs	r5, #0
 800b628:	e7fb      	b.n	800b622 <RegionCommonCountChannels+0x24>

0800b62a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800b62a:	4684      	mov	ip, r0
 800b62c:	b158      	cbz	r0, 800b646 <RegionCommonChanMaskCopy+0x1c>
 800b62e:	b109      	cbz	r1, 800b634 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800b630:	2300      	movs	r3, #0
 800b632:	e006      	b.n	800b642 <RegionCommonChanMaskCopy+0x18>
 800b634:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800b636:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b63a:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800b63e:	3301      	adds	r3, #1
 800b640:	b2db      	uxtb	r3, r3
 800b642:	4293      	cmp	r3, r2
 800b644:	d3f7      	bcc.n	800b636 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800b646:	4770      	bx	lr

0800b648 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b648:	b082      	sub	sp, #8
 800b64a:	b538      	push	{r3, r4, r5, lr}
 800b64c:	4604      	mov	r4, r0
 800b64e:	460d      	mov	r5, r1
 800b650:	4611      	mov	r1, r2
 800b652:	aa04      	add	r2, sp, #16
 800b654:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800b658:	ca0c      	ldmia	r2, {r2, r3}
 800b65a:	f7ff fea6 	bl	800b3aa <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800b65e:	68e3      	ldr	r3, [r4, #12]
 800b660:	fb05 f100 	mul.w	r1, r5, r0
 800b664:	428b      	cmp	r3, r1
 800b666:	d905      	bls.n	800b674 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800b668:	1a5b      	subs	r3, r3, r1
 800b66a:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800b66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b670:	b002      	add	sp, #8
 800b672:	4770      	bx	lr
        band->TimeCredits = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	60e3      	str	r3, [r4, #12]
}
 800b678:	e7f8      	b.n	800b66c <RegionCommonSetBandTxDone+0x24>
	...

0800b67c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800b67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b680:	b089      	sub	sp, #36	; 0x24
 800b682:	4607      	mov	r7, r0
 800b684:	468b      	mov	fp, r1
 800b686:	4691      	mov	r9, r2
 800b688:	4698      	mov	r8, r3
 800b68a:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b68e:	f005 fac5 	bl	8010c1c <UTIL_TIMER_GetCurrentTime>
 800b692:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800b694:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800b696:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800b698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b69c:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b69e:	e005      	b.n	800b6ac <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800b6a4:	441e      	add	r6, r3
 800b6a6:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800b6a8:	3401      	adds	r4, #1
 800b6aa:	b2e4      	uxtb	r4, r4
 800b6ac:	454c      	cmp	r4, r9
 800b6ae:	d25d      	bcs.n	800b76c <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800b6b0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800b6b4:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800b6b8:	9b04      	ldr	r3, [sp, #16]
 800b6ba:	9302      	str	r3, [sp, #8]
 800b6bc:	ab13      	add	r3, sp, #76	; 0x4c
 800b6be:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b6c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b6c6:	4653      	mov	r3, sl
 800b6c8:	4642      	mov	r2, r8
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f7ff ff1b 	bl	800b508 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b6d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6d4:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b6d8:	68ea      	ldr	r2, [r5, #12]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d8e0      	bhi.n	800b6a0 <RegionCommonUpdateBandTimeOff+0x24>
 800b6de:	f1b8 0f00 	cmp.w	r8, #0
 800b6e2:	d101      	bne.n	800b6e8 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b6e4:	2f00      	cmp	r7, #0
 800b6e6:	d1db      	bne.n	800b6a0 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800b6ec:	6929      	ldr	r1, [r5, #16]
 800b6ee:	4299      	cmp	r1, r3
 800b6f0:	d907      	bls.n	800b702 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b6f2:	1a9b      	subs	r3, r3, r2
 800b6f4:	9a05      	ldr	r2, [sp, #20]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	bf28      	it	cs
 800b6fa:	461a      	movcs	r2, r3
 800b6fc:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800b6fe:	3601      	adds	r6, #1
 800b700:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800b702:	2f00      	cmp	r7, #0
 800b704:	d1d0      	bne.n	800b6a8 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800b706:	2300      	movs	r3, #0
 800b708:	9306      	str	r3, [sp, #24]
 800b70a:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b70e:	2864      	cmp	r0, #100	; 0x64
 800b710:	d024      	beq.n	800b75c <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b712:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b716:	d025      	beq.n	800b764 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b718:	4b19      	ldr	r3, [pc, #100]	; (800b780 <RegionCommonUpdateBandTimeOff+0x104>)
 800b71a:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b71c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b71e:	4a18      	ldr	r2, [pc, #96]	; (800b780 <RegionCommonUpdateBandTimeOff+0x104>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d90c      	bls.n	800b73e <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b724:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800b728:	3b30      	subs	r3, #48	; 0x30
 800b72a:	4a16      	ldr	r2, [pc, #88]	; (800b784 <RegionCommonUpdateBandTimeOff+0x108>)
 800b72c:	fba2 2303 	umull	r2, r3, r2, r3
 800b730:	0c1b      	lsrs	r3, r3, #16
 800b732:	4a15      	ldr	r2, [pc, #84]	; (800b788 <RegionCommonUpdateBandTimeOff+0x10c>)
 800b734:	fb03 2202 	mla	r2, r3, r2, r2
 800b738:	9b06      	ldr	r3, [sp, #24]
 800b73a:	4413      	add	r3, r2
 800b73c:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800b73e:	ad06      	add	r5, sp, #24
 800b740:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b746:	e895 0006 	ldmia.w	r5, {r1, r2}
 800b74a:	4628      	mov	r0, r5
 800b74c:	f005 f977 	bl	8010a3e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800b750:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b754:	f005 f9ec 	bl	8010b30 <SysTimeToMs>
 800b758:	9005      	str	r0, [sp, #20]
 800b75a:	e7a5      	b.n	800b6a8 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800b75c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b760:	9306      	str	r3, [sp, #24]
 800b762:	e7db      	b.n	800b71c <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800b764:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800b768:	9306      	str	r3, [sp, #24]
 800b76a:	e7d7      	b.n	800b71c <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }


    if( validBands == 0 )
 800b76c:	b11e      	cbz	r6, 800b776 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800b76e:	9805      	ldr	r0, [sp, #20]
 800b770:	b009      	add	sp, #36	; 0x24
 800b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800b776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b77a:	9305      	str	r3, [sp, #20]
 800b77c:	e7f7      	b.n	800b76e <RegionCommonUpdateBandTimeOff+0xf2>
 800b77e:	bf00      	nop
 800b780:	0001ec30 	.word	0x0001ec30
 800b784:	c22e4507 	.word	0xc22e4507
 800b788:	00015180 	.word	0x00015180

0800b78c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b78c:	7803      	ldrb	r3, [r0, #0]
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d001      	beq.n	800b796 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800b792:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800b794:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800b796:	7842      	ldrb	r2, [r0, #1]
 800b798:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b79c:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b79e:	f003 030f 	and.w	r3, r3, #15
 800b7a2:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b7a4:	0913      	lsrs	r3, r2, #4
 800b7a6:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800b7a8:	7883      	ldrb	r3, [r0, #2]
 800b7aa:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800b7ac:	78c2      	ldrb	r2, [r0, #3]
 800b7ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b7b2:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800b7b4:	7903      	ldrb	r3, [r0, #4]
 800b7b6:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b7b8:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800b7bc:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800b7be:	f003 030f 	and.w	r3, r3, #15
 800b7c2:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800b7c4:	2005      	movs	r0, #5
 800b7c6:	4770      	bx	lr

0800b7c8 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	b085      	sub	sp, #20
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	4688      	mov	r8, r1
 800b7d2:	4617      	mov	r7, r2
 800b7d4:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800b7d6:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800b7d8:	f990 b006 	ldrsb.w	fp, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800b7dc:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800b7e0:	f990 a008 	ldrsb.w	sl, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800b7e4:	7943      	ldrb	r3, [r0, #5]
 800b7e6:	b92b      	cbnz	r3, 800b7f4 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800b7e8:	f990 a00b 	ldrsb.w	sl, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800b7ec:	f990 b009 	ldrsb.w	fp, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800b7f0:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800b7f4:	b95d      	cbnz	r5, 800b80e <RegionCommonLinkAdrReqVerifyParams+0x46>
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800b7f6:	2d07      	cmp	r5, #7
 800b7f8:	d02c      	beq.n	800b854 <RegionCommonLinkAdrReqVerifyParams+0x8c>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800b7fa:	f888 b000 	strb.w	fp, [r8]
    *txPow = txPower;
 800b7fe:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800b802:	f886 a000 	strb.w	sl, [r6]

    return status;
}
 800b806:	4628      	mov	r0, r5
 800b808:	b005      	add	sp, #20
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800b80e:	69a3      	ldr	r3, [r4, #24]
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800b81c:	465a      	mov	r2, fp
 800b81e:	6921      	ldr	r1, [r4, #16]
 800b820:	7b20      	ldrb	r0, [r4, #12]
 800b822:	f7ff fe98 	bl	800b556 <RegionCommonChanVerifyDr>
 800b826:	b908      	cbnz	r0, 800b82c <RegionCommonLinkAdrReqVerifyParams+0x64>
            status &= 0xFD; // Datarate KO
 800b828:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800b82c:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800b830:	9303      	str	r3, [sp, #12]
 800b832:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800b836:	461c      	mov	r4, r3
 800b838:	4619      	mov	r1, r3
 800b83a:	4648      	mov	r0, r9
 800b83c:	f7ff fe81 	bl	800b542 <RegionCommonValueInRange>
 800b840:	2800      	cmp	r0, #0
 800b842:	d1d8      	bne.n	800b7f6 <RegionCommonLinkAdrReqVerifyParams+0x2e>
            if( verifyParams->MaxTxPower > txPower )
 800b844:	454c      	cmp	r4, r9
 800b846:	dc02      	bgt.n	800b84e <RegionCommonLinkAdrReqVerifyParams+0x86>
                status &= 0xFB; // TxPower KO
 800b848:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800b84c:	e7d3      	b.n	800b7f6 <RegionCommonLinkAdrReqVerifyParams+0x2e>
                txPower = verifyParams->MaxTxPower;
 800b84e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b852:	e7d0      	b.n	800b7f6 <RegionCommonLinkAdrReqVerifyParams+0x2e>
        if( nbRepetitions == 0 )
 800b854:	f1ba 0f00 	cmp.w	sl, #0
 800b858:	d1cf      	bne.n	800b7fa <RegionCommonLinkAdrReqVerifyParams+0x32>
            nbRepetitions = 1;
 800b85a:	f04f 0a01 	mov.w	sl, #1
 800b85e:	e7cc      	b.n	800b7fa <RegionCommonLinkAdrReqVerifyParams+0x32>

0800b860 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b860:	4b02      	ldr	r3, [pc, #8]	; (800b86c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800b862:	fa03 f000 	lsl.w	r0, r3, r0
}
 800b866:	fbb0 f0f1 	udiv	r0, r0, r1
 800b86a:	4770      	bx	lr
 800b86c:	000f4240 	.word	0x000f4240

0800b870 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800b870:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800b874:	fbb3 f0f0 	udiv	r0, r3, r0
 800b878:	4770      	bx	lr
	...

0800b87c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800b87c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b87e:	f1a1 0c04 	sub.w	ip, r1, #4
 800b882:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800b886:	fb0e f202 	mul.w	r2, lr, r2
 800b88a:	fb00 220c 	mla	r2, r0, ip, r2
 800b88e:	0052      	lsls	r2, r2, #1
 800b890:	d021      	beq.n	800b8d6 <RegionCommonComputeRxWindowParameters+0x5a>
 800b892:	4402      	add	r2, r0
 800b894:	3a01      	subs	r2, #1
 800b896:	fbb2 f2f0 	udiv	r2, r2, r0
 800b89a:	4291      	cmp	r1, r2
 800b89c:	bf38      	it	cc
 800b89e:	4611      	movcc	r1, r2
 800b8a0:	9a01      	ldr	r2, [sp, #4]
 800b8a2:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b8a4:	0082      	lsls	r2, r0, #2
 800b8a6:	fb01 f000 	mul.w	r0, r1, r0
 800b8aa:	b1b8      	cbz	r0, 800b8dc <RegionCommonComputeRxWindowParameters+0x60>
 800b8ac:	3001      	adds	r0, #1
 800b8ae:	0840      	lsrs	r0, r0, #1
 800b8b0:	1a12      	subs	r2, r2, r0
 800b8b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b8b6:	fb01 2313 	mls	r3, r1, r3, r2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	dd10      	ble.n	800b8e0 <RegionCommonComputeRxWindowParameters+0x64>
 800b8be:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800b8c2:	4a0b      	ldr	r2, [pc, #44]	; (800b8f0 <RegionCommonComputeRxWindowParameters+0x74>)
 800b8c4:	fb82 1203 	smull	r1, r2, r2, r3
 800b8c8:	17db      	asrs	r3, r3, #31
 800b8ca:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800b8ce:	9a02      	ldr	r2, [sp, #8]
 800b8d0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800b8d2:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b8d6:	fbb2 f2f0 	udiv	r2, r2, r0
 800b8da:	e7de      	b.n	800b89a <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b8dc:	0840      	lsrs	r0, r0, #1
 800b8de:	e7e7      	b.n	800b8b0 <RegionCommonComputeRxWindowParameters+0x34>
 800b8e0:	4a03      	ldr	r2, [pc, #12]	; (800b8f0 <RegionCommonComputeRxWindowParameters+0x74>)
 800b8e2:	fb82 1203 	smull	r1, r2, r2, r3
 800b8e6:	17db      	asrs	r3, r3, #31
 800b8e8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800b8ec:	e7ef      	b.n	800b8ce <RegionCommonComputeRxWindowParameters+0x52>
 800b8ee:	bf00      	nop
 800b8f0:	10624dd3 	.word	0x10624dd3

0800b8f4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b8fa:	0040      	lsls	r0, r0, #1
 800b8fc:	f7f4 ff66 	bl	80007cc <__aeabi_ui2f>
 800b900:	4601      	mov	r1, r0
 800b902:	4628      	mov	r0, r5
 800b904:	f7f4 feb0 	bl	8000668 <__aeabi_fsub>
 800b908:	4621      	mov	r1, r4
 800b90a:	f7f4 fead 	bl	8000668 <__aeabi_fsub>
 800b90e:	f7f4 fd9f 	bl	8000450 <__aeabi_f2d>
 800b912:	f005 fc51 	bl	80111b8 <floor>
 800b916:	f7f4 fe7b 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800b91a:	b240      	sxtb	r0, r0
 800b91c:	bd38      	pop	{r3, r4, r5, pc}

0800b91e <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800b91e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b922:	b083      	sub	sp, #12
 800b924:	4605      	mov	r5, r0
 800b926:	468b      	mov	fp, r1
 800b928:	9200      	str	r2, [sp, #0]
 800b92a:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b92c:	2600      	movs	r6, #0
 800b92e:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800b930:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800b932:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b934:	e049      	b.n	800b9ca <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800b936:	7a3a      	ldrb	r2, [r7, #8]
 800b938:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800b93c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b940:	b252      	sxtb	r2, r2
 800b942:	b249      	sxtb	r1, r1
 800b944:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800b948:	f7ff fdfb 	bl	800b542 <RegionCommonValueInRange>
 800b94c:	b178      	cbz	r0, 800b96e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800b94e:	68ea      	ldr	r2, [r5, #12]
 800b950:	7a7b      	ldrb	r3, [r7, #9]
 800b952:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b956:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b95a:	7d13      	ldrb	r3, [r2, #20]
 800b95c:	b353      	cbz	r3, 800b9b4 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800b95e:	f109 0301 	add.w	r3, r9, #1
 800b962:	eb08 0204 	add.w	r2, r8, r4
 800b966:	f80b 2009 	strb.w	r2, [fp, r9]
 800b96a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800b96e:	3401      	adds	r4, #1
 800b970:	b2e4      	uxtb	r4, r4
 800b972:	2c0f      	cmp	r4, #15
 800b974:	d823      	bhi.n	800b9be <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800b976:	686b      	ldr	r3, [r5, #4]
 800b978:	0072      	lsls	r2, r6, #1
 800b97a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800b97e:	4123      	asrs	r3, r4
 800b980:	f013 0f01 	tst.w	r3, #1
 800b984:	d0f3      	beq.n	800b96e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800b986:	68a8      	ldr	r0, [r5, #8]
 800b988:	eb08 0304 	add.w	r3, r8, r4
 800b98c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b990:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800b994:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0e8      	beq.n	800b96e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b99c:	782b      	ldrb	r3, [r5, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1c9      	bne.n	800b936 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800b9a2:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d0c6      	beq.n	800b936 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800b9a8:	5a9b      	ldrh	r3, [r3, r2]
 800b9aa:	4123      	asrs	r3, r4
 800b9ac:	f013 0f01 	tst.w	r3, #1
 800b9b0:	d1c1      	bne.n	800b936 <RegionCommonCountNbOfEnabledChannels+0x18>
 800b9b2:	e7dc      	b.n	800b96e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800b9b4:	f10a 0a01 	add.w	sl, sl, #1
 800b9b8:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800b9bc:	e7d7      	b.n	800b96e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b9be:	f108 0810 	add.w	r8, r8, #16
 800b9c2:	fa5f f888 	uxtb.w	r8, r8
 800b9c6:	3601      	adds	r6, #1
 800b9c8:	b2f6      	uxtb	r6, r6
 800b9ca:	8a2b      	ldrh	r3, [r5, #16]
 800b9cc:	fa1f f288 	uxth.w	r2, r8
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d201      	bcs.n	800b9d8 <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 800b9d4:	2400      	movs	r4, #0
 800b9d6:	e7cc      	b.n	800b972 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800b9d8:	9b00      	ldr	r3, [sp, #0]
 800b9da:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	f883 a000 	strb.w	sl, [r3]
}
 800b9e4:	b003      	add	sp, #12
 800b9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9ea <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800b9ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	460f      	mov	r7, r1
 800b9f4:	4616      	mov	r6, r2
 800b9f6:	461d      	mov	r5, r3
 800b9f8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b9fc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800ba00:	6840      	ldr	r0, [r0, #4]
 800ba02:	f005 f915 	bl	8010c30 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	1a1b      	subs	r3, r3, r0
 800ba0a:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ba18:	6863      	ldr	r3, [r4, #4]
 800ba1a:	b113      	cbz	r3, 800ba22 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800ba1c:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ba1e:	4283      	cmp	r3, r0
 800ba20:	d81e      	bhi.n	800ba60 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800ba26:	69e3      	ldr	r3, [r4, #28]
 800ba28:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ba2c:	781f      	ldrb	r7, [r3, #0]
 800ba2e:	69a3      	ldr	r3, [r4, #24]
 800ba30:	9303      	str	r3, [sp, #12]
 800ba32:	ab01      	add	r3, sp, #4
 800ba34:	f104 020c 	add.w	r2, r4, #12
 800ba38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba3c:	e883 0003 	stmia.w	r3, {r0, r1}
 800ba40:	7d23      	ldrb	r3, [r4, #20]
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	7a23      	ldrb	r3, [r4, #8]
 800ba46:	7a62      	ldrb	r2, [r4, #9]
 800ba48:	4661      	mov	r1, ip
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	f7ff fe16 	bl	800b67c <RegionCommonUpdateBandTimeOff>
 800ba50:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800ba54:	4643      	mov	r3, r8
 800ba56:	462a      	mov	r2, r5
 800ba58:	4631      	mov	r1, r6
 800ba5a:	69e0      	ldr	r0, [r4, #28]
 800ba5c:	f7ff ff5f 	bl	800b91e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800ba60:	782b      	ldrb	r3, [r5, #0]
 800ba62:	b923      	cbnz	r3, 800ba6e <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800ba64:	f898 3000 	ldrb.w	r3, [r8]
 800ba68:	b13b      	cbz	r3, 800ba7a <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800ba6a:	200b      	movs	r0, #11
 800ba6c:	e002      	b.n	800ba74 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800ba6e:	2000      	movs	r0, #0
 800ba70:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800ba74:	b005      	add	sp, #20
 800ba76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800ba7a:	200c      	movs	r0, #12
 800ba7c:	e7fa      	b.n	800ba74 <RegionCommonIdentifyChannels+0x8a>

0800ba7e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800ba7e:	b570      	push	{r4, r5, r6, lr}
 800ba80:	b082      	sub	sp, #8
 800ba82:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800ba84:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800ba88:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800ba8c:	42a6      	cmp	r6, r4
 800ba8e:	d011      	beq.n	800bab4 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800ba90:	3c01      	subs	r4, #1
 800ba92:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800ba94:	42a6      	cmp	r6, r4
 800ba96:	d00e      	beq.n	800bab6 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800ba98:	68ab      	ldr	r3, [r5, #8]
 800ba9a:	9301      	str	r3, [sp, #4]
 800ba9c:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	4633      	mov	r3, r6
 800baa4:	4622      	mov	r2, r4
 800baa6:	6869      	ldr	r1, [r5, #4]
 800baa8:	78e8      	ldrb	r0, [r5, #3]
 800baaa:	f7ff fd54 	bl	800b556 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800baae:	2800      	cmp	r0, #0
 800bab0:	d0ee      	beq.n	800ba90 <RegionCommonGetNextLowerTxDr+0x12>
 800bab2:	e000      	b.n	800bab6 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800bab4:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800bab6:	4620      	mov	r0, r4
 800bab8:	b002      	add	sp, #8
 800baba:	bd70      	pop	{r4, r5, r6, pc}

0800babc <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800babc:	4288      	cmp	r0, r1
 800babe:	bfb8      	it	lt
 800bac0:	4608      	movlt	r0, r1
 800bac2:	4770      	bx	lr

0800bac4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800bac4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800bac8:	4a05      	ldr	r2, [pc, #20]	; (800bae0 <RegionCommonGetBandwidth+0x1c>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d004      	beq.n	800bad8 <RegionCommonGetBandwidth+0x14>
 800bace:	4a05      	ldr	r2, [pc, #20]	; (800bae4 <RegionCommonGetBandwidth+0x20>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d103      	bne.n	800badc <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800bad4:	2002      	movs	r0, #2
 800bad6:	4770      	bx	lr
            return 1;
 800bad8:	2001      	movs	r0, #1
 800bada:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800badc:	2000      	movs	r0, #0
    }
}
 800bade:	4770      	bx	lr
 800bae0:	0003d090 	.word	0x0003d090
 800bae4:	0007a120 	.word	0x0007a120

0800bae8 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	b08a      	sub	sp, #40	; 0x28
 800baec:	4686      	mov	lr, r0
 800baee:	460d      	mov	r5, r1
 800baf0:	4616      	mov	r6, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800baf2:	f10d 0c10 	add.w	ip, sp, #16
 800baf6:	4c12      	ldr	r4, [pc, #72]	; (800bb40 <RegionCommonRxConfigPrint+0x58>)
 800baf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bafa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bafe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bb02:	e88c 0003 	stmia.w	ip, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 800bb06:	f1be 0f05 	cmp.w	lr, #5
 800bb0a:	d80f      	bhi.n	800bb2c <RegionCommonRxConfigPrint+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800bb0c:	9602      	str	r6, [sp, #8]
 800bb0e:	9501      	str	r5, [sp, #4]
 800bb10:	ab0a      	add	r3, sp, #40	; 0x28
 800bb12:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800bb16:	f85e 3c18 	ldr.w	r3, [lr, #-24]
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <RegionCommonRxConfigPrint+0x5c>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	2100      	movs	r1, #0
 800bb22:	2002      	movs	r0, #2
 800bb24:	f004 fd76 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800bb28:	b00a      	add	sp, #40	; 0x28
 800bb2a:	bd70      	pop	{r4, r5, r6, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800bb2c:	9601      	str	r6, [sp, #4]
 800bb2e:	9500      	str	r5, [sp, #0]
 800bb30:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <RegionCommonRxConfigPrint+0x60>)
 800bb32:	2201      	movs	r2, #1
 800bb34:	2100      	movs	r1, #0
 800bb36:	2002      	movs	r0, #2
 800bb38:	f004 fd6c 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 800bb3c:	e7f4      	b.n	800bb28 <RegionCommonRxConfigPrint+0x40>
 800bb3e:	bf00      	nop
 800bb40:	080112ec 	.word	0x080112ec
 800bb44:	08011890 	.word	0x08011890
 800bb48:	080118b0 	.word	0x080118b0

0800bb4c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800bb4c:	b500      	push	{lr}
 800bb4e:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800bb50:	9101      	str	r1, [sp, #4]
 800bb52:	9000      	str	r0, [sp, #0]
 800bb54:	4b04      	ldr	r3, [pc, #16]	; (800bb68 <RegionCommonTxConfigPrint+0x1c>)
 800bb56:	2201      	movs	r2, #1
 800bb58:	2100      	movs	r1, #0
 800bb5a:	2002      	movs	r0, #2
 800bb5c:	f004 fd5a 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 800bb60:	b003      	add	sp, #12
 800bb62:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb66:	bf00      	nop
 800bb68:	080118cc 	.word	0x080118cc

0800bb6c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	4604      	mov	r4, r0
 800bb70:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800bb72:	4b1b      	ldr	r3, [pc, #108]	; (800bbe0 <VerifyRfFreq+0x74>)
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	4798      	blx	r3
 800bb78:	b130      	cbz	r0, 800bb88 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800bb7a:	4b1a      	ldr	r3, [pc, #104]	; (800bbe4 <VerifyRfFreq+0x78>)
 800bb7c:	4423      	add	r3, r4
 800bb7e:	4a1a      	ldr	r2, [pc, #104]	; (800bbe8 <VerifyRfFreq+0x7c>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d802      	bhi.n	800bb8a <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800bb84:	2302      	movs	r3, #2
 800bb86:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800bb88:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800bb8a:	4b18      	ldr	r3, [pc, #96]	; (800bbec <VerifyRfFreq+0x80>)
 800bb8c:	4423      	add	r3, r4
 800bb8e:	4a18      	ldr	r2, [pc, #96]	; (800bbf0 <VerifyRfFreq+0x84>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d802      	bhi.n	800bb9a <VerifyRfFreq+0x2e>
        *band = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	702b      	strb	r3, [r5, #0]
 800bb98:	e7f6      	b.n	800bb88 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800bb9a:	4b16      	ldr	r3, [pc, #88]	; (800bbf4 <VerifyRfFreq+0x88>)
 800bb9c:	4423      	add	r3, r4
 800bb9e:	4a16      	ldr	r2, [pc, #88]	; (800bbf8 <VerifyRfFreq+0x8c>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d802      	bhi.n	800bbaa <VerifyRfFreq+0x3e>
        *band = 1;
 800bba4:	2301      	movs	r3, #1
 800bba6:	702b      	strb	r3, [r5, #0]
 800bba8:	e7ee      	b.n	800bb88 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800bbaa:	4b14      	ldr	r3, [pc, #80]	; (800bbfc <VerifyRfFreq+0x90>)
 800bbac:	4423      	add	r3, r4
 800bbae:	4a14      	ldr	r2, [pc, #80]	; (800bc00 <VerifyRfFreq+0x94>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d802      	bhi.n	800bbba <VerifyRfFreq+0x4e>
        *band = 5;
 800bbb4:	2305      	movs	r3, #5
 800bbb6:	702b      	strb	r3, [r5, #0]
 800bbb8:	e7e6      	b.n	800bb88 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800bbba:	4b12      	ldr	r3, [pc, #72]	; (800bc04 <VerifyRfFreq+0x98>)
 800bbbc:	4423      	add	r3, r4
 800bbbe:	4a12      	ldr	r2, [pc, #72]	; (800bc08 <VerifyRfFreq+0x9c>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d802      	bhi.n	800bbca <VerifyRfFreq+0x5e>
        *band = 3;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	702b      	strb	r3, [r5, #0]
 800bbc8:	e7de      	b.n	800bb88 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800bbca:	4b10      	ldr	r3, [pc, #64]	; (800bc0c <VerifyRfFreq+0xa0>)
 800bbcc:	4423      	add	r3, r4
 800bbce:	4a10      	ldr	r2, [pc, #64]	; (800bc10 <VerifyRfFreq+0xa4>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d802      	bhi.n	800bbda <VerifyRfFreq+0x6e>
        *band = 4;
 800bbd4:	2304      	movs	r3, #4
 800bbd6:	702b      	strb	r3, [r5, #0]
 800bbd8:	e7d6      	b.n	800bb88 <VerifyRfFreq+0x1c>
        return false;
 800bbda:	2000      	movs	r0, #0
 800bbdc:	e7d4      	b.n	800bb88 <VerifyRfFreq+0x1c>
 800bbde:	bf00      	nop
 800bbe0:	08011ea4 	.word	0x08011ea4
 800bbe4:	cc8faa40 	.word	0xcc8faa40
 800bbe8:	001e847f 	.word	0x001e847f
 800bbec:	cc7125c0 	.word	0xcc7125c0
 800bbf0:	002dc6c0 	.word	0x002dc6c0
 800bbf4:	cc435eff 	.word	0xcc435eff
 800bbf8:	000927bf 	.word	0x000927bf
 800bbfc:	cc38b0a0 	.word	0xcc38b0a0
 800bc00:	0007a120 	.word	0x0007a120
 800bc04:	cc2e0240 	.word	0xcc2e0240
 800bc08:	0003d090 	.word	0x0003d090
 800bc0c:	cc296e60 	.word	0xcc296e60
 800bc10:	000493e0 	.word	0x000493e0

0800bc14 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	4605      	mov	r5, r0
 800bc1a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800bc1c:	4b13      	ldr	r3, [pc, #76]	; (800bc6c <GetTimeOnAir+0x58>)
 800bc1e:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800bc20:	4913      	ldr	r1, [pc, #76]	; (800bc70 <GetTimeOnAir+0x5c>)
 800bc22:	f7ff ff4f 	bl	800bac4 <RegionCommonGetBandwidth>
 800bc26:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800bc28:	2d07      	cmp	r5, #7
 800bc2a:	d00e      	beq.n	800bc4a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800bc2c:	4b11      	ldr	r3, [pc, #68]	; (800bc74 <GetTimeOnAir+0x60>)
 800bc2e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bc30:	2001      	movs	r0, #1
 800bc32:	9003      	str	r0, [sp, #12]
 800bc34:	b2e4      	uxtb	r4, r4
 800bc36:	9402      	str	r4, [sp, #8]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	9301      	str	r3, [sp, #4]
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	4603      	mov	r3, r0
 800bc42:	4632      	mov	r2, r6
 800bc44:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800bc46:	b004      	add	sp, #16
 800bc48:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800bc4a:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <GetTimeOnAir+0x60>)
 800bc4c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bc4e:	2301      	movs	r3, #1
 800bc50:	9303      	str	r3, [sp, #12]
 800bc52:	b2e4      	uxtb	r4, r4
 800bc54:	9402      	str	r4, [sp, #8]
 800bc56:	2000      	movs	r0, #0
 800bc58:	9001      	str	r0, [sp, #4]
 800bc5a:	2305      	movs	r3, #5
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	4603      	mov	r3, r0
 800bc60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc64:	fb06 f202 	mul.w	r2, r6, r2
 800bc68:	47a8      	blx	r5
 800bc6a:	e7ec      	b.n	800bc46 <GetTimeOnAir+0x32>
 800bc6c:	0801191c 	.word	0x0801191c
 800bc70:	080118fc 	.word	0x080118fc
 800bc74:	08011ea4 	.word	0x08011ea4

0800bc78 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800bc78:	b500      	push	{lr}
 800bc7a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800bc80:	7803      	ldrb	r3, [r0, #0]
 800bc82:	3b0b      	subs	r3, #11
 800bc84:	2b2e      	cmp	r3, #46	; 0x2e
 800bc86:	d830      	bhi.n	800bcea <RegionEU868GetPhyParam+0x72>
 800bc88:	e8df f003 	tbb	[pc, r3]
 800bc8c:	403a3734 	.word	0x403a3734
 800bc90:	514d4946 	.word	0x514d4946
 800bc94:	615d5955 	.word	0x615d5955
 800bc98:	6d2f6a2f 	.word	0x6d2f6a2f
 800bc9c:	2f7c7973 	.word	0x2f7c7973
 800bca0:	1884802f 	.word	0x1884802f
 800bca4:	2f2f2f2f 	.word	0x2f2f2f2f
 800bca8:	2f2f2f2f 	.word	0x2f2f2f2f
 800bcac:	2f2f2f2f 	.word	0x2f2f2f2f
 800bcb0:	918a872f 	.word	0x918a872f
 800bcb4:	97942f2f 	.word	0x97942f2f
 800bcb8:	9a2f      	.short	0x9a2f
 800bcba:	a0          	.byte	0xa0
 800bcbb:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800bcbc:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800bcc0:	f88d 3004 	strb.w	r3, [sp, #4]
 800bcc4:	2307      	movs	r3, #7
 800bcc6:	f88d 3005 	strb.w	r3, [sp, #5]
 800bcca:	2300      	movs	r3, #0
 800bccc:	f88d 3006 	strb.w	r3, [sp, #6]
 800bcd0:	2310      	movs	r3, #16
 800bcd2:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800bcd6:	4b41      	ldr	r3, [pc, #260]	; (800bddc <RegionEU868GetPhyParam+0x164>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800bcde:	9202      	str	r2, [sp, #8]
 800bce0:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800bce2:	a801      	add	r0, sp, #4
 800bce4:	f7ff fecb 	bl	800ba7e <RegionCommonGetNextLowerTxDr>
 800bce8:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800bcea:	9804      	ldr	r0, [sp, #16]
 800bcec:	9005      	str	r0, [sp, #20]
}
 800bcee:	b007      	add	sp, #28
 800bcf0:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800bcf4:	2340      	movs	r3, #64	; 0x40
 800bcf6:	9304      	str	r3, [sp, #16]
            break;
 800bcf8:	e7f7      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800bcfa:	2320      	movs	r3, #32
 800bcfc:	9304      	str	r3, [sp, #16]
            break;
 800bcfe:	e7f4      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800bd00:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bd04:	4a36      	ldr	r2, [pc, #216]	; (800bde0 <RegionEU868GetPhyParam+0x168>)
 800bd06:	5cd3      	ldrb	r3, [r2, r3]
 800bd08:	9304      	str	r3, [sp, #16]
            break;
 800bd0a:	e7ee      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800bd0c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bd10:	4a34      	ldr	r2, [pc, #208]	; (800bde4 <RegionEU868GetPhyParam+0x16c>)
 800bd12:	5cd3      	ldrb	r3, [r2, r3]
 800bd14:	9304      	str	r3, [sp, #16]
            break;
 800bd16:	e7e8      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	9304      	str	r3, [sp, #16]
            break;
 800bd1c:	e7e5      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800bd1e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bd22:	9304      	str	r3, [sp, #16]
            break;
 800bd24:	e7e1      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800bd26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd2a:	9304      	str	r3, [sp, #16]
            break;
 800bd2c:	e7dd      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800bd2e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bd32:	9304      	str	r3, [sp, #16]
            break;
 800bd34:	e7d9      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800bd36:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd3a:	9304      	str	r3, [sp, #16]
            break;
 800bd3c:	e7d5      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800bd3e:	f241 7370 	movw	r3, #6000	; 0x1770
 800bd42:	9304      	str	r3, [sp, #16]
            break;
 800bd44:	e7d1      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800bd46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bd4a:	9304      	str	r3, [sp, #16]
            break;
 800bd4c:	e7cd      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800bd4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bd52:	4825      	ldr	r0, [pc, #148]	; (800bde8 <RegionEU868GetPhyParam+0x170>)
 800bd54:	f002 fabc 	bl	800e2d0 <randr>
 800bd58:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800bd5c:	9004      	str	r0, [sp, #16]
            break;
 800bd5e:	e7c4      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800bd60:	4b22      	ldr	r3, [pc, #136]	; (800bdec <RegionEU868GetPhyParam+0x174>)
 800bd62:	9304      	str	r3, [sp, #16]
            break;
 800bd64:	e7c1      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bd66:	4b1d      	ldr	r3, [pc, #116]	; (800bddc <RegionEU868GetPhyParam+0x164>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800bd6e:	9304      	str	r3, [sp, #16]
            break;
 800bd70:	e7bb      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800bd72:	4b1a      	ldr	r3, [pc, #104]	; (800bddc <RegionEU868GetPhyParam+0x164>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800bd7a:	9304      	str	r3, [sp, #16]
            break;
 800bd7c:	e7b5      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800bd7e:	2310      	movs	r3, #16
 800bd80:	9304      	str	r3, [sp, #16]
            break;
 800bd82:	e7b2      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800bd84:	4b15      	ldr	r3, [pc, #84]	; (800bddc <RegionEU868GetPhyParam+0x164>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	9304      	str	r3, [sp, #16]
            break;
 800bd8a:	e7ae      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800bd8c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800bd90:	9304      	str	r3, [sp, #16]
            break;
 800bd92:	e7aa      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800bd94:	4b16      	ldr	r3, [pc, #88]	; (800bdf0 <RegionEU868GetPhyParam+0x178>)
 800bd96:	9304      	str	r3, [sp, #16]
            break;
 800bd98:	e7a7      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800bd9a:	4b14      	ldr	r3, [pc, #80]	; (800bdec <RegionEU868GetPhyParam+0x174>)
 800bd9c:	9304      	str	r3, [sp, #16]
            break;
 800bd9e:	e7a4      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800bda0:	2311      	movs	r3, #17
 800bda2:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800bda6:	2302      	movs	r3, #2
 800bda8:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800bdac:	e79d      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	9304      	str	r3, [sp, #16]
            break;
 800bdb2:	e79a      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800bdb4:	4b0d      	ldr	r3, [pc, #52]	; (800bdec <RegionEU868GetPhyParam+0x174>)
 800bdb6:	9304      	str	r3, [sp, #16]
            break;
 800bdb8:	e797      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	9304      	str	r3, [sp, #16]
            break;
 800bdbe:	e794      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800bdc0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bdc4:	4a0b      	ldr	r2, [pc, #44]	; (800bdf4 <RegionEU868GetPhyParam+0x17c>)
 800bdc6:	5cd3      	ldrb	r3, [r2, r3]
 800bdc8:	9304      	str	r3, [sp, #16]
            break;
 800bdca:	e78e      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800bdcc:	490a      	ldr	r1, [pc, #40]	; (800bdf8 <RegionEU868GetPhyParam+0x180>)
 800bdce:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800bdd2:	f7ff fe77 	bl	800bac4 <RegionCommonGetBandwidth>
 800bdd6:	9004      	str	r0, [sp, #16]
            break;
 800bdd8:	e787      	b.n	800bcea <RegionEU868GetPhyParam+0x72>
 800bdda:	bf00      	nop
 800bddc:	200011dc 	.word	0x200011dc
 800bde0:	08011924 	.word	0x08011924
 800bde4:	0801192c 	.word	0x0801192c
 800bde8:	fffffc18 	.word	0xfffffc18
 800bdec:	33d3e608 	.word	0x33d3e608
 800bdf0:	4009999a 	.word	0x4009999a
 800bdf4:	0801191c 	.word	0x0801191c
 800bdf8:	080118fc 	.word	0x080118fc

0800bdfc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800bdfc:	b510      	push	{r4, lr}
 800bdfe:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800be00:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <RegionEU868SetBandTxDone+0x34>)
 800be02:	681c      	ldr	r4, [r3, #0]
 800be04:	4b0b      	ldr	r3, [pc, #44]	; (800be34 <RegionEU868SetBandTxDone+0x38>)
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	7803      	ldrb	r3, [r0, #0]
 800be0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800be0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be12:	7a5b      	ldrb	r3, [r3, #9]
 800be14:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800be18:	6903      	ldr	r3, [r0, #16]
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	68c3      	ldr	r3, [r0, #12]
 800be1e:	7842      	ldrb	r2, [r0, #1]
 800be20:	6881      	ldr	r1, [r0, #8]
 800be22:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800be26:	f7ff fc0f 	bl	800b648 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 800be2a:	b002      	add	sp, #8
 800be2c:	bd10      	pop	{r4, pc}
 800be2e:	bf00      	nop
 800be30:	200011d8 	.word	0x200011d8
 800be34:	200011dc 	.word	0x200011dc

0800be38 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800be38:	b510      	push	{r4, lr}
 800be3a:	b0a4      	sub	sp, #144	; 0x90
 800be3c:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800be3e:	2290      	movs	r2, #144	; 0x90
 800be40:	2100      	movs	r1, #0
 800be42:	4668      	mov	r0, sp
 800be44:	f005 f98c 	bl	8011160 <memset>
 800be48:	2364      	movs	r3, #100	; 0x64
 800be4a:	f8ad 3000 	strh.w	r3, [sp]
 800be4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800be52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be56:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800be5a:	210a      	movs	r1, #10
 800be5c:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800be60:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800be64:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800be68:	7a23      	ldrb	r3, [r4, #8]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d031      	beq.n	800bed2 <RegionEU868InitDefaults+0x9a>
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d03d      	beq.n	800beee <RegionEU868InitDefaults+0xb6>
 800be72:	b10b      	cbz	r3, 800be78 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800be74:	b024      	add	sp, #144	; 0x90
 800be76:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800be78:	6820      	ldr	r0, [r4, #0]
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d0fa      	beq.n	800be74 <RegionEU868InitDefaults+0x3c>
 800be7e:	6863      	ldr	r3, [r4, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d0f7      	beq.n	800be74 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800be84:	4a1f      	ldr	r2, [pc, #124]	; (800bf04 <RegionEU868InitDefaults+0xcc>)
 800be86:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800be88:	4c1f      	ldr	r4, [pc, #124]	; (800bf08 <RegionEU868InitDefaults+0xd0>)
 800be8a:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800be8c:	2290      	movs	r2, #144	; 0x90
 800be8e:	4669      	mov	r1, sp
 800be90:	f002 fa2b 	bl	800e2ea <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800be94:	6824      	ldr	r4, [r4, #0]
 800be96:	4b1d      	ldr	r3, [pc, #116]	; (800bf0c <RegionEU868InitDefaults+0xd4>)
 800be98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800bea0:	f104 0c0c 	add.w	ip, r4, #12
 800bea4:	f103 020c 	add.w	r2, r3, #12
 800bea8:	ca07      	ldmia	r2, {r0, r1, r2}
 800beaa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800beae:	f104 0c18 	add.w	ip, r4, #24
 800beb2:	3318      	adds	r3, #24
 800beb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800beb8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800bebc:	2307      	movs	r3, #7
 800bebe:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bec2:	2201      	movs	r2, #1
 800bec4:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800bec8:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800becc:	f7ff fbad 	bl	800b62a <RegionCommonChanMaskCopy>
            break;
 800bed0:	e7d0      	b.n	800be74 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800bed2:	4b0d      	ldr	r3, [pc, #52]	; (800bf08 <RegionEU868InitDefaults+0xd0>)
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	2300      	movs	r3, #0
 800bed8:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800beda:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800bedc:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bede:	2201      	movs	r2, #1
 800bee0:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800bee4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800bee8:	f7ff fb9f 	bl	800b62a <RegionCommonChanMaskCopy>
            break;
 800beec:	e7c2      	b.n	800be74 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800beee:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <RegionEU868InitDefaults+0xd0>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800bef6:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800befa:	430a      	orrs	r2, r1
 800befc:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800bf00:	e7b8      	b.n	800be74 <RegionEU868InitDefaults+0x3c>
 800bf02:	bf00      	nop
 800bf04:	200011d8 	.word	0x200011d8
 800bf08:	200011dc 	.word	0x200011dc
 800bf0c:	08011304 	.word	0x08011304

0800bf10 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800bf10:	b500      	push	{lr}
 800bf12:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800bf14:	290f      	cmp	r1, #15
 800bf16:	d83c      	bhi.n	800bf92 <RegionEU868Verify+0x82>
 800bf18:	e8df f001 	tbb	[pc, r1]
 800bf1c:	3b3b3b0a 	.word	0x3b3b3b0a
 800bf20:	271d133b 	.word	0x271d133b
 800bf24:	3b31313b 	.word	0x3b31313b
 800bf28:	083b3b3b 	.word	0x083b3b3b
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	e031      	b.n	800bf94 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800bf36:	f10d 0107 	add.w	r1, sp, #7
 800bf3a:	6800      	ldr	r0, [r0, #0]
 800bf3c:	f7ff fe16 	bl	800bb6c <VerifyRfFreq>
 800bf40:	e028      	b.n	800bf94 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800bf42:	2207      	movs	r2, #7
 800bf44:	2100      	movs	r1, #0
 800bf46:	f990 0000 	ldrsb.w	r0, [r0]
 800bf4a:	f7ff fafa 	bl	800b542 <RegionCommonValueInRange>
 800bf4e:	3800      	subs	r0, #0
 800bf50:	bf18      	it	ne
 800bf52:	2001      	movne	r0, #1
 800bf54:	e01e      	b.n	800bf94 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800bf56:	2205      	movs	r2, #5
 800bf58:	2100      	movs	r1, #0
 800bf5a:	f990 0000 	ldrsb.w	r0, [r0]
 800bf5e:	f7ff faf0 	bl	800b542 <RegionCommonValueInRange>
 800bf62:	3800      	subs	r0, #0
 800bf64:	bf18      	it	ne
 800bf66:	2001      	movne	r0, #1
 800bf68:	e014      	b.n	800bf94 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800bf6a:	2207      	movs	r2, #7
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	f990 0000 	ldrsb.w	r0, [r0]
 800bf72:	f7ff fae6 	bl	800b542 <RegionCommonValueInRange>
 800bf76:	3800      	subs	r0, #0
 800bf78:	bf18      	it	ne
 800bf7a:	2001      	movne	r0, #1
 800bf7c:	e00a      	b.n	800bf94 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800bf7e:	2207      	movs	r2, #7
 800bf80:	2100      	movs	r1, #0
 800bf82:	f990 0000 	ldrsb.w	r0, [r0]
 800bf86:	f7ff fadc 	bl	800b542 <RegionCommonValueInRange>
 800bf8a:	3800      	subs	r0, #0
 800bf8c:	bf18      	it	ne
 800bf8e:	2001      	movne	r0, #1
 800bf90:	e000      	b.n	800bf94 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800bf92:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800bf94:	b003      	add	sp, #12
 800bf96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bf9c <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800bf9c:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800bf9e:	7903      	ldrb	r3, [r0, #4]
 800bfa0:	b11b      	cbz	r3, 800bfaa <RegionEU868ChanMaskSet+0xe>
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d00b      	beq.n	800bfbe <RegionEU868ChanMaskSet+0x22>
 800bfa6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800bfa8:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800bfaa:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <RegionEU868ChanMaskSet+0x38>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	6801      	ldr	r1, [r0, #0]
 800bfb2:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800bfb6:	f7ff fb38 	bl	800b62a <RegionCommonChanMaskCopy>
    return true;
 800bfba:	2001      	movs	r0, #1
            break;
 800bfbc:	e7f4      	b.n	800bfa8 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800bfbe:	4b05      	ldr	r3, [pc, #20]	; (800bfd4 <RegionEU868ChanMaskSet+0x38>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	6801      	ldr	r1, [r0, #0]
 800bfc6:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800bfca:	f7ff fb2e 	bl	800b62a <RegionCommonChanMaskCopy>
    return true;
 800bfce:	2001      	movs	r0, #1
            break;
 800bfd0:	e7ea      	b.n	800bfa8 <RegionEU868ChanMaskSet+0xc>
 800bfd2:	bf00      	nop
 800bfd4:	200011dc 	.word	0x200011dc

0800bfd8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800bfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	460e      	mov	r6, r1
 800bfde:	4617      	mov	r7, r2
 800bfe0:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800bfe2:	2807      	cmp	r0, #7
 800bfe4:	bfa8      	it	ge
 800bfe6:	2007      	movge	r0, #7
 800bfe8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bfea:	4913      	ldr	r1, [pc, #76]	; (800c038 <RegionEU868ComputeRxWindowParameters+0x60>)
 800bfec:	f7ff fd6a 	bl	800bac4 <RegionCommonGetBandwidth>
 800bff0:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800bff2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800bff6:	2b07      	cmp	r3, #7
 800bff8:	d017      	beq.n	800c02a <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800bffa:	4a0f      	ldr	r2, [pc, #60]	; (800c038 <RegionEU868ComputeRxWindowParameters+0x60>)
 800bffc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c000:	4a0e      	ldr	r2, [pc, #56]	; (800c03c <RegionEU868ComputeRxWindowParameters+0x64>)
 800c002:	5cd0      	ldrb	r0, [r2, r3]
 800c004:	f7ff fc2c 	bl	800b860 <RegionCommonComputeSymbolTimeLoRa>
 800c008:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c00a:	4b0d      	ldr	r3, [pc, #52]	; (800c040 <RegionEU868ComputeRxWindowParameters+0x68>)
 800c00c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c00e:	4798      	blx	r3
 800c010:	4603      	mov	r3, r0
 800c012:	f104 020c 	add.w	r2, r4, #12
 800c016:	9201      	str	r2, [sp, #4]
 800c018:	3408      	adds	r4, #8
 800c01a:	9400      	str	r4, [sp, #0]
 800c01c:	463a      	mov	r2, r7
 800c01e:	4631      	mov	r1, r6
 800c020:	4628      	mov	r0, r5
 800c022:	f7ff fc2b 	bl	800b87c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800c026:	b003      	add	sp, #12
 800c028:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800c02a:	4a04      	ldr	r2, [pc, #16]	; (800c03c <RegionEU868ComputeRxWindowParameters+0x64>)
 800c02c:	5cd0      	ldrb	r0, [r2, r3]
 800c02e:	f7ff fc1f 	bl	800b870 <RegionCommonComputeSymbolTimeFsk>
 800c032:	4605      	mov	r5, r0
 800c034:	e7e9      	b.n	800c00a <RegionEU868ComputeRxWindowParameters+0x32>
 800c036:	bf00      	nop
 800c038:	080118fc 	.word	0x080118fc
 800c03c:	0801191c 	.word	0x0801191c
 800c040:	08011ea4 	.word	0x08011ea4

0800c044 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c048:	b08a      	sub	sp, #40	; 0x28
 800c04a:	4604      	mov	r4, r0
 800c04c:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800c04e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800c052:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800c056:	4b37      	ldr	r3, [pc, #220]	; (800c134 <RegionEU868RxConfig+0xf0>)
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	4798      	blx	r3
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d167      	bne.n	800c130 <RegionEU868RxConfig+0xec>
 800c060:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800c062:	7ce3      	ldrb	r3, [r4, #19]
 800c064:	b983      	cbnz	r3, 800c088 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c066:	4b34      	ldr	r3, [pc, #208]	; (800c138 <RegionEU868RxConfig+0xf4>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	7823      	ldrb	r3, [r4, #0]
 800c06c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c070:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800c074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c078:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c07c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800c080:	f1b8 0f00 	cmp.w	r8, #0
 800c084:	d100      	bne.n	800c088 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c086:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800c088:	4b2c      	ldr	r3, [pc, #176]	; (800c13c <RegionEU868RxConfig+0xf8>)
 800c08a:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800c08e:	4b29      	ldr	r3, [pc, #164]	; (800c134 <RegionEU868RxConfig+0xf0>)
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	4640      	mov	r0, r8
 800c094:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800c096:	2d07      	cmp	r5, #7
 800c098:	d02b      	beq.n	800c0f2 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c09a:	4b26      	ldr	r3, [pc, #152]	; (800c134 <RegionEU868RxConfig+0xf0>)
 800c09c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c0a0:	7ca3      	ldrb	r3, [r4, #18]
 800c0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c0a4:	2601      	movs	r6, #1
 800c0a6:	9608      	str	r6, [sp, #32]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	9307      	str	r3, [sp, #28]
 800c0ac:	9306      	str	r3, [sp, #24]
 800c0ae:	9305      	str	r3, [sp, #20]
 800c0b0:	9304      	str	r3, [sp, #16]
 800c0b2:	9303      	str	r3, [sp, #12]
 800c0b4:	8922      	ldrh	r2, [r4, #8]
 800c0b6:	9202      	str	r2, [sp, #8]
 800c0b8:	2208      	movs	r2, #8
 800c0ba:	9201      	str	r2, [sp, #4]
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	4633      	mov	r3, r6
 800c0c0:	464a      	mov	r2, r9
 800c0c2:	78a1      	ldrb	r1, [r4, #2]
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800c0c8:	7c63      	ldrb	r3, [r4, #17]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d02d      	beq.n	800c12a <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800c0ce:	4b1c      	ldr	r3, [pc, #112]	; (800c140 <RegionEU868RxConfig+0xfc>)
 800c0d0:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800c0d2:	4b18      	ldr	r3, [pc, #96]	; (800c134 <RegionEU868RxConfig+0xf0>)
 800c0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d6:	310d      	adds	r1, #13
 800c0d8:	b2c9      	uxtb	r1, r1
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800c0de:	462a      	mov	r2, r5
 800c0e0:	4641      	mov	r1, r8
 800c0e2:	7ce0      	ldrb	r0, [r4, #19]
 800c0e4:	f7ff fd00 	bl	800bae8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800c0e8:	703d      	strb	r5, [r7, #0]
    return true;
 800c0ea:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800c0ec:	b00a      	add	sp, #40	; 0x28
 800c0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800c0f2:	4b10      	ldr	r3, [pc, #64]	; (800c134 <RegionEU868RxConfig+0xf0>)
 800c0f4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c0f8:	7ca3      	ldrb	r3, [r4, #18]
 800c0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	9008      	str	r0, [sp, #32]
 800c100:	9007      	str	r0, [sp, #28]
 800c102:	9006      	str	r0, [sp, #24]
 800c104:	2301      	movs	r3, #1
 800c106:	9305      	str	r3, [sp, #20]
 800c108:	9004      	str	r0, [sp, #16]
 800c10a:	9003      	str	r0, [sp, #12]
 800c10c:	8923      	ldrh	r3, [r4, #8]
 800c10e:	9302      	str	r3, [sp, #8]
 800c110:	2305      	movs	r3, #5
 800c112:	9301      	str	r3, [sp, #4]
 800c114:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <RegionEU868RxConfig+0x100>)
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	4603      	mov	r3, r0
 800c11a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c11e:	fb02 f209 	mul.w	r2, r2, r9
 800c122:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c126:	47d0      	blx	sl
 800c128:	e7ce      	b.n	800c0c8 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800c12a:	4b07      	ldr	r3, [pc, #28]	; (800c148 <RegionEU868RxConfig+0x104>)
 800c12c:	5d59      	ldrb	r1, [r3, r5]
 800c12e:	e7d0      	b.n	800c0d2 <RegionEU868RxConfig+0x8e>
        return false;
 800c130:	2000      	movs	r0, #0
 800c132:	e7db      	b.n	800c0ec <RegionEU868RxConfig+0xa8>
 800c134:	08011ea4 	.word	0x08011ea4
 800c138:	200011dc 	.word	0x200011dc
 800c13c:	0801191c 	.word	0x0801191c
 800c140:	0801192c 	.word	0x0801192c
 800c144:	00014585 	.word	0x00014585
 800c148:	08011924 	.word	0x08011924

0800c14c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c150:	b08d      	sub	sp, #52	; 0x34
 800c152:	4604      	mov	r4, r0
 800c154:	460f      	mov	r7, r1
 800c156:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800c158:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c15c:	4a42      	ldr	r2, [pc, #264]	; (800c268 <RegionEU868TxConfig+0x11c>)
 800c15e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800c162:	4b42      	ldr	r3, [pc, #264]	; (800c26c <RegionEU868TxConfig+0x120>)
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	4d42      	ldr	r5, [pc, #264]	; (800c270 <RegionEU868TxConfig+0x124>)
 800c168:	6829      	ldr	r1, [r5, #0]
 800c16a:	7803      	ldrb	r3, [r0, #0]
 800c16c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c170:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c174:	7a4b      	ldrb	r3, [r1, #9]
 800c176:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c17a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c17e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800c182:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c186:	f7ff fc99 	bl	800babc <RegionCommonLimitTxPower>
 800c18a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800c18c:	4939      	ldr	r1, [pc, #228]	; (800c274 <RegionEU868TxConfig+0x128>)
 800c18e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c192:	f7ff fc97 	bl	800bac4 <RegionCommonGetBandwidth>
 800c196:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c198:	68a2      	ldr	r2, [r4, #8]
 800c19a:	6861      	ldr	r1, [r4, #4]
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7ff fba9 	bl	800b8f4 <RegionCommonComputeTxPower>
 800c1a2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800c1a4:	4b34      	ldr	r3, [pc, #208]	; (800c278 <RegionEU868TxConfig+0x12c>)
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	6829      	ldr	r1, [r5, #0]
 800c1aa:	7823      	ldrb	r3, [r4, #0]
 800c1ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c1b0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800c1b4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800c1b6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c1ba:	2b07      	cmp	r3, #7
 800c1bc:	d031      	beq.n	800c222 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800c1be:	4b2e      	ldr	r3, [pc, #184]	; (800c278 <RegionEU868TxConfig+0x12c>)
 800c1c0:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800c1c4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800c1c8:	9308      	str	r3, [sp, #32]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	9207      	str	r2, [sp, #28]
 800c1ce:	9206      	str	r2, [sp, #24]
 800c1d0:	9205      	str	r2, [sp, #20]
 800c1d2:	2501      	movs	r5, #1
 800c1d4:	9504      	str	r5, [sp, #16]
 800c1d6:	9203      	str	r2, [sp, #12]
 800c1d8:	2308      	movs	r3, #8
 800c1da:	9302      	str	r3, [sp, #8]
 800c1dc:	9501      	str	r5, [sp, #4]
 800c1de:	f8cd a000 	str.w	sl, [sp]
 800c1e2:	464b      	mov	r3, r9
 800c1e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800c1ea:	4b21      	ldr	r3, [pc, #132]	; (800c270 <RegionEU868TxConfig+0x124>)
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	7823      	ldrb	r3, [r4, #0]
 800c1f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c1f4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800c1f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c1fc:	f7ff fca6 	bl	800bb4c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800c200:	89a1      	ldrh	r1, [r4, #12]
 800c202:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c206:	f7ff fd05 	bl	800bc14 <GetTimeOnAir>
 800c20a:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800c20e:	4b1a      	ldr	r3, [pc, #104]	; (800c278 <RegionEU868TxConfig+0x12c>)
 800c210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c212:	7b21      	ldrb	r1, [r4, #12]
 800c214:	4628      	mov	r0, r5
 800c216:	4798      	blx	r3

    *txPower = txPowerLimited;
 800c218:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800c21a:	2001      	movs	r0, #1
 800c21c:	b00d      	add	sp, #52	; 0x34
 800c21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800c222:	4b15      	ldr	r3, [pc, #84]	; (800c278 <RegionEU868TxConfig+0x12c>)
 800c224:	69dd      	ldr	r5, [r3, #28]
 800c226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c22a:	fb03 f30a 	mul.w	r3, r3, sl
 800c22e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c232:	9208      	str	r2, [sp, #32]
 800c234:	f04f 0a00 	mov.w	sl, #0
 800c238:	f8cd a01c 	str.w	sl, [sp, #28]
 800c23c:	f8cd a018 	str.w	sl, [sp, #24]
 800c240:	f8cd a014 	str.w	sl, [sp, #20]
 800c244:	2201      	movs	r2, #1
 800c246:	9204      	str	r2, [sp, #16]
 800c248:	f8cd a00c 	str.w	sl, [sp, #12]
 800c24c:	2205      	movs	r2, #5
 800c24e:	9202      	str	r2, [sp, #8]
 800c250:	f8cd a004 	str.w	sl, [sp, #4]
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	464b      	mov	r3, r9
 800c258:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800c25c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c25e:	4650      	mov	r0, sl
 800c260:	47a8      	blx	r5
        modem = MODEM_FSK;
 800c262:	4655      	mov	r5, sl
 800c264:	e7c1      	b.n	800c1ea <RegionEU868TxConfig+0x9e>
 800c266:	bf00      	nop
 800c268:	0801191c 	.word	0x0801191c
 800c26c:	200011d8 	.word	0x200011d8
 800c270:	200011dc 	.word	0x200011dc
 800c274:	080118fc 	.word	0x080118fc
 800c278:	08011ea4 	.word	0x08011ea4

0800c27c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c280:	b08f      	sub	sp, #60	; 0x3c
 800c282:	4605      	mov	r5, r0
 800c284:	4689      	mov	r9, r1
 800c286:	4690      	mov	r8, r2
 800c288:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800c28a:	2400      	movs	r4, #0
 800c28c:	940c      	str	r4, [sp, #48]	; 0x30
 800c28e:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800c292:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800c296:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c298:	e030      	b.n	800c2fc <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800c29a:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800c29e:	2607      	movs	r6, #7
 800c2a0:	e012      	b.n	800c2c8 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800c2a2:	4a58      	ldr	r2, [pc, #352]	; (800c404 <RegionEU868LinkAdrReq+0x188>)
 800c2a4:	6812      	ldr	r2, [r2, #0]
 800c2a6:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800c2aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c2ae:	b13a      	cbz	r2, 800c2c0 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	fa02 f20c 	lsl.w	r2, r2, ip
 800c2b6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800c2ba:	430a      	orrs	r2, r1
 800c2bc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800c2c0:	f10c 0c01 	add.w	ip, ip, #1
 800c2c4:	fa5f fc8c 	uxtb.w	ip, ip
 800c2c8:	f1bc 0f0f 	cmp.w	ip, #15
 800c2cc:	d816      	bhi.n	800c2fc <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800c2ce:	2b06      	cmp	r3, #6
 800c2d0:	d0e7      	beq.n	800c2a2 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c2d2:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800c2d6:	fa4e fe0c 	asr.w	lr, lr, ip
 800c2da:	f01e 0f01 	tst.w	lr, #1
 800c2de:	d0ef      	beq.n	800c2c0 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800c2e0:	4a48      	ldr	r2, [pc, #288]	; (800c404 <RegionEU868LinkAdrReq+0x188>)
 800c2e2:	6812      	ldr	r2, [r2, #0]
 800c2e4:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800c2e8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c2ec:	2a00      	cmp	r2, #0
 800c2ee:	d1e7      	bne.n	800c2c0 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800c2f0:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800c2f4:	e7e4      	b.n	800c2c0 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800c2f6:	2606      	movs	r6, #6
 800c2f8:	e000      	b.n	800c2fc <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800c2fa:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c2fc:	7a2b      	ldrb	r3, [r5, #8]
 800c2fe:	42a3      	cmp	r3, r4
 800c300:	d919      	bls.n	800c336 <RegionEU868LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800c302:	6868      	ldr	r0, [r5, #4]
 800c304:	a90c      	add	r1, sp, #48	; 0x30
 800c306:	4420      	add	r0, r4
 800c308:	f7ff fa40 	bl	800b78c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800c30c:	4603      	mov	r3, r0
 800c30e:	b190      	cbz	r0, 800c336 <RegionEU868LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800c310:	4423      	add	r3, r4
 800c312:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800c314:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800c318:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800c31c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c320:	b90b      	cbnz	r3, 800c326 <RegionEU868LinkAdrReq+0xaa>
 800c322:	2a00      	cmp	r2, #0
 800c324:	d0e7      	beq.n	800c2f6 <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800c326:	1e5a      	subs	r2, r3, #1
 800c328:	b2d2      	uxtb	r2, r2
 800c32a:	2a04      	cmp	r2, #4
 800c32c:	d9e5      	bls.n	800c2fa <RegionEU868LinkAdrReq+0x7e>
 800c32e:	2b06      	cmp	r3, #6
 800c330:	d9b3      	bls.n	800c29a <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800c332:	2606      	movs	r6, #6
 800c334:	e7e2      	b.n	800c2fc <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c336:	2302      	movs	r3, #2
 800c338:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800c33c:	7a6b      	ldrb	r3, [r5, #9]
 800c33e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800c342:	a80a      	add	r0, sp, #40	; 0x28
 800c344:	f7ff fc98 	bl	800bc78 <RegionEU868GetPhyParam>
 800c348:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800c34a:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800c34e:	7aab      	ldrb	r3, [r5, #10]
 800c350:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800c354:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800c358:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800c35c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800c360:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800c364:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c368:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800c36c:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800c370:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800c374:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800c378:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800c37c:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800c380:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800c384:	2310      	movs	r3, #16
 800c386:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800c38a:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800c38e:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800c390:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800c394:	2307      	movs	r3, #7
 800c396:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800c39a:	4a1a      	ldr	r2, [pc, #104]	; (800c404 <RegionEU868LinkAdrReq+0x188>)
 800c39c:	6812      	ldr	r2, [r2, #0]
 800c39e:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800c3a0:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800c3aa:	682b      	ldr	r3, [r5, #0]
 800c3ac:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800c3ae:	ab0c      	add	r3, sp, #48	; 0x30
 800c3b0:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800c3b4:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800c3b8:	a801      	add	r0, sp, #4
 800c3ba:	f7ff fa05 	bl	800b7c8 <RegionCommonLinkAdrReqVerifyParams>
 800c3be:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800c3c0:	2807      	cmp	r0, #7
 800c3c2:	d010      	beq.n	800c3e6 <RegionEU868LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800c3c4:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800c3c8:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800c3cc:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800c3d0:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800c3d4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c3d8:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800c3da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c3dc:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800c3de:	4628      	mov	r0, r5
 800c3e0:	b00f      	add	sp, #60	; 0x3c
 800c3e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800c3e6:	4e07      	ldr	r6, [pc, #28]	; (800c404 <RegionEU868LinkAdrReq+0x188>)
 800c3e8:	6830      	ldr	r0, [r6, #0]
 800c3ea:	220c      	movs	r2, #12
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800c3f2:	f001 ff92 	bl	800e31a <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800c3f6:	6833      	ldr	r3, [r6, #0]
 800c3f8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800c3fc:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800c400:	e7e0      	b.n	800c3c4 <RegionEU868LinkAdrReq+0x148>
 800c402:	bf00      	nop
 800c404:	200011dc 	.word	0x200011dc

0800c408 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c408:	b530      	push	{r4, r5, lr}
 800c40a:	b083      	sub	sp, #12
 800c40c:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800c414:	f10d 0107 	add.w	r1, sp, #7
 800c418:	6840      	ldr	r0, [r0, #4]
 800c41a:	f7ff fba7 	bl	800bb6c <VerifyRfFreq>
 800c41e:	b1a8      	cbz	r0, 800c44c <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800c420:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800c422:	2207      	movs	r2, #7
 800c424:	2100      	movs	r1, #0
 800c426:	f994 0000 	ldrsb.w	r0, [r4]
 800c42a:	f7ff f88a 	bl	800b542 <RegionCommonValueInRange>
 800c42e:	b908      	cbnz	r0, 800c434 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800c430:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800c434:	2205      	movs	r2, #5
 800c436:	2100      	movs	r1, #0
 800c438:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c43c:	f7ff f881 	bl	800b542 <RegionCommonValueInRange>
 800c440:	b908      	cbnz	r0, 800c446 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800c442:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800c446:	4628      	mov	r0, r5
 800c448:	b003      	add	sp, #12
 800c44a:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800c44c:	2506      	movs	r5, #6
 800c44e:	e7e8      	b.n	800c422 <RegionEU868RxParamSetupReq+0x1a>

0800c450 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800c450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c454:	4770      	bx	lr
	...

0800c458 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800c458:	b510      	push	{r4, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800c464:	f10d 0107 	add.w	r1, sp, #7
 800c468:	6840      	ldr	r0, [r0, #4]
 800c46a:	f7ff fb7f 	bl	800bb6c <VerifyRfFreq>
 800c46e:	b178      	cbz	r0, 800c490 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800c470:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800c472:	4b0c      	ldr	r3, [pc, #48]	; (800c4a4 <RegionEU868DlChannelReq+0x4c>)
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	7823      	ldrb	r3, [r4, #0]
 800c478:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c47c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800c480:	b909      	cbnz	r1, 800c486 <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800c482:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800c486:	2803      	cmp	r0, #3
 800c488:	d004      	beq.n	800c494 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800c48a:	b240      	sxtb	r0, r0
 800c48c:	b002      	add	sp, #8
 800c48e:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800c490:	2002      	movs	r0, #2
 800c492:	e7ee      	b.n	800c472 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800c494:	6861      	ldr	r1, [r4, #4]
 800c496:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c49a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c49e:	6051      	str	r1, [r2, #4]
 800c4a0:	e7f3      	b.n	800c48a <RegionEU868DlChannelReq+0x32>
 800c4a2:	bf00      	nop
 800c4a4:	200011dc 	.word	0x200011dc

0800c4a8 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800c4a8:	4770      	bx	lr
	...

0800c4ac <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ae:	b097      	sub	sp, #92	; 0x5c
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	460f      	mov	r7, r1
 800c4b4:	4616      	mov	r6, r2
 800c4b6:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800c4be:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800c4c2:	9111      	str	r1, [sp, #68]	; 0x44
 800c4c4:	9112      	str	r1, [sp, #72]	; 0x48
 800c4c6:	9113      	str	r1, [sp, #76]	; 0x4c
 800c4c8:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800c4ca:	2307      	movs	r3, #7
 800c4cc:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800c4d0:	4b34      	ldr	r3, [pc, #208]	; (800c5a4 <RegionEU868NextChannel+0xf8>)
 800c4d2:	6818      	ldr	r0, [r3, #0]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800c4da:	f7ff f890 	bl	800b5fe <RegionCommonCountChannels>
 800c4de:	b938      	cbnz	r0, 800c4f0 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c4e0:	4b30      	ldr	r3, [pc, #192]	; (800c5a4 <RegionEU868NextChannel+0xf8>)
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800c4e8:	f043 0307 	orr.w	r3, r3, #7
 800c4ec:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800c4f0:	7a63      	ldrb	r3, [r4, #9]
 800c4f2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800c4f6:	7a23      	ldrb	r3, [r4, #8]
 800c4f8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c4fc:	4b29      	ldr	r3, [pc, #164]	; (800c5a4 <RegionEU868NextChannel+0xf8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800c504:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800c506:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800c508:	4b27      	ldr	r3, [pc, #156]	; (800c5a8 <RegionEU868NextChannel+0xfc>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800c50e:	2310      	movs	r3, #16
 800c510:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800c514:	f10d 030a 	add.w	r3, sp, #10
 800c518:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800c51e:	6863      	ldr	r3, [r4, #4]
 800c520:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800c522:	7aa3      	ldrb	r3, [r4, #10]
 800c524:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800c528:	2306      	movs	r3, #6
 800c52a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c52e:	ab0c      	add	r3, sp, #48	; 0x30
 800c530:	f104 020c 	add.w	r2, r4, #12
 800c534:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c538:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800c53c:	7d23      	ldrb	r3, [r4, #20]
 800c53e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c542:	8ae1      	ldrh	r1, [r4, #22]
 800c544:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800c548:	f7ff fb64 	bl	800bc14 <GetTimeOnAir>
 800c54c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800c54e:	ab03      	add	r3, sp, #12
 800c550:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c552:	9601      	str	r6, [sp, #4]
 800c554:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800c55e:	aa11      	add	r2, sp, #68	; 0x44
 800c560:	4629      	mov	r1, r5
 800c562:	a809      	add	r0, sp, #36	; 0x24
 800c564:	f7ff fa41 	bl	800b9ea <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800c568:	4604      	mov	r4, r0
 800c56a:	b120      	cbz	r0, 800c576 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800c56c:	280c      	cmp	r0, #12
 800c56e:	d00f      	beq.n	800c590 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c570:	4620      	mov	r0, r4
 800c572:	b017      	add	sp, #92	; 0x5c
 800c574:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800c576:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800c57a:	3901      	subs	r1, #1
 800c57c:	f001 fea8 	bl	800e2d0 <randr>
 800c580:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800c584:	eb0d 0003 	add.w	r0, sp, r3
 800c588:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800c58c:	703b      	strb	r3, [r7, #0]
 800c58e:	e7ef      	b.n	800c570 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c590:	4b04      	ldr	r3, [pc, #16]	; (800c5a4 <RegionEU868NextChannel+0xf8>)
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800c598:	f043 0307 	orr.w	r3, r3, #7
 800c59c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800c5a0:	e7e6      	b.n	800c570 <RegionEU868NextChannel+0xc4>
 800c5a2:	bf00      	nop
 800c5a4:	200011dc 	.word	0x200011dc
 800c5a8:	200011d8 	.word	0x200011d8

0800c5ac <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800c5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ae:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800c5b6:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c5b8:	2d02      	cmp	r5, #2
 800c5ba:	d94e      	bls.n	800c65a <RegionEU868ChannelAdd+0xae>
 800c5bc:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800c5be:	2d0f      	cmp	r5, #15
 800c5c0:	d84d      	bhi.n	800c65e <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c5c2:	6803      	ldr	r3, [r0, #0]
 800c5c4:	7a18      	ldrb	r0, [r3, #8]
 800c5c6:	f340 0003 	sbfx	r0, r0, #0, #4
 800c5ca:	2207      	movs	r2, #7
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	b240      	sxtb	r0, r0
 800c5d0:	f7fe ffb7 	bl	800b542 <RegionCommonValueInRange>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d03c      	beq.n	800c652 <RegionEU868ChannelAdd+0xa6>
    bool drInvalid = false;
 800c5d8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	7a18      	ldrb	r0, [r3, #8]
 800c5de:	f340 1003 	sbfx	r0, r0, #4, #4
 800c5e2:	2207      	movs	r2, #7
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	b240      	sxtb	r0, r0
 800c5e8:	f7fe ffab 	bl	800b542 <RegionCommonValueInRange>
 800c5ec:	b900      	cbnz	r0, 800c5f0 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800c5ee:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800c5f0:	6820      	ldr	r0, [r4, #0]
 800c5f2:	7a03      	ldrb	r3, [r0, #8]
 800c5f4:	f343 0203 	sbfx	r2, r3, #0, #4
 800c5f8:	b252      	sxtb	r2, r2
 800c5fa:	f343 1303 	sbfx	r3, r3, #4, #4
 800c5fe:	b25b      	sxtb	r3, r3
 800c600:	429a      	cmp	r2, r3
 800c602:	dd00      	ble.n	800c606 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800c604:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800c606:	f10d 0107 	add.w	r1, sp, #7
 800c60a:	6800      	ldr	r0, [r0, #0]
 800c60c:	f7ff faae 	bl	800bb6c <VerifyRfFreq>
 800c610:	b308      	cbz	r0, 800c656 <RegionEU868ChannelAdd+0xaa>
    bool freqInvalid = false;
 800c612:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800c614:	b106      	cbz	r6, 800c618 <RegionEU868ChannelAdd+0x6c>
 800c616:	bb2b      	cbnz	r3, 800c664 <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800c618:	bb36      	cbnz	r6, 800c668 <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800c61a:	bb3b      	cbnz	r3, 800c66c <RegionEU868ChannelAdd+0xc0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800c61c:	4f14      	ldr	r7, [pc, #80]	; (800c670 <RegionEU868ChannelAdd+0xc4>)
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	006e      	lsls	r6, r5, #1
 800c622:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800c626:	220c      	movs	r2, #12
 800c628:	6821      	ldr	r1, [r4, #0]
 800c62a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c62e:	f001 fe5c 	bl	800e2ea <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800c632:	683a      	ldr	r2, [r7, #0]
 800c634:	442e      	add	r6, r5
 800c636:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c63a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c63e:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800c640:	2301      	movs	r3, #1
 800c642:	40ab      	lsls	r3, r5
 800c644:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800c648:	430b      	orrs	r3, r1
 800c64a:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800c64e:	2000      	movs	r0, #0
 800c650:	e006      	b.n	800c660 <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 800c652:	2601      	movs	r6, #1
 800c654:	e7c1      	b.n	800c5da <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800c656:	2301      	movs	r3, #1
 800c658:	e7dc      	b.n	800c614 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c65a:	2006      	movs	r0, #6
 800c65c:	e000      	b.n	800c660 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c65e:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c660:	b003      	add	sp, #12
 800c662:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c664:	2006      	movs	r0, #6
 800c666:	e7fb      	b.n	800c660 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800c668:	2005      	movs	r0, #5
 800c66a:	e7f9      	b.n	800c660 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800c66c:	2004      	movs	r0, #4
 800c66e:	e7f7      	b.n	800c660 <RegionEU868ChannelAdd+0xb4>
 800c670:	200011dc 	.word	0x200011dc

0800c674 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800c674:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c676:	2902      	cmp	r1, #2
 800c678:	d801      	bhi.n	800c67e <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800c67a:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800c67c:	4770      	bx	lr
{
 800c67e:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800c680:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <RegionEU868ChannelsRemove+0x34>)
 800c682:	6818      	ldr	r0, [r3, #0]
 800c684:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800c688:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800c68c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c690:	2200      	movs	r2, #0
 800c692:	f840 200c 	str.w	r2, [r0, ip]
 800c696:	605a      	str	r2, [r3, #4]
 800c698:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800c69a:	2210      	movs	r2, #16
 800c69c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800c6a0:	f7fe ff91 	bl	800b5c6 <RegionCommonChanDisable>
}
 800c6a4:	bd08      	pop	{r3, pc}
 800c6a6:	bf00      	nop
 800c6a8:	200011dc 	.word	0x200011dc

0800c6ac <RegionEU868ApplyCFList>:
{
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c6b0:	2350      	movs	r3, #80	; 0x50
 800c6b2:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800c6b6:	7903      	ldrb	r3, [r0, #4]
 800c6b8:	2b10      	cmp	r3, #16
 800c6ba:	d136      	bne.n	800c72a <RegionEU868ApplyCFList+0x7e>
 800c6bc:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800c6be:	6803      	ldr	r3, [r0, #0]
 800c6c0:	7bdd      	ldrb	r5, [r3, #15]
 800c6c2:	2d00      	cmp	r5, #0
 800c6c4:	d131      	bne.n	800c72a <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c6c6:	2403      	movs	r4, #3
 800c6c8:	e01b      	b.n	800c702 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800c6ca:	6832      	ldr	r2, [r6, #0]
 800c6cc:	5d53      	ldrb	r3, [r2, r5]
 800c6ce:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800c6d0:	442a      	add	r2, r5
 800c6d2:	7851      	ldrb	r1, [r2, #1]
 800c6d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c6d8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800c6da:	7892      	ldrb	r2, [r2, #2]
 800c6dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6e0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800c6e2:	2264      	movs	r2, #100	; 0x64
 800c6e4:	fb02 f303 	mul.w	r3, r2, r3
 800c6e8:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	9304      	str	r3, [sp, #16]
 800c6ee:	e011      	b.n	800c714 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800c6f0:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800c6f4:	4668      	mov	r0, sp
 800c6f6:	f7ff ffbd 	bl	800c674 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c6fa:	3503      	adds	r5, #3
 800c6fc:	b2ed      	uxtb	r5, r5
 800c6fe:	3401      	adds	r4, #1
 800c700:	b2e4      	uxtb	r4, r4
 800c702:	2c0f      	cmp	r4, #15
 800c704:	d811      	bhi.n	800c72a <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800c706:	2c07      	cmp	r4, #7
 800c708:	d9df      	bls.n	800c6ca <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800c70e:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800c712:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800c714:	9b03      	ldr	r3, [sp, #12]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0ea      	beq.n	800c6f0 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800c71a:	ab03      	add	r3, sp, #12
 800c71c:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800c71e:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800c722:	a801      	add	r0, sp, #4
 800c724:	f7ff ff42 	bl	800c5ac <RegionEU868ChannelAdd>
 800c728:	e7e7      	b.n	800c6fa <RegionEU868ApplyCFList+0x4e>
}
 800c72a:	b006      	add	sp, #24
 800c72c:	bd70      	pop	{r4, r5, r6, pc}

0800c72e <RegionEU868NewChannelReq>:
{
 800c72e:	b500      	push	{lr}
 800c730:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800c732:	6803      	ldr	r3, [r0, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	b952      	cbnz	r2, 800c74e <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800c738:	7903      	ldrb	r3, [r0, #4]
 800c73a:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800c73e:	a801      	add	r0, sp, #4
 800c740:	f7ff ff98 	bl	800c674 <RegionEU868ChannelsRemove>
 800c744:	b1d0      	cbz	r0, 800c77c <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800c746:	2003      	movs	r0, #3
}
 800c748:	b005      	add	sp, #20
 800c74a:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800c74e:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800c750:	7903      	ldrb	r3, [r0, #4]
 800c752:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800c756:	a802      	add	r0, sp, #8
 800c758:	f7ff ff28 	bl	800c5ac <RegionEU868ChannelAdd>
 800c75c:	2806      	cmp	r0, #6
 800c75e:	d80b      	bhi.n	800c778 <RegionEU868NewChannelReq+0x4a>
 800c760:	e8df f000 	tbb	[pc, r0]
 800c764:	0a0a0a04 	.word	0x0a0a0a04
 800c768:	060e      	.short	0x060e
 800c76a:	08          	.byte	0x08
 800c76b:	00          	.byte	0x00
 800c76c:	2003      	movs	r0, #3
 800c76e:	e7eb      	b.n	800c748 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800c770:	2001      	movs	r0, #1
                break;
 800c772:	e7e9      	b.n	800c748 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800c774:	2000      	movs	r0, #0
                break;
 800c776:	e7e7      	b.n	800c748 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800c778:	2000      	movs	r0, #0
                break;
 800c77a:	e7e5      	b.n	800c748 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800c77c:	2000      	movs	r0, #0
 800c77e:	e7e3      	b.n	800c748 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800c780:	2002      	movs	r0, #2
 800c782:	e7e1      	b.n	800c748 <RegionEU868NewChannelReq+0x1a>

0800c784 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800c788:	4b12      	ldr	r3, [pc, #72]	; (800c7d4 <RegionEU868SetContinuousWave+0x50>)
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	4d12      	ldr	r5, [pc, #72]	; (800c7d8 <RegionEU868SetContinuousWave+0x54>)
 800c78e:	6829      	ldr	r1, [r5, #0]
 800c790:	7803      	ldrb	r3, [r0, #0]
 800c792:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c796:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c79a:	7a4b      	ldrb	r3, [r1, #9]
 800c79c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c7a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c7a4:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800c7a8:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c7ac:	f7ff f986 	bl	800babc <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800c7b0:	682a      	ldr	r2, [r5, #0]
 800c7b2:	7823      	ldrb	r3, [r4, #0]
 800c7b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c7b8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c7bc:	68a2      	ldr	r2, [r4, #8]
 800c7be:	6861      	ldr	r1, [r4, #4]
 800c7c0:	f7ff f898 	bl	800b8f4 <RegionCommonComputeTxPower>
 800c7c4:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c7c6:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <RegionEU868SetContinuousWave+0x58>)
 800c7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ca:	89a2      	ldrh	r2, [r4, #12]
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800c7d0:	bd38      	pop	{r3, r4, r5, pc}
 800c7d2:	bf00      	nop
 800c7d4:	200011d8 	.word	0x200011d8
 800c7d8:	200011dc 	.word	0x200011dc
 800c7dc:	08011ea4 	.word	0x08011ea4

0800c7e0 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800c7e0:	1a88      	subs	r0, r1, r2
 800c7e2:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	db01      	blt.n	800c7ec <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800c7e8:	b2c0      	uxtb	r0, r0
 800c7ea:	4770      	bx	lr
        datarate = DR_0;
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	e7fb      	b.n	800c7e8 <RegionEU868ApplyDrOffset+0x8>

0800c7f0 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c7f4:	4b10      	ldr	r3, [pc, #64]	; (800c838 <VerifyRfFreq+0x48>)
 800c7f6:	6a1b      	ldr	r3, [r3, #32]
 800c7f8:	4798      	blx	r3
 800c7fa:	b1c8      	cbz	r0, 800c830 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800c7fc:	4b0f      	ldr	r3, [pc, #60]	; (800c83c <VerifyRfFreq+0x4c>)
 800c7fe:	4423      	add	r3, r4
 800c800:	4a0f      	ldr	r2, [pc, #60]	; (800c840 <VerifyRfFreq+0x50>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d813      	bhi.n	800c82e <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800c806:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800c80a:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800c80e:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800c812:	fba2 1203 	umull	r1, r2, r2, r3
 800c816:	0c92      	lsrs	r2, r2, #18
 800c818:	490a      	ldr	r1, [pc, #40]	; (800c844 <VerifyRfFreq+0x54>)
 800c81a:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800c81e:	b942      	cbnz	r2, 800c832 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800c820:	4b09      	ldr	r3, [pc, #36]	; (800c848 <VerifyRfFreq+0x58>)
 800c822:	4423      	add	r3, r4
 800c824:	4a09      	ldr	r2, [pc, #36]	; (800c84c <VerifyRfFreq+0x5c>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d902      	bls.n	800c830 <VerifyRfFreq+0x40>
    {
        return false;
 800c82a:	2000      	movs	r0, #0
 800c82c:	e000      	b.n	800c830 <VerifyRfFreq+0x40>
        return false;
 800c82e:	2000      	movs	r0, #0
    }
    return true;
}
 800c830:	bd10      	pop	{r4, pc}
        return false;
 800c832:	2000      	movs	r0, #0
 800c834:	e7fc      	b.n	800c830 <VerifyRfFreq+0x40>
 800c836:	bf00      	nop
 800c838:	08011ea4 	.word	0x08011ea4
 800c83c:	c8f78f60 	.word	0xc8f78f60
 800c840:	00401640 	.word	0x00401640
 800c844:	000927c0 	.word	0x000927c0
 800c848:	ca37fea0 	.word	0xca37fea0
 800c84c:	01808580 	.word	0x01808580

0800c850 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800c856:	4b0a      	ldr	r3, [pc, #40]	; (800c880 <GetTimeOnAir+0x30>)
 800c858:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800c85a:	490a      	ldr	r1, [pc, #40]	; (800c884 <GetTimeOnAir+0x34>)
 800c85c:	f7ff f932 	bl	800bac4 <RegionCommonGetBandwidth>
 800c860:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c862:	4b09      	ldr	r3, [pc, #36]	; (800c888 <GetTimeOnAir+0x38>)
 800c864:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c866:	2001      	movs	r0, #1
 800c868:	9003      	str	r0, [sp, #12]
 800c86a:	b2e4      	uxtb	r4, r4
 800c86c:	9402      	str	r4, [sp, #8]
 800c86e:	2200      	movs	r2, #0
 800c870:	9201      	str	r2, [sp, #4]
 800c872:	2208      	movs	r2, #8
 800c874:	9200      	str	r2, [sp, #0]
 800c876:	4603      	mov	r3, r0
 800c878:	4632      	mov	r2, r6
 800c87a:	47a8      	blx	r5
}
 800c87c:	b004      	add	sp, #16
 800c87e:	bd70      	pop	{r4, r5, r6, pc}
 800c880:	08011988 	.word	0x08011988
 800c884:	08011934 	.word	0x08011934
 800c888:	08011ea4 	.word	0x08011ea4

0800c88c <LimitTxPower>:
{
 800c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88e:	4606      	mov	r6, r0
 800c890:	4615      	mov	r5, r2
 800c892:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800c894:	f7ff f912 	bl	800babc <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800c898:	2d04      	cmp	r5, #4
 800c89a:	d105      	bne.n	800c8a8 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800c89c:	4634      	mov	r4, r6
 800c89e:	2e02      	cmp	r6, #2
 800c8a0:	bfb8      	it	lt
 800c8a2:	2402      	movlt	r4, #2
}
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8a8:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800c8aa:	2204      	movs	r2, #4
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	f7fe fea5 	bl	800b5fe <RegionCommonCountChannels>
 800c8b4:	2831      	cmp	r0, #49	; 0x31
 800c8b6:	d8f5      	bhi.n	800c8a4 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800c8b8:	4634      	mov	r4, r6
 800c8ba:	2e05      	cmp	r6, #5
 800c8bc:	bfb8      	it	lt
 800c8be:	2405      	movlt	r4, #5
 800c8c0:	e7f0      	b.n	800c8a4 <LimitTxPower+0x18>
	...

0800c8c4 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800c8c4:	b500      	push	{lr}
 800c8c6:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800c8cc:	7803      	ldrb	r3, [r0, #0]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	2b38      	cmp	r3, #56	; 0x38
 800c8d2:	d820      	bhi.n	800c916 <RegionUS915GetPhyParam+0x52>
 800c8d4:	e8df f003 	tbb	[pc, r3]
 800c8d8:	1f1f1f1d 	.word	0x1f1f1f1d
 800c8dc:	1f1f1f1f 	.word	0x1f1f1f1f
 800c8e0:	3f3c1f1f 	.word	0x3f3c1f1f
 800c8e4:	4e1f4842 	.word	0x4e1f4842
 800c8e8:	5e5a5652 	.word	0x5e5a5652
 800c8ec:	6f1f6662 	.word	0x6f1f6662
 800c8f0:	817b7572 	.word	0x817b7572
 800c8f4:	881f1f84 	.word	0x881f1f84
 800c8f8:	1f1f248b 	.word	0x1f1f248b
 800c8fc:	1f1f1f1f 	.word	0x1f1f1f1f
 800c900:	1f1f1f1f 	.word	0x1f1f1f1f
 800c904:	8e1f1f1f 	.word	0x8e1f1f1f
 800c908:	1fa29f95 	.word	0x1fa29f95
 800c90c:	b2afaca5 	.word	0xb2afaca5
 800c910:	b8          	.byte	0xb8
 800c911:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800c912:	2308      	movs	r3, #8
 800c914:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800c916:	9804      	ldr	r0, [sp, #16]
 800c918:	9005      	str	r0, [sp, #20]
}
 800c91a:	b007      	add	sp, #28
 800c91c:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800c920:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c924:	f88d 3004 	strb.w	r3, [sp, #4]
 800c928:	2304      	movs	r3, #4
 800c92a:	f88d 3005 	strb.w	r3, [sp, #5]
 800c92e:	2300      	movs	r3, #0
 800c930:	f88d 3006 	strb.w	r3, [sp, #6]
 800c934:	2348      	movs	r3, #72	; 0x48
 800c936:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800c93a:	4b47      	ldr	r3, [pc, #284]	; (800ca58 <RegionUS915GetPhyParam+0x194>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c942:	9202      	str	r2, [sp, #8]
 800c944:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800c946:	a801      	add	r0, sp, #4
 800c948:	f7ff f899 	bl	800ba7e <RegionCommonGetNextLowerTxDr>
 800c94c:	9004      	str	r0, [sp, #16]
            break;
 800c94e:	e7e2      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800c950:	2340      	movs	r3, #64	; 0x40
 800c952:	9304      	str	r3, [sp, #16]
            break;
 800c954:	e7df      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800c956:	2320      	movs	r3, #32
 800c958:	9304      	str	r3, [sp, #16]
            break;
 800c95a:	e7dc      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800c95c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c960:	4a3e      	ldr	r2, [pc, #248]	; (800ca5c <RegionUS915GetPhyParam+0x198>)
 800c962:	5cd3      	ldrb	r3, [r2, r3]
 800c964:	9304      	str	r3, [sp, #16]
            break;
 800c966:	e7d6      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800c968:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c96c:	4a3c      	ldr	r2, [pc, #240]	; (800ca60 <RegionUS915GetPhyParam+0x19c>)
 800c96e:	5cd3      	ldrb	r3, [r2, r3]
 800c970:	9304      	str	r3, [sp, #16]
            break;
 800c972:	e7d0      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800c974:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c978:	9304      	str	r3, [sp, #16]
            break;
 800c97a:	e7cc      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800c97c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c980:	9304      	str	r3, [sp, #16]
            break;
 800c982:	e7c8      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800c984:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c988:	9304      	str	r3, [sp, #16]
            break;
 800c98a:	e7c4      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800c98c:	f241 3388 	movw	r3, #5000	; 0x1388
 800c990:	9304      	str	r3, [sp, #16]
            break;
 800c992:	e7c0      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800c994:	f241 7370 	movw	r3, #6000	; 0x1770
 800c998:	9304      	str	r3, [sp, #16]
            break;
 800c99a:	e7bc      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800c99c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c9a0:	9304      	str	r3, [sp, #16]
            break;
 800c9a2:	e7b8      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800c9a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c9a8:	482e      	ldr	r0, [pc, #184]	; (800ca64 <RegionUS915GetPhyParam+0x1a0>)
 800c9aa:	f001 fc91 	bl	800e2d0 <randr>
 800c9ae:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800c9b2:	9004      	str	r0, [sp, #16]
            break;
 800c9b4:	e7af      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800c9b6:	4b2c      	ldr	r3, [pc, #176]	; (800ca68 <RegionUS915GetPhyParam+0x1a4>)
 800c9b8:	9304      	str	r3, [sp, #16]
            break;
 800c9ba:	e7ac      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 800c9bc:	2308      	movs	r3, #8
 800c9be:	9304      	str	r3, [sp, #16]
            break;
 800c9c0:	e7a9      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c9c2:	4b25      	ldr	r3, [pc, #148]	; (800ca58 <RegionUS915GetPhyParam+0x194>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800c9ca:	9304      	str	r3, [sp, #16]
            break;
 800c9cc:	e7a3      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800c9ce:	4b22      	ldr	r3, [pc, #136]	; (800ca58 <RegionUS915GetPhyParam+0x194>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800c9d6:	9304      	str	r3, [sp, #16]
            break;
 800c9d8:	e79d      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800c9da:	2348      	movs	r3, #72	; 0x48
 800c9dc:	9304      	str	r3, [sp, #16]
            break;
 800c9de:	e79a      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800c9e0:	4b1d      	ldr	r3, [pc, #116]	; (800ca58 <RegionUS915GetPhyParam+0x194>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	9304      	str	r3, [sp, #16]
            break;
 800c9e6:	e796      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800c9e8:	4b20      	ldr	r3, [pc, #128]	; (800ca6c <RegionUS915GetPhyParam+0x1a8>)
 800c9ea:	9304      	str	r3, [sp, #16]
            break;
 800c9ec:	e793      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	9304      	str	r3, [sp, #16]
            break;
 800c9f2:	e790      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800c9f4:	4a1e      	ldr	r2, [pc, #120]	; (800ca70 <RegionUS915GetPhyParam+0x1ac>)
 800c9f6:	491c      	ldr	r1, [pc, #112]	; (800ca68 <RegionUS915GetPhyParam+0x1a4>)
 800c9f8:	7900      	ldrb	r0, [r0, #4]
 800c9fa:	f7fe fcd3 	bl	800b3a4 <RegionBaseUSCalcDownlinkFrequency>
 800c9fe:	9004      	str	r0, [sp, #16]
            break;
 800ca00:	e789      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800ca02:	2317      	movs	r3, #23
 800ca04:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800ca08:	2305      	movs	r3, #5
 800ca0a:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800ca14:	e77f      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800ca16:	2308      	movs	r3, #8
 800ca18:	9304      	str	r3, [sp, #16]
            break;
 800ca1a:	e77c      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800ca1c:	2308      	movs	r3, #8
 800ca1e:	9304      	str	r3, [sp, #16]
            break;
 800ca20:	e779      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800ca22:	4a13      	ldr	r2, [pc, #76]	; (800ca70 <RegionUS915GetPhyParam+0x1ac>)
 800ca24:	4910      	ldr	r1, [pc, #64]	; (800ca68 <RegionUS915GetPhyParam+0x1a4>)
 800ca26:	7900      	ldrb	r0, [r0, #4]
 800ca28:	f7fe fcbc 	bl	800b3a4 <RegionBaseUSCalcDownlinkFrequency>
 800ca2c:	9004      	str	r0, [sp, #16]
            break;
 800ca2e:	e772      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800ca30:	2308      	movs	r3, #8
 800ca32:	9304      	str	r3, [sp, #16]
            break;
 800ca34:	e76f      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800ca36:	2308      	movs	r3, #8
 800ca38:	9304      	str	r3, [sp, #16]
            break;
 800ca3a:	e76c      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800ca3c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ca40:	4a0c      	ldr	r2, [pc, #48]	; (800ca74 <RegionUS915GetPhyParam+0x1b0>)
 800ca42:	5cd3      	ldrb	r3, [r2, r3]
 800ca44:	9304      	str	r3, [sp, #16]
            break;
 800ca46:	e766      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800ca48:	490b      	ldr	r1, [pc, #44]	; (800ca78 <RegionUS915GetPhyParam+0x1b4>)
 800ca4a:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ca4e:	f7ff f839 	bl	800bac4 <RegionCommonGetBandwidth>
 800ca52:	9004      	str	r0, [sp, #16]
            break;
 800ca54:	e75f      	b.n	800c916 <RegionUS915GetPhyParam+0x52>
 800ca56:	bf00      	nop
 800ca58:	200011e4 	.word	0x200011e4
 800ca5c:	080119a8 	.word	0x080119a8
 800ca60:	08011998 	.word	0x08011998
 800ca64:	fffffc18 	.word	0xfffffc18
 800ca68:	370870a0 	.word	0x370870a0
 800ca6c:	4200999a 	.word	0x4200999a
 800ca70:	000927c0 	.word	0x000927c0
 800ca74:	08011988 	.word	0x08011988
 800ca78:	08011934 	.word	0x08011934

0800ca7c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	b082      	sub	sp, #8
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800ca80:	4b0b      	ldr	r3, [pc, #44]	; (800cab0 <RegionUS915SetBandTxDone+0x34>)
 800ca82:	681c      	ldr	r4, [r3, #0]
 800ca84:	4b0b      	ldr	r3, [pc, #44]	; (800cab4 <RegionUS915SetBandTxDone+0x38>)
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	7803      	ldrb	r3, [r0, #0]
 800ca8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ca8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca92:	7a5b      	ldrb	r3, [r3, #9]
 800ca94:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800ca98:	6903      	ldr	r3, [r0, #16]
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	68c3      	ldr	r3, [r0, #12]
 800ca9e:	7842      	ldrb	r2, [r0, #1]
 800caa0:	6881      	ldr	r1, [r0, #8]
 800caa2:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800caa6:	f7fe fdcf 	bl	800b648 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 800caaa:	b002      	add	sp, #8
 800caac:	bd10      	pop	{r4, pc}
 800caae:	bf00      	nop
 800cab0:	200011e0 	.word	0x200011e0
 800cab4:	200011e4 	.word	0x200011e4

0800cab8 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800cab8:	b510      	push	{r4, lr}
 800caba:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800cabc:	2301      	movs	r3, #1
 800cabe:	f8ad 3000 	strh.w	r3, [sp]
 800cac2:	2300      	movs	r3, #0
 800cac4:	f88d 3002 	strb.w	r3, [sp, #2]
 800cac8:	9301      	str	r3, [sp, #4]
 800caca:	9302      	str	r3, [sp, #8]
 800cacc:	9303      	str	r3, [sp, #12]
 800cace:	9304      	str	r3, [sp, #16]
 800cad0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800cad4:	7a04      	ldrb	r4, [r0, #8]
 800cad6:	b17c      	cbz	r4, 800caf8 <RegionUS915InitDefaults+0x40>
 800cad8:	3c01      	subs	r4, #1
 800cada:	b2e4      	uxtb	r4, r4
 800cadc:	2c01      	cmp	r4, #1
 800cade:	f200 8082 	bhi.w	800cbe6 <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cae2:	4b42      	ldr	r3, [pc, #264]	; (800cbec <RegionUS915InitDefaults+0x134>)
 800cae4:	6818      	ldr	r0, [r3, #0]
 800cae6:	2206      	movs	r2, #6
 800cae8:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800caec:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800caf0:	f7fe fd9b 	bl	800b62a <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800caf4:	2300      	movs	r3, #0
 800caf6:	e074      	b.n	800cbe2 <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800caf8:	6803      	ldr	r3, [r0, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d073      	beq.n	800cbe6 <RegionUS915InitDefaults+0x12e>
 800cafe:	6842      	ldr	r2, [r0, #4]
 800cb00:	2a00      	cmp	r2, #0
 800cb02:	d070      	beq.n	800cbe6 <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800cb04:	493a      	ldr	r1, [pc, #232]	; (800cbf0 <RegionUS915InitDefaults+0x138>)
 800cb06:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800cb08:	4938      	ldr	r1, [pc, #224]	; (800cbec <RegionUS915InitDefaults+0x134>)
 800cb0a:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800cb12:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800cb16:	2218      	movs	r2, #24
 800cb18:	4669      	mov	r1, sp
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f001 fbe5 	bl	800e2ea <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800cb20:	e011      	b.n	800cb46 <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800cb22:	4b32      	ldr	r3, [pc, #200]	; (800cbec <RegionUS915InitDefaults+0x134>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4933      	ldr	r1, [pc, #204]	; (800cbf4 <RegionUS915InitDefaults+0x13c>)
 800cb28:	4a33      	ldr	r2, [pc, #204]	; (800cbf8 <RegionUS915InitDefaults+0x140>)
 800cb2a:	fb01 2204 	mla	r2, r1, r4, r2
 800cb2e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800cb32:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800cb36:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800cb3a:	2230      	movs	r2, #48	; 0x30
 800cb3c:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800cb3e:	2200      	movs	r2, #0
 800cb40:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800cb42:	3401      	adds	r4, #1
 800cb44:	b2e4      	uxtb	r4, r4
 800cb46:	2c3f      	cmp	r4, #63	; 0x3f
 800cb48:	d9eb      	bls.n	800cb22 <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cb4a:	2340      	movs	r3, #64	; 0x40
 800cb4c:	2b47      	cmp	r3, #71	; 0x47
 800cb4e:	d814      	bhi.n	800cb7a <RegionUS915InitDefaults+0xc2>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800cb50:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800cb54:	4a25      	ldr	r2, [pc, #148]	; (800cbec <RegionUS915InitDefaults+0x134>)
 800cb56:	6812      	ldr	r2, [r2, #0]
 800cb58:	4c28      	ldr	r4, [pc, #160]	; (800cbfc <RegionUS915InitDefaults+0x144>)
 800cb5a:	4929      	ldr	r1, [pc, #164]	; (800cc00 <RegionUS915InitDefaults+0x148>)
 800cb5c:	fb04 1100 	mla	r1, r4, r0, r1
 800cb60:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800cb64:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800cb68:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800cb6c:	2144      	movs	r1, #68	; 0x44
 800cb6e:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800cb70:	2100      	movs	r1, #0
 800cb72:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cb74:	3301      	adds	r3, #1
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	e7e8      	b.n	800cb4c <RegionUS915InitDefaults+0x94>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800cb7a:	4c1c      	ldr	r4, [pc, #112]	; (800cbec <RegionUS915InitDefaults+0x134>)
 800cb7c:	6820      	ldr	r0, [r4, #0]
 800cb7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb82:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800cb86:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800cb8a:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800cb8e:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800cb92:	23ff      	movs	r3, #255	; 0xff
 800cb94:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cb9e:	2206      	movs	r2, #6
 800cba0:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800cba4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cba8:	f7fe fd3f 	bl	800b62a <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800cbac:	4b10      	ldr	r3, [pc, #64]	; (800cbf0 <RegionUS915InitDefaults+0x138>)
 800cbae:	6818      	ldr	r0, [r3, #0]
 800cbb0:	6821      	ldr	r1, [r4, #0]
 800cbb2:	2206      	movs	r2, #6
 800cbb4:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800cbb8:	3090      	adds	r0, #144	; 0x90
 800cbba:	f7fe fd36 	bl	800b62a <RegionCommonChanMaskCopy>
            break;
 800cbbe:	e012      	b.n	800cbe6 <RegionUS915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800cbc0:	4a0b      	ldr	r2, [pc, #44]	; (800cbf0 <RegionUS915InitDefaults+0x138>)
 800cbc2:	6811      	ldr	r1, [r2, #0]
 800cbc4:	4a09      	ldr	r2, [pc, #36]	; (800cbec <RegionUS915InitDefaults+0x134>)
 800cbc6:	6812      	ldr	r2, [r2, #0]
 800cbc8:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800cbcc:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800cbd0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cbd4:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800cbd8:	4022      	ands	r2, r4
 800cbda:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cbde:	3301      	adds	r3, #1
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	2b05      	cmp	r3, #5
 800cbe4:	d9ec      	bls.n	800cbc0 <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800cbe6:	b006      	add	sp, #24
 800cbe8:	bd10      	pop	{r4, pc}
 800cbea:	bf00      	nop
 800cbec:	200011e4 	.word	0x200011e4
 800cbf0:	200011e0 	.word	0x200011e0
 800cbf4:	00030d40 	.word	0x00030d40
 800cbf8:	35c80160 	.word	0x35c80160
 800cbfc:	00186a00 	.word	0x00186a00
 800cc00:	35d2afc0 	.word	0x35d2afc0

0800cc04 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cc04:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800cc06:	290a      	cmp	r1, #10
 800cc08:	d829      	bhi.n	800cc5e <RegionUS915Verify+0x5a>
 800cc0a:	e8df f001 	tbb	[pc, r1]
 800cc0e:	2806      	.short	0x2806
 800cc10:	0a282828 	.word	0x0a282828
 800cc14:	1e28140a 	.word	0x1e28140a
 800cc18:	1e          	.byte	0x1e
 800cc19:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800cc1a:	6800      	ldr	r0, [r0, #0]
 800cc1c:	f7ff fde8 	bl	800c7f0 <VerifyRfFreq>
 800cc20:	e01e      	b.n	800cc60 <RegionUS915Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800cc22:	2204      	movs	r2, #4
 800cc24:	2100      	movs	r1, #0
 800cc26:	f990 0000 	ldrsb.w	r0, [r0]
 800cc2a:	f7fe fc8a 	bl	800b542 <RegionCommonValueInRange>
 800cc2e:	3800      	subs	r0, #0
 800cc30:	bf18      	it	ne
 800cc32:	2001      	movne	r0, #1
 800cc34:	e014      	b.n	800cc60 <RegionUS915Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800cc36:	220d      	movs	r2, #13
 800cc38:	2108      	movs	r1, #8
 800cc3a:	f990 0000 	ldrsb.w	r0, [r0]
 800cc3e:	f7fe fc80 	bl	800b542 <RegionCommonValueInRange>
 800cc42:	3800      	subs	r0, #0
 800cc44:	bf18      	it	ne
 800cc46:	2001      	movne	r0, #1
 800cc48:	e00a      	b.n	800cc60 <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800cc4a:	220e      	movs	r2, #14
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	f990 0000 	ldrsb.w	r0, [r0]
 800cc52:	f7fe fc76 	bl	800b542 <RegionCommonValueInRange>
 800cc56:	3800      	subs	r0, #0
 800cc58:	bf18      	it	ne
 800cc5a:	2001      	movne	r0, #1
 800cc5c:	e000      	b.n	800cc60 <RegionUS915Verify+0x5c>
    switch( phyAttribute )
 800cc5e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800cc60:	bd08      	pop	{r3, pc}
	...

0800cc64 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800cc64:	7903      	ldrb	r3, [r0, #4]
 800cc66:	2b10      	cmp	r3, #16
 800cc68:	d138      	bne.n	800ccdc <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800cc6a:	6803      	ldr	r3, [r0, #0]
 800cc6c:	7bdb      	ldrb	r3, [r3, #15]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d134      	bne.n	800ccdc <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800cc72:	2200      	movs	r2, #0
 800cc74:	4613      	mov	r3, r2
 800cc76:	2a04      	cmp	r2, #4
 800cc78:	d82f      	bhi.n	800ccda <RegionUS915ApplyCFList+0x76>
{
 800cc7a:	b530      	push	{r4, r5, lr}
 800cc7c:	e012      	b.n	800cca4 <RegionUS915ApplyCFList+0x40>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800cc7e:	4d18      	ldr	r5, [pc, #96]	; (800cce0 <RegionUS915ApplyCFList+0x7c>)
 800cc80:	682d      	ldr	r5, [r5, #0]
 800cc82:	f501 7cd8 	add.w	ip, r1, #432	; 0x1b0
 800cc86:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 800cc8a:	3148      	adds	r1, #72	; 0x48
 800cc8c:	f835 c011 	ldrh.w	ip, [r5, r1, lsl #1]
 800cc90:	ea04 040c 	and.w	r4, r4, ip
 800cc94:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800cc98:	3301      	adds	r3, #1
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	3202      	adds	r2, #2
 800cc9e:	b2d2      	uxtb	r2, r2
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	d819      	bhi.n	800ccd8 <RegionUS915ApplyCFList+0x74>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800cca4:	6805      	ldr	r5, [r0, #0]
 800cca6:	490f      	ldr	r1, [pc, #60]	; (800cce4 <RegionUS915ApplyCFList+0x80>)
 800cca8:	680c      	ldr	r4, [r1, #0]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	f815 c002 	ldrb.w	ip, [r5, r2]
 800ccb0:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800ccb4:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800ccb8:	f8d0 e000 	ldr.w	lr, [r0]
 800ccbc:	4496      	add	lr, r2
 800ccbe:	f89e e001 	ldrb.w	lr, [lr, #1]
 800ccc2:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 800ccc6:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800ccca:	2b04      	cmp	r3, #4
 800cccc:	d1d7      	bne.n	800cc7e <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800ccce:	fa5f fc8c 	uxtb.w	ip, ip
 800ccd2:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
 800ccd6:	e7d2      	b.n	800cc7e <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800ccd8:	bd30      	pop	{r4, r5, pc}
 800ccda:	4770      	bx	lr
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	200011e0 	.word	0x200011e0
 800cce4:	200011e4 	.word	0x200011e4

0800cce8 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800cce8:	b570      	push	{r4, r5, r6, lr}
 800ccea:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800ccec:	2204      	movs	r2, #4
 800ccee:	2100      	movs	r1, #0
 800ccf0:	6800      	ldr	r0, [r0, #0]
 800ccf2:	f7fe fc84 	bl	800b5fe <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800ccf6:	2801      	cmp	r0, #1
 800ccf8:	d033      	beq.n	800cd62 <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800ccfa:	792c      	ldrb	r4, [r5, #4]
 800ccfc:	b11c      	cbz	r4, 800cd06 <RegionUS915ChanMaskSet+0x1e>
 800ccfe:	2c01      	cmp	r4, #1
 800cd00:	d025      	beq.n	800cd4e <RegionUS915ChanMaskSet+0x66>
 800cd02:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800cd04:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cd06:	4e18      	ldr	r6, [pc, #96]	; (800cd68 <RegionUS915ChanMaskSet+0x80>)
 800cd08:	6830      	ldr	r0, [r6, #0]
 800cd0a:	2206      	movs	r2, #6
 800cd0c:	6829      	ldr	r1, [r5, #0]
 800cd0e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cd12:	f7fe fc8a 	bl	800b62a <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800cd16:	6835      	ldr	r5, [r6, #0]
 800cd18:	f895 3374 	ldrb.w	r3, [r5, #884]	; 0x374
 800cd1c:	f8a5 3374 	strh.w	r3, [r5, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800cd20:	2300      	movs	r3, #0
 800cd22:	f8a5 3376 	strh.w	r3, [r5, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cd26:	e00e      	b.n	800cd46 <RegionUS915ChanMaskSet+0x5e>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800cd28:	4b10      	ldr	r3, [pc, #64]	; (800cd6c <RegionUS915ChanMaskSet+0x84>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800cd30:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800cd34:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800cd38:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800cd3c:	4003      	ands	r3, r0
 800cd3e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cd42:	3401      	adds	r4, #1
 800cd44:	b2e4      	uxtb	r4, r4
 800cd46:	2c05      	cmp	r4, #5
 800cd48:	d9ee      	bls.n	800cd28 <RegionUS915ChanMaskSet+0x40>
    return true;
 800cd4a:	2001      	movs	r0, #1
 800cd4c:	e7da      	b.n	800cd04 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cd4e:	4b06      	ldr	r3, [pc, #24]	; (800cd68 <RegionUS915ChanMaskSet+0x80>)
 800cd50:	6818      	ldr	r0, [r3, #0]
 800cd52:	2206      	movs	r2, #6
 800cd54:	6829      	ldr	r1, [r5, #0]
 800cd56:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800cd5a:	f7fe fc66 	bl	800b62a <RegionCommonChanMaskCopy>
    return true;
 800cd5e:	2001      	movs	r0, #1
            break;
 800cd60:	e7d0      	b.n	800cd04 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800cd62:	2000      	movs	r0, #0
 800cd64:	e7ce      	b.n	800cd04 <RegionUS915ChanMaskSet+0x1c>
 800cd66:	bf00      	nop
 800cd68:	200011e4 	.word	0x200011e4
 800cd6c:	200011e0 	.word	0x200011e0

0800cd70 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd72:	b083      	sub	sp, #12
 800cd74:	460e      	mov	r6, r1
 800cd76:	4617      	mov	r7, r2
 800cd78:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800cd7a:	280d      	cmp	r0, #13
 800cd7c:	bfa8      	it	ge
 800cd7e:	200d      	movge	r0, #13
 800cd80:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800cd82:	4d0f      	ldr	r5, [pc, #60]	; (800cdc0 <RegionUS915ComputeRxWindowParameters+0x50>)
 800cd84:	4629      	mov	r1, r5
 800cd86:	f7fe fe9d 	bl	800bac4 <RegionCommonGetBandwidth>
 800cd8a:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800cd8c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800cd90:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800cd94:	4a0b      	ldr	r2, [pc, #44]	; (800cdc4 <RegionUS915ComputeRxWindowParameters+0x54>)
 800cd96:	5cd0      	ldrb	r0, [r2, r3]
 800cd98:	f7fe fd62 	bl	800b860 <RegionCommonComputeSymbolTimeLoRa>
 800cd9c:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800cd9e:	4b0a      	ldr	r3, [pc, #40]	; (800cdc8 <RegionUS915ComputeRxWindowParameters+0x58>)
 800cda0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cda2:	4798      	blx	r3
 800cda4:	4603      	mov	r3, r0
 800cda6:	f104 020c 	add.w	r2, r4, #12
 800cdaa:	9201      	str	r2, [sp, #4]
 800cdac:	3408      	adds	r4, #8
 800cdae:	9400      	str	r4, [sp, #0]
 800cdb0:	463a      	mov	r2, r7
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	f7fe fd61 	bl	800b87c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800cdba:	b003      	add	sp, #12
 800cdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	08011934 	.word	0x08011934
 800cdc4:	08011988 	.word	0x08011988
 800cdc8:	08011ea4 	.word	0x08011ea4

0800cdcc <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800cdcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdd0:	b08b      	sub	sp, #44	; 0x2c
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800cdd6:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800cdda:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800cddc:	4b22      	ldr	r3, [pc, #136]	; (800ce68 <RegionUS915RxConfig+0x9c>)
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	4798      	blx	r3
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d13d      	bne.n	800ce62 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800cde6:	7ce3      	ldrb	r3, [r4, #19]
 800cde8:	b933      	cbnz	r3, 800cdf8 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800cdea:	7823      	ldrb	r3, [r4, #0]
 800cdec:	f003 0307 	and.w	r3, r3, #7
 800cdf0:	4a1e      	ldr	r2, [pc, #120]	; (800ce6c <RegionUS915RxConfig+0xa0>)
 800cdf2:	4f1f      	ldr	r7, [pc, #124]	; (800ce70 <RegionUS915RxConfig+0xa4>)
 800cdf4:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800cdf8:	4b1e      	ldr	r3, [pc, #120]	; (800ce74 <RegionUS915RxConfig+0xa8>)
 800cdfa:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800cdfe:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800ce68 <RegionUS915RxConfig+0x9c>
 800ce02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce06:	4638      	mov	r0, r7
 800ce08:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ce0a:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800ce0e:	7ca3      	ldrb	r3, [r4, #18]
 800ce10:	9309      	str	r3, [sp, #36]	; 0x24
 800ce12:	2001      	movs	r0, #1
 800ce14:	9008      	str	r0, [sp, #32]
 800ce16:	2200      	movs	r2, #0
 800ce18:	9207      	str	r2, [sp, #28]
 800ce1a:	9206      	str	r2, [sp, #24]
 800ce1c:	9205      	str	r2, [sp, #20]
 800ce1e:	9204      	str	r2, [sp, #16]
 800ce20:	9203      	str	r2, [sp, #12]
 800ce22:	8923      	ldrh	r3, [r4, #8]
 800ce24:	9302      	str	r3, [sp, #8]
 800ce26:	2308      	movs	r3, #8
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	9200      	str	r2, [sp, #0]
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	464a      	mov	r2, r9
 800ce30:	78a1      	ldrb	r1, [r4, #2]
 800ce32:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ce34:	7c63      	ldrb	r3, [r4, #17]
 800ce36:	b18b      	cbz	r3, 800ce5c <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800ce38:	4b0f      	ldr	r3, [pc, #60]	; (800ce78 <RegionUS915RxConfig+0xac>)
 800ce3a:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <RegionUS915RxConfig+0x9c>)
 800ce3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce40:	310d      	adds	r1, #13
 800ce42:	b2c9      	uxtb	r1, r1
 800ce44:	2001      	movs	r0, #1
 800ce46:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ce48:	4632      	mov	r2, r6
 800ce4a:	4639      	mov	r1, r7
 800ce4c:	7ce0      	ldrb	r0, [r4, #19]
 800ce4e:	f7fe fe4b 	bl	800bae8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ce52:	702e      	strb	r6, [r5, #0]
    return true;
 800ce54:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800ce56:	b00b      	add	sp, #44	; 0x2c
 800ce58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800ce5c:	4b07      	ldr	r3, [pc, #28]	; (800ce7c <RegionUS915RxConfig+0xb0>)
 800ce5e:	5d99      	ldrb	r1, [r3, r6]
 800ce60:	e7ec      	b.n	800ce3c <RegionUS915RxConfig+0x70>
        return false;
 800ce62:	2000      	movs	r0, #0
 800ce64:	e7f7      	b.n	800ce56 <RegionUS915RxConfig+0x8a>
 800ce66:	bf00      	nop
 800ce68:	08011ea4 	.word	0x08011ea4
 800ce6c:	000927c0 	.word	0x000927c0
 800ce70:	370870a0 	.word	0x370870a0
 800ce74:	08011988 	.word	0x08011988
 800ce78:	08011998 	.word	0x08011998
 800ce7c:	080119a8 	.word	0x080119a8

0800ce80 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ce80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce84:	b08d      	sub	sp, #52	; 0x34
 800ce86:	4604      	mov	r4, r0
 800ce88:	468b      	mov	fp, r1
 800ce8a:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800ce8c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800ce90:	4b32      	ldr	r3, [pc, #200]	; (800cf5c <RegionUS915TxConfig+0xdc>)
 800ce92:	f913 a002 	ldrsb.w	sl, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800ce96:	4b32      	ldr	r3, [pc, #200]	; (800cf60 <RegionUS915TxConfig+0xe0>)
 800ce98:	6818      	ldr	r0, [r3, #0]
 800ce9a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800cf64 <RegionUS915TxConfig+0xe4>
 800ce9e:	f8d9 3000 	ldr.w	r3, [r9]
 800cea2:	7821      	ldrb	r1, [r4, #0]
 800cea4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cea8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ceac:	7a49      	ldrb	r1, [r1, #9]
 800ceae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ceb2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ceb6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ceba:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800cebe:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800cec2:	f7ff fce3 	bl	800c88c <LimitTxPower>
 800cec6:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800cec8:	4927      	ldr	r1, [pc, #156]	; (800cf68 <RegionUS915TxConfig+0xe8>)
 800ceca:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800cece:	f7fe fdf9 	bl	800bac4 <RegionCommonGetBandwidth>
 800ced2:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800ced4:	2200      	movs	r2, #0
 800ced6:	4925      	ldr	r1, [pc, #148]	; (800cf6c <RegionUS915TxConfig+0xec>)
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7fe fd0b 	bl	800b8f4 <RegionCommonComputeTxPower>
 800cede:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800cee0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800cf70 <RegionUS915TxConfig+0xf0>
 800cee4:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800cee8:	f8d9 1000 	ldr.w	r1, [r9]
 800ceec:	7823      	ldrb	r3, [r4, #0]
 800ceee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cef2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800cef6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800cef8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800cefc:	9308      	str	r3, [sp, #32]
 800cefe:	2200      	movs	r2, #0
 800cf00:	9207      	str	r2, [sp, #28]
 800cf02:	9206      	str	r2, [sp, #24]
 800cf04:	9205      	str	r2, [sp, #20]
 800cf06:	2501      	movs	r5, #1
 800cf08:	9504      	str	r5, [sp, #16]
 800cf0a:	9203      	str	r2, [sp, #12]
 800cf0c:	2308      	movs	r3, #8
 800cf0e:	9302      	str	r3, [sp, #8]
 800cf10:	9501      	str	r5, [sp, #4]
 800cf12:	f8cd a000 	str.w	sl, [sp]
 800cf16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800cf20:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800cf22:	f8d9 2000 	ldr.w	r2, [r9]
 800cf26:	7823      	ldrb	r3, [r4, #0]
 800cf28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cf2c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800cf30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cf34:	f7fe fe0a 	bl	800bb4c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800cf38:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800cf3c:	7b21      	ldrb	r1, [r4, #12]
 800cf3e:	4628      	mov	r0, r5
 800cf40:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800cf42:	89a1      	ldrh	r1, [r4, #12]
 800cf44:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800cf48:	f7ff fc82 	bl	800c850 <GetTimeOnAir>
 800cf4c:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800cf4e:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800cf52:	4628      	mov	r0, r5
 800cf54:	b00d      	add	sp, #52	; 0x34
 800cf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5a:	bf00      	nop
 800cf5c:	08011988 	.word	0x08011988
 800cf60:	200011e0 	.word	0x200011e0
 800cf64:	200011e4 	.word	0x200011e4
 800cf68:	08011934 	.word	0x08011934
 800cf6c:	41f00000 	.word	0x41f00000
 800cf70:	08011ea4 	.word	0x08011ea4

0800cf74 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800cf74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf78:	b091      	sub	sp, #68	; 0x44
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	4688      	mov	r8, r1
 800cf7e:	4617      	mov	r7, r2
 800cf80:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800cf82:	2400      	movs	r4, #0
 800cf84:	940e      	str	r4, [sp, #56]	; 0x38
 800cf86:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800cf8a:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf8c:	940c      	str	r4, [sp, #48]	; 0x30
 800cf8e:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800cf90:	4ba1      	ldr	r3, [pc, #644]	; (800d218 <RegionUS915LinkAdrReq+0x2a4>)
 800cf92:	6819      	ldr	r1, [r3, #0]
 800cf94:	2206      	movs	r2, #6
 800cf96:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800cf9a:	a80b      	add	r0, sp, #44	; 0x2c
 800cf9c:	f7fe fb45 	bl	800b62a <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cfa0:	e00d      	b.n	800cfbe <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800cfa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfa6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800cfaa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800cfae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800cfb2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800cfb6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800cfba:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cfbe:	7a2b      	ldrb	r3, [r5, #8]
 800cfc0:	42a3      	cmp	r3, r4
 800cfc2:	f240 808b 	bls.w	800d0dc <RegionUS915LinkAdrReq+0x168>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800cfc6:	6868      	ldr	r0, [r5, #4]
 800cfc8:	a90e      	add	r1, sp, #56	; 0x38
 800cfca:	4420      	add	r0, r4
 800cfcc:	f7fe fbde 	bl	800b78c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	f000 8082 	beq.w	800d0dc <RegionUS915LinkAdrReq+0x168>
        bytesProcessed += nextIndex;
 800cfd8:	4423      	add	r3, r4
 800cfda:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 800cfdc:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800cfe0:	f1bc 0f06 	cmp.w	ip, #6
 800cfe4:	d0dd      	beq.n	800cfa2 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800cfe6:	f1bc 0f07 	cmp.w	ip, #7
 800cfea:	d00a      	beq.n	800d002 <RegionUS915LinkAdrReq+0x8e>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800cfec:	f1bc 0f05 	cmp.w	ip, #5
 800cff0:	d071      	beq.n	800d0d6 <RegionUS915LinkAdrReq+0x162>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800cff2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800cff6:	aa10      	add	r2, sp, #64	; 0x40
 800cff8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800cffc:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800d000:	e7dd      	b.n	800cfbe <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800d002:	2300      	movs	r3, #0
 800d004:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800d008:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800d00c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800d010:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d014:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800d018:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d01c:	e7cf      	b.n	800cfbe <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800d01e:	aa10      	add	r2, sp, #64	; 0x40
 800d020:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d024:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d028:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800d02c:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d030:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d034:	ea4c 0202 	orr.w	r2, ip, r2
 800d038:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                        cntChannelMask++;
 800d03c:	3101      	adds	r1, #1
 800d03e:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800d040:	3301      	adds	r3, #1
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b07      	cmp	r3, #7
 800d046:	d8ba      	bhi.n	800cfbe <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800d048:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800d04c:	f04f 0c01 	mov.w	ip, #1
 800d050:	fa0c fc03 	lsl.w	ip, ip, r3
 800d054:	ea12 0f0c 	tst.w	r2, ip
 800d058:	d012      	beq.n	800d080 <RegionUS915LinkAdrReq+0x10c>
                    if( ( i % 2 ) == 0 )
 800d05a:	f013 0f01 	tst.w	r3, #1
 800d05e:	d1de      	bne.n	800d01e <RegionUS915LinkAdrReq+0xaa>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800d060:	aa10      	add	r2, sp, #64	; 0x40
 800d062:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d066:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d06a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800d06e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d072:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d076:	ea4c 0202 	orr.w	r2, ip, r2
 800d07a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d07e:	e7df      	b.n	800d040 <RegionUS915LinkAdrReq+0xcc>
                    if( ( i % 2 ) == 0 )
 800d080:	f013 0f01 	tst.w	r3, #1
 800d084:	d113      	bne.n	800d0ae <RegionUS915LinkAdrReq+0x13a>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800d086:	aa10      	add	r2, sp, #64	; 0x40
 800d088:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d08c:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d090:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d094:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d098:	ea6f 0c0c 	mvn.w	ip, ip
 800d09c:	fa0f fc8c 	sxth.w	ip, ip
 800d0a0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d0a4:	ea0c 0c02 	and.w	ip, ip, r2
 800d0a8:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
 800d0ac:	e7c8      	b.n	800d040 <RegionUS915LinkAdrReq+0xcc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800d0ae:	aa10      	add	r2, sp, #64	; 0x40
 800d0b0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800d0b4:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800d0b8:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d0bc:	ea6f 0c0c 	mvn.w	ip, ip
 800d0c0:	fa0f fc8c 	sxth.w	ip, ip
 800d0c4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d0c8:	ea0c 0c02 	and.w	ip, ip, r2
 800d0cc:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                        cntChannelMask++;
 800d0d0:	3101      	adds	r1, #1
 800d0d2:	b2c9      	uxtb	r1, r1
 800d0d4:	e7b4      	b.n	800d040 <RegionUS915LinkAdrReq+0xcc>
            for( uint8_t i = 0; i <= 7; i++ )
 800d0d6:	2300      	movs	r3, #0
            uint8_t cntChannelMask = 0;
 800d0d8:	4619      	mov	r1, r3
 800d0da:	e7b3      	b.n	800d044 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d0dc:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d0e0:	2b03      	cmp	r3, #3
 800d0e2:	dd58      	ble.n	800d196 <RegionUS915LinkAdrReq+0x222>
 800d0e4:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d0ee:	7a6b      	ldrb	r3, [r5, #9]
 800d0f0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800d0f4:	a809      	add	r0, sp, #36	; 0x24
 800d0f6:	f7ff fbe5 	bl	800c8c4 <RegionUS915GetPhyParam>
 800d0fa:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800d0fc:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d100:	7aab      	ldrb	r3, [r5, #10]
 800d102:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d106:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d10a:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d10e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800d112:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d116:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d11a:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d11e:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800d122:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d126:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d12a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d12e:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d132:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800d136:	2348      	movs	r3, #72	; 0x48
 800d138:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800d13c:	ab0b      	add	r3, sp, #44	; 0x2c
 800d13e:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d140:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800d144:	2304      	movs	r3, #4
 800d146:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d14a:	4b33      	ldr	r3, [pc, #204]	; (800d218 <RegionUS915LinkAdrReq+0x2a4>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800d150:	230e      	movs	r3, #14
 800d152:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800d156:	2300      	movs	r3, #0
 800d158:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d160:	ab0e      	add	r3, sp, #56	; 0x38
 800d162:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800d166:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800d16a:	4668      	mov	r0, sp
 800d16c:	f7fe fb2c 	bl	800b7c8 <RegionCommonLinkAdrReqVerifyParams>
 800d170:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d172:	2807      	cmp	r0, #7
 800d174:	d01c      	beq.n	800d1b0 <RegionUS915LinkAdrReq+0x23c>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d176:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d17a:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800d17e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800d182:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800d184:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d188:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800d18a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d18c:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800d18e:	4628      	mov	r0, r5
 800d190:	b011      	add	sp, #68	; 0x44
 800d192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d196:	2204      	movs	r2, #4
 800d198:	2100      	movs	r1, #0
 800d19a:	a80b      	add	r0, sp, #44	; 0x2c
 800d19c:	f7fe fa2f 	bl	800b5fe <RegionCommonCountChannels>
 800d1a0:	2801      	cmp	r0, #1
 800d1a2:	d902      	bls.n	800d1aa <RegionUS915LinkAdrReq+0x236>
 800d1a4:	f04f 0907 	mov.w	r9, #7
 800d1a8:	e79e      	b.n	800d0e8 <RegionUS915LinkAdrReq+0x174>
        status &= 0xFE; // Channel mask KO
 800d1aa:	f04f 0906 	mov.w	r9, #6
 800d1ae:	e79b      	b.n	800d0e8 <RegionUS915LinkAdrReq+0x174>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800d1b0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800d218 <RegionUS915LinkAdrReq+0x2a4>
 800d1b4:	f8d9 0000 	ldr.w	r0, [r9]
 800d1b8:	2206      	movs	r2, #6
 800d1ba:	a90b      	add	r1, sp, #44	; 0x2c
 800d1bc:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d1c0:	f7fe fa33 	bl	800b62a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800d1c4:	4b15      	ldr	r3, [pc, #84]	; (800d21c <RegionUS915LinkAdrReq+0x2a8>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f8d9 2000 	ldr.w	r2, [r9]
 800d1cc:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800d1d0:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800d1d4:	4001      	ands	r1, r0
 800d1d6:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800d1da:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800d1de:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 800d1e2:	4001      	ands	r1, r0
 800d1e4:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800d1e8:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800d1ec:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 800d1f0:	4001      	ands	r1, r0
 800d1f2:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800d1f6:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800d1fa:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 800d1fe:	4001      	ands	r1, r0
 800d200:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d204:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800d208:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800d20c:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800d210:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800d214:	e7af      	b.n	800d176 <RegionUS915LinkAdrReq+0x202>
 800d216:	bf00      	nop
 800d218:	200011e4 	.word	0x200011e4
 800d21c:	200011e0 	.word	0x200011e0

0800d220 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800d224:	6840      	ldr	r0, [r0, #4]
 800d226:	f7ff fae3 	bl	800c7f0 <VerifyRfFreq>
 800d22a:	b310      	cbz	r0, 800d272 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800d22c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800d22e:	220d      	movs	r2, #13
 800d230:	2108      	movs	r1, #8
 800d232:	f994 0000 	ldrsb.w	r0, [r4]
 800d236:	f7fe f984 	bl	800b542 <RegionCommonValueInRange>
 800d23a:	b908      	cbnz	r0, 800d240 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800d23c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d240:	2207      	movs	r2, #7
 800d242:	2105      	movs	r1, #5
 800d244:	f994 0000 	ldrsb.w	r0, [r4]
 800d248:	f7fe f97b 	bl	800b542 <RegionCommonValueInRange>
 800d24c:	2801      	cmp	r0, #1
 800d24e:	d003      	beq.n	800d258 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800d250:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d254:	2b0d      	cmp	r3, #13
 800d256:	dd01      	ble.n	800d25c <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800d258:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800d25c:	2203      	movs	r2, #3
 800d25e:	2100      	movs	r1, #0
 800d260:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d264:	f7fe f96d 	bl	800b542 <RegionCommonValueInRange>
 800d268:	b908      	cbnz	r0, 800d26e <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d26a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800d26e:	4628      	mov	r0, r5
 800d270:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d272:	2506      	movs	r5, #6
 800d274:	e7db      	b.n	800d22e <RegionUS915RxParamSetupReq+0xe>

0800d276 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d27a:	4770      	bx	lr

0800d27c <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d27c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d280:	4770      	bx	lr

0800d282 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d286:	4770      	bx	lr

0800d288 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800d288:	b9b1      	cbnz	r1, 800d2b8 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800d28a:	4b10      	ldr	r3, [pc, #64]	; (800d2cc <RegionUS915AlternateDr+0x44>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800d292:	3301      	adds	r3, #1
 800d294:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800d298:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <RegionUS915AlternateDr+0x44>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 800d2a0:	4b0b      	ldr	r3, [pc, #44]	; (800d2d0 <RegionUS915AlternateDr+0x48>)
 800d2a2:	fba3 1302 	umull	r1, r3, r3, r2
 800d2a6:	085b      	lsrs	r3, r3, #1
 800d2a8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800d2ac:	1ad2      	subs	r2, r2, r3
 800d2ae:	f012 0fff 	tst.w	r2, #255	; 0xff
 800d2b2:	d009      	beq.n	800d2c8 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800d2b4:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800d2b6:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800d2b8:	4b04      	ldr	r3, [pc, #16]	; (800d2cc <RegionUS915AlternateDr+0x44>)
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 800d2c6:	e7e7      	b.n	800d298 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 800d2c8:	2004      	movs	r0, #4
 800d2ca:	4770      	bx	lr
 800d2cc:	200011e0 	.word	0x200011e0
 800d2d0:	38e38e39 	.word	0x38e38e39

0800d2d4 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d8:	b0a4      	sub	sp, #144	; 0x90
 800d2da:	4604      	mov	r4, r0
 800d2dc:	460e      	mov	r6, r1
 800d2de:	4690      	mov	r8, r2
 800d2e0:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800d2e2:	2500      	movs	r5, #0
 800d2e4:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800d2e8:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800d2ec:	9511      	str	r5, [sp, #68]	; 0x44
 800d2ee:	2244      	movs	r2, #68	; 0x44
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	a812      	add	r0, sp, #72	; 0x48
 800d2f4:	f003 ff34 	bl	8011160 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800d2f8:	4b4e      	ldr	r3, [pc, #312]	; (800d434 <RegionUS915NextChannel+0x160>)
 800d2fa:	6818      	ldr	r0, [r3, #0]
 800d2fc:	2204      	movs	r2, #4
 800d2fe:	4629      	mov	r1, r5
 800d300:	3090      	adds	r0, #144	; 0x90
 800d302:	f7fe f97c 	bl	800b5fe <RegionCommonCountChannels>
 800d306:	2800      	cmp	r0, #0
 800d308:	d054      	beq.n	800d3b4 <RegionUS915NextChannel+0xe0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800d30a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d30e:	2b03      	cmp	r3, #3
 800d310:	dd0a      	ble.n	800d328 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800d312:	4b48      	ldr	r3, [pc, #288]	; (800d434 <RegionUS915NextChannel+0x160>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800d31a:	b92a      	cbnz	r2, 800d328 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d31c:	4a46      	ldr	r2, [pc, #280]	; (800d438 <RegionUS915NextChannel+0x164>)
 800d31e:	6812      	ldr	r2, [r2, #0]
 800d320:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800d324:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d328:	7a63      	ldrb	r3, [r4, #9]
 800d32a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d32e:	7a23      	ldrb	r3, [r4, #8]
 800d330:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800d334:	4b3f      	ldr	r3, [pc, #252]	; (800d434 <RegionUS915NextChannel+0x160>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800d33c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d33e:	4a3e      	ldr	r2, [pc, #248]	; (800d438 <RegionUS915NextChannel+0x164>)
 800d340:	6812      	ldr	r2, [r2, #0]
 800d342:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d344:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800d346:	2348      	movs	r3, #72	; 0x48
 800d348:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800d34c:	2300      	movs	r3, #0
 800d34e:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d350:	6823      	ldr	r3, [r4, #0]
 800d352:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d354:	6863      	ldr	r3, [r4, #4]
 800d356:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d358:	7aa3      	ldrb	r3, [r4, #10]
 800d35a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800d35e:	2301      	movs	r3, #1
 800d360:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d364:	ab0c      	add	r3, sp, #48	; 0x30
 800d366:	f104 020c 	add.w	r2, r4, #12
 800d36a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d36e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d372:	7d23      	ldrb	r3, [r4, #20]
 800d374:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d378:	8ae1      	ldrh	r1, [r4, #22]
 800d37a:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d37e:	f7ff fa67 	bl	800c850 <GetTimeOnAir>
 800d382:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d384:	ab03      	add	r3, sp, #12
 800d386:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d388:	f8cd 8004 	str.w	r8, [sp, #4]
 800d38c:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800d396:	aa11      	add	r2, sp, #68	; 0x44
 800d398:	4639      	mov	r1, r7
 800d39a:	a809      	add	r0, sp, #36	; 0x24
 800d39c:	f7fe fb25 	bl	800b9ea <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d141      	bne.n	800d42a <RegionUS915NextChannel+0x156>
    {
        if( nextChanParams->Joined == true )
 800d3a6:	7a63      	ldrb	r3, [r4, #9]
 800d3a8:	b99b      	cbnz	r3, 800d3d2 <RegionUS915NextChannel+0xfe>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800d3aa:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d3ae:	b1eb      	cbz	r3, 800d3ec <RegionUS915NextChannel+0x118>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	e029      	b.n	800d408 <RegionUS915NextChannel+0x134>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800d3b4:	4d1f      	ldr	r5, [pc, #124]	; (800d434 <RegionUS915NextChannel+0x160>)
 800d3b6:	6828      	ldr	r0, [r5, #0]
 800d3b8:	4b1f      	ldr	r3, [pc, #124]	; (800d438 <RegionUS915NextChannel+0x164>)
 800d3ba:	6819      	ldr	r1, [r3, #0]
 800d3bc:	2204      	movs	r2, #4
 800d3be:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800d3c2:	3090      	adds	r0, #144	; 0x90
 800d3c4:	f7fe f931 	bl	800b62a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800d3d0:	e79b      	b.n	800d30a <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d3d2:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800d3d6:	3901      	subs	r1, #1
 800d3d8:	f000 ff7a 	bl	800e2d0 <randr>
 800d3dc:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800d3e0:	eb0d 0003 	add.w	r0, sp, r3
 800d3e4:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800d3e8:	7033      	strb	r3, [r6, #0]
 800d3ea:	e017      	b.n	800d41c <RegionUS915NextChannel+0x148>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800d3ec:	4b11      	ldr	r3, [pc, #68]	; (800d434 <RegionUS915NextChannel+0x160>)
 800d3ee:	6818      	ldr	r0, [r3, #0]
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800d3f6:	3090      	adds	r0, #144	; 0x90
 800d3f8:	f7fd ff86 	bl	800b308 <RegionBaseUSComputeNext125kHzJoinChannel>
 800d3fc:	2803      	cmp	r0, #3
 800d3fe:	d10d      	bne.n	800d41c <RegionUS915NextChannel+0x148>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800d400:	4605      	mov	r5, r0
 800d402:	e012      	b.n	800d42a <RegionUS915NextChannel+0x156>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800d404:	3301      	adds	r3, #1
 800d406:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800d408:	4a0a      	ldr	r2, [pc, #40]	; (800d434 <RegionUS915NextChannel+0x160>)
 800d40a:	6812      	ldr	r2, [r2, #0]
 800d40c:	f892 0098 	ldrb.w	r0, [r2, #152]	; 0x98
 800d410:	4118      	asrs	r0, r3
 800d412:	f010 0f01 	tst.w	r0, #1
 800d416:	d0f5      	beq.n	800d404 <RegionUS915NextChannel+0x130>
                }
                *channel = 64 + i;
 800d418:	3340      	adds	r3, #64	; 0x40
 800d41a:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800d41c:	4b05      	ldr	r3, [pc, #20]	; (800d434 <RegionUS915NextChannel+0x160>)
 800d41e:	6818      	ldr	r0, [r3, #0]
 800d420:	2248      	movs	r2, #72	; 0x48
 800d422:	7831      	ldrb	r1, [r6, #0]
 800d424:	3090      	adds	r0, #144	; 0x90
 800d426:	f7fe f8ce 	bl	800b5c6 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800d42a:	4628      	mov	r0, r5
 800d42c:	b024      	add	sp, #144	; 0x90
 800d42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d432:	bf00      	nop
 800d434:	200011e0 	.word	0x200011e0
 800d438:	200011e4 	.word	0x200011e4

0800d43c <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 800d440:	4b14      	ldr	r3, [pc, #80]	; (800d494 <RegionUS915SetContinuousWave+0x58>)
 800d442:	6819      	ldr	r1, [r3, #0]
 800d444:	4d14      	ldr	r5, [pc, #80]	; (800d498 <RegionUS915SetContinuousWave+0x5c>)
 800d446:	682b      	ldr	r3, [r5, #0]
 800d448:	7802      	ldrb	r2, [r0, #0]
 800d44a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d44e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d452:	7a52      	ldrb	r2, [r2, #9]
 800d454:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d458:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d45c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800d460:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800d464:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800d468:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d46c:	f7ff fa0e 	bl	800c88c <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d470:	682a      	ldr	r2, [r5, #0]
 800d472:	7823      	ldrb	r3, [r4, #0]
 800d474:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d478:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800d47c:	2200      	movs	r2, #0
 800d47e:	4907      	ldr	r1, [pc, #28]	; (800d49c <RegionUS915SetContinuousWave+0x60>)
 800d480:	f7fe fa38 	bl	800b8f4 <RegionCommonComputeTxPower>
 800d484:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d486:	4b06      	ldr	r3, [pc, #24]	; (800d4a0 <RegionUS915SetContinuousWave+0x64>)
 800d488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d48a:	89a2      	ldrh	r2, [r4, #12]
 800d48c:	4628      	mov	r0, r5
 800d48e:	4798      	blx	r3
#endif /* REGION_US915 */
}
 800d490:	bd38      	pop	{r3, r4, r5, pc}
 800d492:	bf00      	nop
 800d494:	200011e0 	.word	0x200011e0
 800d498:	200011e4 	.word	0x200011e4
 800d49c:	41f00000 	.word	0x41f00000
 800d4a0:	08011ea4 	.word	0x08011ea4

0800d4a4 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800d4a4:	4b04      	ldr	r3, [pc, #16]	; (800d4b8 <RegionUS915ApplyDrOffset+0x14>)
 800d4a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d4aa:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	db01      	blt.n	800d4b4 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800d4b0:	b2c0      	uxtb	r0, r0
 800d4b2:	4770      	bx	lr
        datarate = DR_0;
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	e7fb      	b.n	800d4b0 <RegionUS915ApplyDrOffset+0xc>
 800d4b8:	08011974 	.word	0x08011974

0800d4bc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800d4c0:	2210      	movs	r2, #16
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	30f1      	adds	r0, #241	; 0xf1
 800d4c6:	f000 ff28 	bl	800e31a <memset1>
    ctx->M_n = 0;
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d4d0:	22f0      	movs	r2, #240	; 0xf0
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 ff21 	bl	800e31a <memset1>
}
 800d4d8:	bd10      	pop	{r4, pc}

0800d4da <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d4da:	b508      	push	{r3, lr}
 800d4dc:	4602      	mov	r2, r0
 800d4de:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d4e0:	2110      	movs	r1, #16
 800d4e2:	f000 fb3b 	bl	800db5c <lorawan_aes_set_key>
}
 800d4e6:	bd08      	pop	{r3, pc}

0800d4e8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ec:	b084      	sub	sp, #16
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	460d      	mov	r5, r1
 800d4f2:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d4f4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d054      	beq.n	800d5a6 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d4fc:	f1c3 0810 	rsb	r8, r3, #16
 800d500:	4647      	mov	r7, r8
 800d502:	4590      	cmp	r8, r2
 800d504:	bf28      	it	cs
 800d506:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d508:	f200 1001 	addw	r0, r0, #257	; 0x101
 800d50c:	b2ba      	uxth	r2, r7
 800d50e:	4418      	add	r0, r3
 800d510:	f000 feeb 	bl	800e2ea <memcpy1>
        ctx->M_n += mlen;
 800d514:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800d518:	443b      	add	r3, r7
 800d51a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d51e:	2b0f      	cmp	r3, #15
 800d520:	d94d      	bls.n	800d5be <AES_CMAC_Update+0xd6>
 800d522:	45b0      	cmp	r8, r6
 800d524:	d24b      	bcs.n	800d5be <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800d526:	2300      	movs	r3, #0
 800d528:	e008      	b.n	800d53c <AES_CMAC_Update+0x54>
 800d52a:	18e2      	adds	r2, r4, r3
 800d52c:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800d530:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800d534:	4041      	eors	r1, r0
 800d536:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800d53a:	3301      	adds	r3, #1
 800d53c:	2b0f      	cmp	r3, #15
 800d53e:	ddf4      	ble.n	800d52a <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d540:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800d544:	2210      	movs	r2, #16
 800d546:	4641      	mov	r1, r8
 800d548:	4668      	mov	r0, sp
 800d54a:	f000 fece 	bl	800e2ea <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d54e:	4622      	mov	r2, r4
 800d550:	4669      	mov	r1, sp
 800d552:	4668      	mov	r0, sp
 800d554:	f000 fb86 	bl	800dc64 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d558:	2210      	movs	r2, #16
 800d55a:	4669      	mov	r1, sp
 800d55c:	4640      	mov	r0, r8
 800d55e:	f000 fec4 	bl	800e2ea <memcpy1>

        data += mlen;
 800d562:	443d      	add	r5, r7
        len -= mlen;
 800d564:	1bf6      	subs	r6, r6, r7
 800d566:	e01e      	b.n	800d5a6 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800d568:	eb04 0e03 	add.w	lr, r4, r3
 800d56c:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800d570:	5cea      	ldrb	r2, [r5, r3]
 800d572:	ea8c 0c02 	eor.w	ip, ip, r2
 800d576:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800d57a:	3301      	adds	r3, #1
 800d57c:	2b0f      	cmp	r3, #15
 800d57e:	ddf3      	ble.n	800d568 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d580:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800d584:	2210      	movs	r2, #16
 800d586:	4639      	mov	r1, r7
 800d588:	4668      	mov	r0, sp
 800d58a:	f000 feae 	bl	800e2ea <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d58e:	4622      	mov	r2, r4
 800d590:	4669      	mov	r1, sp
 800d592:	4668      	mov	r0, sp
 800d594:	f000 fb66 	bl	800dc64 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d598:	2210      	movs	r2, #16
 800d59a:	4669      	mov	r1, sp
 800d59c:	4638      	mov	r0, r7
 800d59e:	f000 fea4 	bl	800e2ea <memcpy1>

        data += 16;
 800d5a2:	3510      	adds	r5, #16
        len -= 16;
 800d5a4:	3e10      	subs	r6, #16
    while( len > 16 )
 800d5a6:	2e10      	cmp	r6, #16
 800d5a8:	d901      	bls.n	800d5ae <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e7e6      	b.n	800d57c <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d5ae:	b2b2      	uxth	r2, r6
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	f204 1001 	addw	r0, r4, #257	; 0x101
 800d5b6:	f000 fe98 	bl	800e2ea <memcpy1>
    ctx->M_n = len;
 800d5ba:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800d5be:	b004      	add	sp, #16
 800d5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5c4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d5c4:	b530      	push	{r4, r5, lr}
 800d5c6:	b089      	sub	sp, #36	; 0x24
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d5cc:	2210      	movs	r2, #16
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	eb0d 0002 	add.w	r0, sp, r2
 800d5d4:	f000 fea1 	bl	800e31a <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d5d8:	4622      	mov	r2, r4
 800d5da:	a904      	add	r1, sp, #16
 800d5dc:	4608      	mov	r0, r1
 800d5de:	f000 fb41 	bl	800dc64 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d5e2:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	db01      	blt.n	800d5ee <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	e030      	b.n	800d650 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	2b0e      	cmp	r3, #14
 800d5f2:	dc11      	bgt.n	800d618 <AES_CMAC_Final+0x54>
 800d5f4:	f103 0220 	add.w	r2, r3, #32
 800d5f8:	eb0d 0102 	add.w	r1, sp, r2
 800d5fc:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d600:	3301      	adds	r3, #1
 800d602:	f103 0220 	add.w	r2, r3, #32
 800d606:	446a      	add	r2, sp
 800d608:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d60c:	09d2      	lsrs	r2, r2, #7
 800d60e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d612:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d616:	e7eb      	b.n	800d5f0 <AES_CMAC_Final+0x2c>
 800d618:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d61c:	005b      	lsls	r3, r3, #1
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800d624:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800d628:	f88d 301f 	strb.w	r3, [sp, #31]
 800d62c:	e017      	b.n	800d65e <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800d62e:	f103 0220 	add.w	r2, r3, #32
 800d632:	eb0d 0102 	add.w	r1, sp, r2
 800d636:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d63a:	3301      	adds	r3, #1
 800d63c:	f103 0220 	add.w	r2, r3, #32
 800d640:	446a      	add	r2, sp
 800d642:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d646:	09d2      	lsrs	r2, r2, #7
 800d648:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d64c:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d650:	2b0e      	cmp	r3, #14
 800d652:	ddec      	ble.n	800d62e <AES_CMAC_Final+0x6a>
 800d654:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d658:	005b      	lsls	r3, r3, #1
 800d65a:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800d65e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800d662:	2810      	cmp	r0, #16
 800d664:	d014      	beq.n	800d690 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d666:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	db30      	blt.n	800d6d0 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800d66e:	2300      	movs	r3, #0
 800d670:	e041      	b.n	800d6f6 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800d672:	18e1      	adds	r1, r4, r3
 800d674:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800d678:	f103 0020 	add.w	r0, r3, #32
 800d67c:	4468      	add	r0, sp
 800d67e:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800d682:	4042      	eors	r2, r0
 800d684:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800d688:	3301      	adds	r3, #1
 800d68a:	2b0f      	cmp	r3, #15
 800d68c:	ddf1      	ble.n	800d672 <AES_CMAC_Final+0xae>
 800d68e:	e059      	b.n	800d744 <AES_CMAC_Final+0x180>
 800d690:	2300      	movs	r3, #0
 800d692:	e7fa      	b.n	800d68a <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800d694:	f103 0220 	add.w	r2, r3, #32
 800d698:	eb0d 0102 	add.w	r1, sp, r2
 800d69c:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	f103 0220 	add.w	r2, r3, #32
 800d6a6:	446a      	add	r2, sp
 800d6a8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d6ac:	09d2      	lsrs	r2, r2, #7
 800d6ae:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800d6b2:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d6b6:	2b0e      	cmp	r3, #14
 800d6b8:	ddec      	ble.n	800d694 <AES_CMAC_Final+0xd0>
 800d6ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d6be:	005b      	lsls	r3, r3, #1
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800d6c6:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800d6ca:	f88d 301f 	strb.w	r3, [sp, #31]
 800d6ce:	e019      	b.n	800d704 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	e7f0      	b.n	800d6b6 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800d6d4:	f103 0220 	add.w	r2, r3, #32
 800d6d8:	eb0d 0102 	add.w	r1, sp, r2
 800d6dc:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	f103 0220 	add.w	r2, r3, #32
 800d6e6:	446a      	add	r2, sp
 800d6e8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d6ec:	09d2      	lsrs	r2, r2, #7
 800d6ee:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800d6f2:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d6f6:	2b0e      	cmp	r3, #14
 800d6f8:	ddec      	ble.n	800d6d4 <AES_CMAC_Final+0x110>
 800d6fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800d704:	4420      	add	r0, r4
 800d706:	2380      	movs	r3, #128	; 0x80
 800d708:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d70c:	e003      	b.n	800d716 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800d70e:	4423      	add	r3, r4
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d716:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800d71a:	3301      	adds	r3, #1
 800d71c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800d720:	2b0f      	cmp	r3, #15
 800d722:	d9f4      	bls.n	800d70e <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800d724:	2300      	movs	r3, #0
 800d726:	e00b      	b.n	800d740 <AES_CMAC_Final+0x17c>
 800d728:	18e1      	adds	r1, r4, r3
 800d72a:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800d72e:	f103 0020 	add.w	r0, r3, #32
 800d732:	4468      	add	r0, sp
 800d734:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800d738:	4042      	eors	r2, r0
 800d73a:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800d73e:	3301      	adds	r3, #1
 800d740:	2b0f      	cmp	r3, #15
 800d742:	ddf1      	ble.n	800d728 <AES_CMAC_Final+0x164>
 800d744:	2300      	movs	r3, #0
 800d746:	e009      	b.n	800d75c <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800d748:	18e2      	adds	r2, r4, r3
 800d74a:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800d74e:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800d752:	ea8c 0c01 	eor.w	ip, ip, r1
 800d756:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800d75a:	3301      	adds	r3, #1
 800d75c:	2b0f      	cmp	r3, #15
 800d75e:	ddf3      	ble.n	800d748 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d760:	2210      	movs	r2, #16
 800d762:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800d766:	4668      	mov	r0, sp
 800d768:	f000 fdbf 	bl	800e2ea <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800d76c:	4622      	mov	r2, r4
 800d76e:	4629      	mov	r1, r5
 800d770:	4668      	mov	r0, sp
 800d772:	f000 fa77 	bl	800dc64 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800d776:	2210      	movs	r2, #16
 800d778:	2100      	movs	r1, #0
 800d77a:	eb0d 0002 	add.w	r0, sp, r2
 800d77e:	f000 fdcc 	bl	800e31a <memset1>
}
 800d782:	b009      	add	sp, #36	; 0x24
 800d784:	bd30      	pop	{r4, r5, pc}

0800d786 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800d786:	780b      	ldrb	r3, [r1, #0]
 800d788:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800d78a:	784b      	ldrb	r3, [r1, #1]
 800d78c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800d78e:	788b      	ldrb	r3, [r1, #2]
 800d790:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800d792:	78cb      	ldrb	r3, [r1, #3]
 800d794:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800d796:	790b      	ldrb	r3, [r1, #4]
 800d798:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800d79a:	794b      	ldrb	r3, [r1, #5]
 800d79c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800d79e:	798b      	ldrb	r3, [r1, #6]
 800d7a0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800d7a2:	79cb      	ldrb	r3, [r1, #7]
 800d7a4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800d7a6:	7a0b      	ldrb	r3, [r1, #8]
 800d7a8:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800d7aa:	7a4b      	ldrb	r3, [r1, #9]
 800d7ac:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d7ae:	7a8b      	ldrb	r3, [r1, #10]
 800d7b0:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d7b2:	7acb      	ldrb	r3, [r1, #11]
 800d7b4:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d7b6:	7b0b      	ldrb	r3, [r1, #12]
 800d7b8:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d7ba:	7b4b      	ldrb	r3, [r1, #13]
 800d7bc:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d7be:	7b8b      	ldrb	r3, [r1, #14]
 800d7c0:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d7c2:	7bcb      	ldrb	r3, [r1, #15]
 800d7c4:	73c3      	strb	r3, [r0, #15]
#endif
}
 800d7c6:	4770      	bx	lr

0800d7c8 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800d7c8:	e004      	b.n	800d7d4 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d7ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7ce:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	1e53      	subs	r3, r2, #1
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	2a00      	cmp	r2, #0
 800d7da:	d1f6      	bne.n	800d7ca <copy_block_nn+0x2>
}
 800d7dc:	4770      	bx	lr

0800d7de <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800d7de:	780b      	ldrb	r3, [r1, #0]
 800d7e0:	7802      	ldrb	r2, [r0, #0]
 800d7e2:	4053      	eors	r3, r2
 800d7e4:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800d7e6:	784b      	ldrb	r3, [r1, #1]
 800d7e8:	7842      	ldrb	r2, [r0, #1]
 800d7ea:	4053      	eors	r3, r2
 800d7ec:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800d7ee:	788b      	ldrb	r3, [r1, #2]
 800d7f0:	7882      	ldrb	r2, [r0, #2]
 800d7f2:	4053      	eors	r3, r2
 800d7f4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800d7f6:	78cb      	ldrb	r3, [r1, #3]
 800d7f8:	78c2      	ldrb	r2, [r0, #3]
 800d7fa:	4053      	eors	r3, r2
 800d7fc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800d7fe:	790b      	ldrb	r3, [r1, #4]
 800d800:	7902      	ldrb	r2, [r0, #4]
 800d802:	4053      	eors	r3, r2
 800d804:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800d806:	794b      	ldrb	r3, [r1, #5]
 800d808:	7942      	ldrb	r2, [r0, #5]
 800d80a:	4053      	eors	r3, r2
 800d80c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800d80e:	798b      	ldrb	r3, [r1, #6]
 800d810:	7982      	ldrb	r2, [r0, #6]
 800d812:	4053      	eors	r3, r2
 800d814:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800d816:	79cb      	ldrb	r3, [r1, #7]
 800d818:	79c2      	ldrb	r2, [r0, #7]
 800d81a:	4053      	eors	r3, r2
 800d81c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800d81e:	7a0b      	ldrb	r3, [r1, #8]
 800d820:	7a02      	ldrb	r2, [r0, #8]
 800d822:	4053      	eors	r3, r2
 800d824:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800d826:	7a4b      	ldrb	r3, [r1, #9]
 800d828:	7a42      	ldrb	r2, [r0, #9]
 800d82a:	4053      	eors	r3, r2
 800d82c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800d82e:	7a8b      	ldrb	r3, [r1, #10]
 800d830:	7a82      	ldrb	r2, [r0, #10]
 800d832:	4053      	eors	r3, r2
 800d834:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800d836:	7acb      	ldrb	r3, [r1, #11]
 800d838:	7ac2      	ldrb	r2, [r0, #11]
 800d83a:	4053      	eors	r3, r2
 800d83c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800d83e:	7b0b      	ldrb	r3, [r1, #12]
 800d840:	7b02      	ldrb	r2, [r0, #12]
 800d842:	4053      	eors	r3, r2
 800d844:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800d846:	7b4b      	ldrb	r3, [r1, #13]
 800d848:	7b42      	ldrb	r2, [r0, #13]
 800d84a:	4053      	eors	r3, r2
 800d84c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d84e:	7b8b      	ldrb	r3, [r1, #14]
 800d850:	7b82      	ldrb	r2, [r0, #14]
 800d852:	4053      	eors	r3, r2
 800d854:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d856:	7bcb      	ldrb	r3, [r1, #15]
 800d858:	7bc2      	ldrb	r2, [r0, #15]
 800d85a:	4053      	eors	r3, r2
 800d85c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800d85e:	4770      	bx	lr

0800d860 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800d860:	780b      	ldrb	r3, [r1, #0]
 800d862:	f892 c000 	ldrb.w	ip, [r2]
 800d866:	ea83 030c 	eor.w	r3, r3, ip
 800d86a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800d86c:	784b      	ldrb	r3, [r1, #1]
 800d86e:	f892 c001 	ldrb.w	ip, [r2, #1]
 800d872:	ea83 030c 	eor.w	r3, r3, ip
 800d876:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800d878:	788b      	ldrb	r3, [r1, #2]
 800d87a:	f892 c002 	ldrb.w	ip, [r2, #2]
 800d87e:	ea83 030c 	eor.w	r3, r3, ip
 800d882:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800d884:	78cb      	ldrb	r3, [r1, #3]
 800d886:	f892 c003 	ldrb.w	ip, [r2, #3]
 800d88a:	ea83 030c 	eor.w	r3, r3, ip
 800d88e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800d890:	790b      	ldrb	r3, [r1, #4]
 800d892:	f892 c004 	ldrb.w	ip, [r2, #4]
 800d896:	ea83 030c 	eor.w	r3, r3, ip
 800d89a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800d89c:	794b      	ldrb	r3, [r1, #5]
 800d89e:	f892 c005 	ldrb.w	ip, [r2, #5]
 800d8a2:	ea83 030c 	eor.w	r3, r3, ip
 800d8a6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800d8a8:	798b      	ldrb	r3, [r1, #6]
 800d8aa:	f892 c006 	ldrb.w	ip, [r2, #6]
 800d8ae:	ea83 030c 	eor.w	r3, r3, ip
 800d8b2:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800d8b4:	79cb      	ldrb	r3, [r1, #7]
 800d8b6:	f892 c007 	ldrb.w	ip, [r2, #7]
 800d8ba:	ea83 030c 	eor.w	r3, r3, ip
 800d8be:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800d8c0:	7a0b      	ldrb	r3, [r1, #8]
 800d8c2:	f892 c008 	ldrb.w	ip, [r2, #8]
 800d8c6:	ea83 030c 	eor.w	r3, r3, ip
 800d8ca:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800d8cc:	7a4b      	ldrb	r3, [r1, #9]
 800d8ce:	f892 c009 	ldrb.w	ip, [r2, #9]
 800d8d2:	ea83 030c 	eor.w	r3, r3, ip
 800d8d6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800d8d8:	7a8b      	ldrb	r3, [r1, #10]
 800d8da:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800d8de:	ea83 030c 	eor.w	r3, r3, ip
 800d8e2:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800d8e4:	7acb      	ldrb	r3, [r1, #11]
 800d8e6:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800d8ea:	ea83 030c 	eor.w	r3, r3, ip
 800d8ee:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800d8f0:	7b0b      	ldrb	r3, [r1, #12]
 800d8f2:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800d8f6:	ea83 030c 	eor.w	r3, r3, ip
 800d8fa:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800d8fc:	7b4b      	ldrb	r3, [r1, #13]
 800d8fe:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800d902:	ea83 030c 	eor.w	r3, r3, ip
 800d906:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800d908:	7b8b      	ldrb	r3, [r1, #14]
 800d90a:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800d90e:	ea83 030c 	eor.w	r3, r3, ip
 800d912:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800d914:	7bcb      	ldrb	r3, [r1, #15]
 800d916:	7bd2      	ldrb	r2, [r2, #15]
 800d918:	4053      	eors	r3, r2
 800d91a:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800d91c:	4770      	bx	lr

0800d91e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800d91e:	b508      	push	{r3, lr}
    xor_block(d, k);
 800d920:	f7ff ff5d 	bl	800d7de <xor_block>
}
 800d924:	bd08      	pop	{r3, pc}
	...

0800d928 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800d928:	7802      	ldrb	r2, [r0, #0]
 800d92a:	4b18      	ldr	r3, [pc, #96]	; (800d98c <shift_sub_rows+0x64>)
 800d92c:	5c9a      	ldrb	r2, [r3, r2]
 800d92e:	7002      	strb	r2, [r0, #0]
 800d930:	7902      	ldrb	r2, [r0, #4]
 800d932:	5c9a      	ldrb	r2, [r3, r2]
 800d934:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800d936:	7a02      	ldrb	r2, [r0, #8]
 800d938:	5c9a      	ldrb	r2, [r3, r2]
 800d93a:	7202      	strb	r2, [r0, #8]
 800d93c:	7b02      	ldrb	r2, [r0, #12]
 800d93e:	5c9a      	ldrb	r2, [r3, r2]
 800d940:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800d942:	7842      	ldrb	r2, [r0, #1]
 800d944:	7941      	ldrb	r1, [r0, #5]
 800d946:	5c59      	ldrb	r1, [r3, r1]
 800d948:	7041      	strb	r1, [r0, #1]
 800d94a:	7a41      	ldrb	r1, [r0, #9]
 800d94c:	5c59      	ldrb	r1, [r3, r1]
 800d94e:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d950:	7b41      	ldrb	r1, [r0, #13]
 800d952:	5c59      	ldrb	r1, [r3, r1]
 800d954:	7241      	strb	r1, [r0, #9]
 800d956:	5c9a      	ldrb	r2, [r3, r2]
 800d958:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d95a:	7882      	ldrb	r2, [r0, #2]
 800d95c:	7a81      	ldrb	r1, [r0, #10]
 800d95e:	5c59      	ldrb	r1, [r3, r1]
 800d960:	7081      	strb	r1, [r0, #2]
 800d962:	5c9a      	ldrb	r2, [r3, r2]
 800d964:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d966:	7982      	ldrb	r2, [r0, #6]
 800d968:	7b81      	ldrb	r1, [r0, #14]
 800d96a:	5c59      	ldrb	r1, [r3, r1]
 800d96c:	7181      	strb	r1, [r0, #6]
 800d96e:	5c9a      	ldrb	r2, [r3, r2]
 800d970:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d972:	7bc2      	ldrb	r2, [r0, #15]
 800d974:	7ac1      	ldrb	r1, [r0, #11]
 800d976:	5c59      	ldrb	r1, [r3, r1]
 800d978:	73c1      	strb	r1, [r0, #15]
 800d97a:	79c1      	ldrb	r1, [r0, #7]
 800d97c:	5c59      	ldrb	r1, [r3, r1]
 800d97e:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d980:	78c1      	ldrb	r1, [r0, #3]
 800d982:	5c59      	ldrb	r1, [r3, r1]
 800d984:	71c1      	strb	r1, [r0, #7]
 800d986:	5c9b      	ldrb	r3, [r3, r2]
 800d988:	70c3      	strb	r3, [r0, #3]
}
 800d98a:	4770      	bx	lr
 800d98c:	08011bb8 	.word	0x08011bb8

0800d990 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d994:	b084      	sub	sp, #16
 800d996:	4604      	mov	r4, r0
    block_copy(st, dt);
 800d998:	4601      	mov	r1, r0
 800d99a:	4668      	mov	r0, sp
 800d99c:	f7ff fef3 	bl	800d786 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d9a0:	f89d c000 	ldrb.w	ip, [sp]
 800d9a4:	4b6a      	ldr	r3, [pc, #424]	; (800db50 <mix_sub_columns+0x1c0>)
 800d9a6:	f813 000c 	ldrb.w	r0, [r3, ip]
 800d9aa:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d9ae:	4a69      	ldr	r2, [pc, #420]	; (800db54 <mix_sub_columns+0x1c4>)
 800d9b0:	f812 9008 	ldrb.w	r9, [r2, r8]
 800d9b4:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800d9b8:	4967      	ldr	r1, [pc, #412]	; (800db58 <mix_sub_columns+0x1c8>)
 800d9ba:	f811 500e 	ldrb.w	r5, [r1, lr]
 800d9be:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800d9c2:	5dce      	ldrb	r6, [r1, r7]
 800d9c4:	ea80 0009 	eor.w	r0, r0, r9
 800d9c8:	4068      	eors	r0, r5
 800d9ca:	4070      	eors	r0, r6
 800d9cc:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d9ce:	f811 000c 	ldrb.w	r0, [r1, ip]
 800d9d2:	f813 a008 	ldrb.w	sl, [r3, r8]
 800d9d6:	f812 900e 	ldrb.w	r9, [r2, lr]
 800d9da:	ea80 0a0a 	eor.w	sl, r0, sl
 800d9de:	ea89 090a 	eor.w	r9, r9, sl
 800d9e2:	ea86 0609 	eor.w	r6, r6, r9
 800d9e6:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800d9e8:	f811 8008 	ldrb.w	r8, [r1, r8]
 800d9ec:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800d9f0:	5dd6      	ldrb	r6, [r2, r7]
 800d9f2:	ea80 0008 	eor.w	r0, r0, r8
 800d9f6:	ea8e 0000 	eor.w	r0, lr, r0
 800d9fa:	4070      	eors	r0, r6
 800d9fc:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800d9fe:	f812 600c 	ldrb.w	r6, [r2, ip]
 800da02:	5dd8      	ldrb	r0, [r3, r7]
 800da04:	ea86 0608 	eor.w	r6, r6, r8
 800da08:	4075      	eors	r5, r6
 800da0a:	4068      	eors	r0, r5
 800da0c:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800da0e:	f89d c004 	ldrb.w	ip, [sp, #4]
 800da12:	f813 000c 	ldrb.w	r0, [r3, ip]
 800da16:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800da1a:	f812 9008 	ldrb.w	r9, [r2, r8]
 800da1e:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800da22:	f811 500e 	ldrb.w	r5, [r1, lr]
 800da26:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800da2a:	5dce      	ldrb	r6, [r1, r7]
 800da2c:	ea80 0009 	eor.w	r0, r0, r9
 800da30:	4068      	eors	r0, r5
 800da32:	4070      	eors	r0, r6
 800da34:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800da36:	f811 000c 	ldrb.w	r0, [r1, ip]
 800da3a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800da3e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800da42:	ea80 0a0a 	eor.w	sl, r0, sl
 800da46:	ea89 090a 	eor.w	r9, r9, sl
 800da4a:	ea86 0609 	eor.w	r6, r6, r9
 800da4e:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800da50:	f811 8008 	ldrb.w	r8, [r1, r8]
 800da54:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800da58:	5dd6      	ldrb	r6, [r2, r7]
 800da5a:	ea80 0008 	eor.w	r0, r0, r8
 800da5e:	ea8e 0000 	eor.w	r0, lr, r0
 800da62:	4070      	eors	r0, r6
 800da64:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800da66:	f812 600c 	ldrb.w	r6, [r2, ip]
 800da6a:	5dd8      	ldrb	r0, [r3, r7]
 800da6c:	ea86 0608 	eor.w	r6, r6, r8
 800da70:	4075      	eors	r5, r6
 800da72:	4068      	eors	r0, r5
 800da74:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800da76:	f89d c008 	ldrb.w	ip, [sp, #8]
 800da7a:	f813 000c 	ldrb.w	r0, [r3, ip]
 800da7e:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800da82:	f812 9008 	ldrb.w	r9, [r2, r8]
 800da86:	f89d e002 	ldrb.w	lr, [sp, #2]
 800da8a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800da8e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800da92:	5dce      	ldrb	r6, [r1, r7]
 800da94:	ea80 0009 	eor.w	r0, r0, r9
 800da98:	4068      	eors	r0, r5
 800da9a:	4070      	eors	r0, r6
 800da9c:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800da9e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800daa2:	f813 a008 	ldrb.w	sl, [r3, r8]
 800daa6:	f812 900e 	ldrb.w	r9, [r2, lr]
 800daaa:	ea80 0a0a 	eor.w	sl, r0, sl
 800daae:	ea89 090a 	eor.w	r9, r9, sl
 800dab2:	ea86 0609 	eor.w	r6, r6, r9
 800dab6:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800dab8:	f811 8008 	ldrb.w	r8, [r1, r8]
 800dabc:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800dac0:	5dd6      	ldrb	r6, [r2, r7]
 800dac2:	ea80 0008 	eor.w	r0, r0, r8
 800dac6:	ea8e 0000 	eor.w	r0, lr, r0
 800daca:	4070      	eors	r0, r6
 800dacc:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800dace:	f812 600c 	ldrb.w	r6, [r2, ip]
 800dad2:	5dd8      	ldrb	r0, [r3, r7]
 800dad4:	ea86 0608 	eor.w	r6, r6, r8
 800dad8:	4075      	eors	r5, r6
 800dada:	4068      	eors	r0, r5
 800dadc:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800dade:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800dae2:	5d98      	ldrb	r0, [r3, r6]
 800dae4:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800dae8:	f812 9008 	ldrb.w	r9, [r2, r8]
 800daec:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800daf0:	f811 c007 	ldrb.w	ip, [r1, r7]
 800daf4:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800daf8:	f811 e005 	ldrb.w	lr, [r1, r5]
 800dafc:	ea80 0009 	eor.w	r0, r0, r9
 800db00:	ea8c 0000 	eor.w	r0, ip, r0
 800db04:	ea8e 0000 	eor.w	r0, lr, r0
 800db08:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800db0a:	5d88      	ldrb	r0, [r1, r6]
 800db0c:	f813 a008 	ldrb.w	sl, [r3, r8]
 800db10:	f812 9007 	ldrb.w	r9, [r2, r7]
 800db14:	ea80 0a0a 	eor.w	sl, r0, sl
 800db18:	ea89 090a 	eor.w	r9, r9, sl
 800db1c:	ea8e 0e09 	eor.w	lr, lr, r9
 800db20:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800db24:	f811 1008 	ldrb.w	r1, [r1, r8]
 800db28:	f813 e007 	ldrb.w	lr, [r3, r7]
 800db2c:	5d57      	ldrb	r7, [r2, r5]
 800db2e:	4048      	eors	r0, r1
 800db30:	ea8e 0000 	eor.w	r0, lr, r0
 800db34:	4078      	eors	r0, r7
 800db36:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800db38:	5d92      	ldrb	r2, [r2, r6]
 800db3a:	5d5b      	ldrb	r3, [r3, r5]
 800db3c:	4051      	eors	r1, r2
 800db3e:	ea8c 0c01 	eor.w	ip, ip, r1
 800db42:	ea83 030c 	eor.w	r3, r3, ip
 800db46:	73e3      	strb	r3, [r4, #15]
  }
 800db48:	b004      	add	sp, #16
 800db4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db4e:	bf00      	nop
 800db50:	080119b8 	.word	0x080119b8
 800db54:	08011ab8 	.word	0x08011ab8
 800db58:	08011bb8 	.word	0x08011bb8

0800db5c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800db5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db60:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800db62:	f1a1 0310 	sub.w	r3, r1, #16
 800db66:	b2db      	uxtb	r3, r3
 800db68:	2b10      	cmp	r3, #16
 800db6a:	d806      	bhi.n	800db7a <lorawan_aes_set_key+0x1e>
 800db6c:	460d      	mov	r5, r1
 800db6e:	4a3b      	ldr	r2, [pc, #236]	; (800dc5c <lorawan_aes_set_key+0x100>)
 800db70:	fa22 f303 	lsr.w	r3, r2, r3
 800db74:	f013 0f01 	tst.w	r3, #1
 800db78:	d105      	bne.n	800db86 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800db80:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800db82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800db86:	460a      	mov	r2, r1
 800db88:	4601      	mov	r1, r0
 800db8a:	4620      	mov	r0, r4
 800db8c:	f7ff fe1c 	bl	800d7c8 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800db90:	f105 031c 	add.w	r3, r5, #28
 800db94:	b2db      	uxtb	r3, r3
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800db9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800dba0:	3b01      	subs	r3, #1
 800dba2:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800dba6:	462b      	mov	r3, r5
 800dba8:	f04f 0c01 	mov.w	ip, #1
 800dbac:	e023      	b.n	800dbf6 <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 800dbae:	2d18      	cmp	r5, #24
 800dbb0:	d901      	bls.n	800dbb6 <lorawan_aes_set_key+0x5a>
 800dbb2:	2a10      	cmp	r2, #16
 800dbb4:	d048      	beq.n	800dc48 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800dbb6:	1b5a      	subs	r2, r3, r5
 800dbb8:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800dbba:	f814 9002 	ldrb.w	r9, [r4, r2]
 800dbbe:	ea89 0808 	eor.w	r8, r9, r8
 800dbc2:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800dbc6:	f102 0801 	add.w	r8, r2, #1
 800dbca:	f814 8008 	ldrb.w	r8, [r4, r8]
 800dbce:	f100 0901 	add.w	r9, r0, #1
 800dbd2:	ea88 0707 	eor.w	r7, r8, r7
 800dbd6:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800dbda:	1c97      	adds	r7, r2, #2
 800dbdc:	5de7      	ldrb	r7, [r4, r7]
 800dbde:	f100 0802 	add.w	r8, r0, #2
 800dbe2:	407e      	eors	r6, r7
 800dbe4:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800dbe8:	3203      	adds	r2, #3
 800dbea:	5ca6      	ldrb	r6, [r4, r2]
 800dbec:	1cc2      	adds	r2, r0, #3
 800dbee:	4071      	eors	r1, r6
 800dbf0:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800dbf2:	3304      	adds	r3, #4
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	4573      	cmp	r3, lr
 800dbf8:	d22d      	bcs.n	800dc56 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	1f1a      	subs	r2, r3, #4
 800dbfe:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800dc02:	1eda      	subs	r2, r3, #3
 800dc04:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800dc06:	1e9a      	subs	r2, r3, #2
 800dc08:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800dc0a:	1e5a      	subs	r2, r3, #1
 800dc0c:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800dc0e:	fbb3 f2f5 	udiv	r2, r3, r5
 800dc12:	fb05 3212 	mls	r2, r5, r2, r3
 800dc16:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800dc1a:	d1c8      	bne.n	800dbae <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 800dc1c:	4a10      	ldr	r2, [pc, #64]	; (800dc60 <lorawan_aes_set_key+0x104>)
 800dc1e:	f812 9007 	ldrb.w	r9, [r2, r7]
 800dc22:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800dc26:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800dc28:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800dc2a:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800dc2e:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800dc32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800dc36:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800dc3a:	b2d2      	uxtb	r2, r2
 800dc3c:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 800dc40:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 800dc44:	46c8      	mov	r8, r9
 800dc46:	e7b6      	b.n	800dbb6 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 800dc48:	4a05      	ldr	r2, [pc, #20]	; (800dc60 <lorawan_aes_set_key+0x104>)
 800dc4a:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800dc4e:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800dc50:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800dc52:	5c51      	ldrb	r1, [r2, r1]
 800dc54:	e7af      	b.n	800dbb6 <lorawan_aes_set_key+0x5a>
    return 0;
 800dc56:	2000      	movs	r0, #0
 800dc58:	e793      	b.n	800db82 <lorawan_aes_set_key+0x26>
 800dc5a:	bf00      	nop
 800dc5c:	00010101 	.word	0x00010101
 800dc60:	08011bb8 	.word	0x08011bb8

0800dc64 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800dc64:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800dc68:	b31b      	cbz	r3, 800dcb2 <lorawan_aes_encrypt+0x4e>
{
 800dc6a:	b570      	push	{r4, r5, r6, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	460e      	mov	r6, r1
 800dc70:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800dc72:	4601      	mov	r1, r0
 800dc74:	4668      	mov	r0, sp
 800dc76:	f7ff fdf3 	bl	800d860 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800dc7a:	2401      	movs	r4, #1
 800dc7c:	e009      	b.n	800dc92 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800dc7e:	4668      	mov	r0, sp
 800dc80:	f7ff fe86 	bl	800d990 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800dc84:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800dc88:	4668      	mov	r0, sp
 800dc8a:	f7ff fe48 	bl	800d91e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800dc8e:	3401      	adds	r4, #1
 800dc90:	b2e4      	uxtb	r4, r4
 800dc92:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800dc96:	42a3      	cmp	r3, r4
 800dc98:	d8f1      	bhi.n	800dc7e <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800dc9a:	4668      	mov	r0, sp
 800dc9c:	f7ff fe44 	bl	800d928 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800dca0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800dca4:	4669      	mov	r1, sp
 800dca6:	4630      	mov	r0, r6
 800dca8:	f7ff fdda 	bl	800d860 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800dcac:	2000      	movs	r0, #0
}
 800dcae:	b004      	add	sp, #16
 800dcb0:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800dcb2:	20ff      	movs	r0, #255	; 0xff
}
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dcb8:	2300      	movs	r3, #0
 800dcba:	2b09      	cmp	r3, #9
 800dcbc:	d817      	bhi.n	800dcee <GetKeyByID+0x36>
{
 800dcbe:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dcc0:	4a0c      	ldr	r2, [pc, #48]	; (800dcf4 <GetKeyByID+0x3c>)
 800dcc2:	6814      	ldr	r4, [r2, #0]
 800dcc4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800dcc8:	4422      	add	r2, r4
 800dcca:	7c12      	ldrb	r2, [r2, #16]
 800dccc:	4282      	cmp	r2, r0
 800dcce:	d006      	beq.n	800dcde <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b09      	cmp	r3, #9
 800dcd6:	d9f3      	bls.n	800dcc0 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dcd8:	2003      	movs	r0, #3
}
 800dcda:	bc10      	pop	{r4}
 800dcdc:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800dcde:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800dce2:	f10c 0c10 	add.w	ip, ip, #16
 800dce6:	4464      	add	r4, ip
 800dce8:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dcea:	2000      	movs	r0, #0
 800dcec:	e7f5      	b.n	800dcda <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dcee:	2003      	movs	r0, #3
}
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	200011e8 	.word	0x200011e8

0800dcf8 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800dcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfc:	b0cc      	sub	sp, #304	; 0x130
 800dcfe:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800dd00:	b3a9      	cbz	r1, 800dd6e <ComputeCmac+0x76>
 800dd02:	4605      	mov	r5, r0
 800dd04:	4617      	mov	r7, r2
 800dd06:	461c      	mov	r4, r3
 800dd08:	4688      	mov	r8, r1
 800dd0a:	b396      	cbz	r6, 800dd72 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800dd0c:	a802      	add	r0, sp, #8
 800dd0e:	f7ff fbd5 	bl	800d4bc <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800dd12:	a901      	add	r1, sp, #4
 800dd14:	4620      	mov	r0, r4
 800dd16:	f7ff ffcf 	bl	800dcb8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	b118      	cbz	r0, 800dd26 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800dd1e:	4620      	mov	r0, r4
 800dd20:	b04c      	add	sp, #304	; 0x130
 800dd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800dd26:	9901      	ldr	r1, [sp, #4]
 800dd28:	3101      	adds	r1, #1
 800dd2a:	a802      	add	r0, sp, #8
 800dd2c:	f7ff fbd5 	bl	800d4da <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800dd30:	b125      	cbz	r5, 800dd3c <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800dd32:	2210      	movs	r2, #16
 800dd34:	4629      	mov	r1, r5
 800dd36:	a802      	add	r0, sp, #8
 800dd38:	f7ff fbd6 	bl	800d4e8 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800dd3c:	463a      	mov	r2, r7
 800dd3e:	4641      	mov	r1, r8
 800dd40:	a802      	add	r0, sp, #8
 800dd42:	f7ff fbd1 	bl	800d4e8 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800dd46:	a902      	add	r1, sp, #8
 800dd48:	a848      	add	r0, sp, #288	; 0x120
 800dd4a:	f7ff fc3b 	bl	800d5c4 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800dd4e:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800dd52:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800dd56:	041b      	lsls	r3, r3, #16
 800dd58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dd5c:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800dd60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800dd64:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	6033      	str	r3, [r6, #0]
 800dd6c:	e7d7      	b.n	800dd1e <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800dd6e:	2402      	movs	r4, #2
 800dd70:	e7d5      	b.n	800dd1e <ComputeCmac+0x26>
 800dd72:	2402      	movs	r4, #2
 800dd74:	e7d3      	b.n	800dd1e <ComputeCmac+0x26>
	...

0800dd78 <SecureElementGetKeyByID>:
/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800dd78:	2300      	movs	r3, #0
 800dd7a:	2b09      	cmp	r3, #9
 800dd7c:	d817      	bhi.n	800ddae <SecureElementGetKeyByID+0x36>
{
 800dd7e:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800dd80:	4a0c      	ldr	r2, [pc, #48]	; (800ddb4 <SecureElementGetKeyByID+0x3c>)
 800dd82:	6814      	ldr	r4, [r2, #0]
 800dd84:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800dd88:	4422      	add	r2, r4
 800dd8a:	7c12      	ldrb	r2, [r2, #16]
 800dd8c:	4282      	cmp	r2, r0
 800dd8e:	d006      	beq.n	800dd9e <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800dd90:	3301      	adds	r3, #1
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b09      	cmp	r3, #9
 800dd96:	d9f3      	bls.n	800dd80 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd98:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800dd9a:	bc10      	pop	{r4}
 800dd9c:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800dd9e:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800dda2:	f10c 0c10 	add.w	ip, ip, #16
 800dda6:	4464      	add	r4, ip
 800dda8:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ddaa:	2000      	movs	r0, #0
 800ddac:	e7f5      	b.n	800dd9a <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ddae:	2003      	movs	r0, #3
}
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	200011e8 	.word	0x200011e8

0800ddb8 <PrintKey>:
{
 800ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	b095      	sub	sp, #84	; 0x54
 800ddbe:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800ddc0:	a913      	add	r1, sp, #76	; 0x4c
 800ddc2:	f7ff ffd9 	bl	800dd78 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d150      	bne.n	800de6c <PrintKey+0xb4>
        if (key == APP_KEY)
 800ddca:	2c04      	cmp	r4, #4
 800ddcc:	d806      	bhi.n	800dddc <PrintKey+0x24>
 800ddce:	2c04      	cmp	r4, #4
 800ddd0:	d815      	bhi.n	800ddfe <PrintKey+0x46>
 800ddd2:	e8df f004 	tbb	[pc, r4]
 800ddd6:	4e0e      	.short	0x4e0e
 800ddd8:	555c      	.short	0x555c
 800ddda:	63          	.byte	0x63
 800dddb:	00          	.byte	0x00
 800dddc:	2c82      	cmp	r4, #130	; 0x82
 800ddde:	d80e      	bhi.n	800ddfe <PrintKey+0x46>
 800dde0:	2c7f      	cmp	r4, #127	; 0x7f
 800dde2:	d30c      	bcc.n	800ddfe <PrintKey+0x46>
 800dde4:	3c7f      	subs	r4, #127	; 0x7f
 800dde6:	2c03      	cmp	r4, #3
 800dde8:	d809      	bhi.n	800ddfe <PrintKey+0x46>
 800ddea:	e8df f004 	tbb	[pc, r4]
 800ddee:	655e      	.short	0x655e
 800ddf0:	736c      	.short	0x736c
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800ddf2:	4b3c      	ldr	r3, [pc, #240]	; (800dee4 <PrintKey+0x12c>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	2002      	movs	r0, #2
 800ddfa:	f002 fc0b 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ddfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de00:	785a      	ldrb	r2, [r3, #1]
 800de02:	9210      	str	r2, [sp, #64]	; 0x40
 800de04:	7899      	ldrb	r1, [r3, #2]
 800de06:	9111      	str	r1, [sp, #68]	; 0x44
 800de08:	78da      	ldrb	r2, [r3, #3]
 800de0a:	7919      	ldrb	r1, [r3, #4]
 800de0c:	7958      	ldrb	r0, [r3, #5]
 800de0e:	799c      	ldrb	r4, [r3, #6]
 800de10:	79dd      	ldrb	r5, [r3, #7]
 800de12:	7a1e      	ldrb	r6, [r3, #8]
 800de14:	7a5f      	ldrb	r7, [r3, #9]
 800de16:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800de1a:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800de1e:	f893 800c 	ldrb.w	r8, [r3, #12]
 800de22:	f893 900d 	ldrb.w	r9, [r3, #13]
 800de26:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800de2a:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800de2e:	7c1b      	ldrb	r3, [r3, #16]
 800de30:	930f      	str	r3, [sp, #60]	; 0x3c
 800de32:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800de36:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800de3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800de3e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800de42:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800de46:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800de4a:	9708      	str	r7, [sp, #32]
 800de4c:	9607      	str	r6, [sp, #28]
 800de4e:	9506      	str	r5, [sp, #24]
 800de50:	9405      	str	r4, [sp, #20]
 800de52:	9004      	str	r0, [sp, #16]
 800de54:	9103      	str	r1, [sp, #12]
 800de56:	9202      	str	r2, [sp, #8]
 800de58:	9911      	ldr	r1, [sp, #68]	; 0x44
 800de5a:	9101      	str	r1, [sp, #4]
 800de5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de5e:	9200      	str	r2, [sp, #0]
 800de60:	4b21      	ldr	r3, [pc, #132]	; (800dee8 <PrintKey+0x130>)
 800de62:	2200      	movs	r2, #0
 800de64:	4611      	mov	r1, r2
 800de66:	2002      	movs	r0, #2
 800de68:	f002 fbd4 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 800de6c:	b015      	add	sp, #84	; 0x54
 800de6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800de72:	4b1e      	ldr	r3, [pc, #120]	; (800deec <PrintKey+0x134>)
 800de74:	2200      	movs	r2, #0
 800de76:	4611      	mov	r1, r2
 800de78:	2002      	movs	r0, #2
 800de7a:	f002 fbcb 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 800de7e:	e7be      	b.n	800ddfe <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800de80:	4b1b      	ldr	r3, [pc, #108]	; (800def0 <PrintKey+0x138>)
 800de82:	2200      	movs	r2, #0
 800de84:	4611      	mov	r1, r2
 800de86:	2002      	movs	r0, #2
 800de88:	f002 fbc4 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 800de8c:	e7b7      	b.n	800ddfe <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800de8e:	4b19      	ldr	r3, [pc, #100]	; (800def4 <PrintKey+0x13c>)
 800de90:	2200      	movs	r2, #0
 800de92:	4611      	mov	r1, r2
 800de94:	2002      	movs	r0, #2
 800de96:	f002 fbbd 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 800de9a:	e7b0      	b.n	800ddfe <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800de9c:	4b16      	ldr	r3, [pc, #88]	; (800def8 <PrintKey+0x140>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	4611      	mov	r1, r2
 800dea2:	2002      	movs	r0, #2
 800dea4:	f002 fbb6 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 800dea8:	e7a9      	b.n	800ddfe <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800deaa:	4b14      	ldr	r3, [pc, #80]	; (800defc <PrintKey+0x144>)
 800deac:	2200      	movs	r2, #0
 800deae:	4611      	mov	r1, r2
 800deb0:	2002      	movs	r0, #2
 800deb2:	f002 fbaf 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 800deb6:	e7a2      	b.n	800ddfe <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800deb8:	4b11      	ldr	r3, [pc, #68]	; (800df00 <PrintKey+0x148>)
 800deba:	2200      	movs	r2, #0
 800debc:	4611      	mov	r1, r2
 800debe:	2002      	movs	r0, #2
 800dec0:	f002 fba8 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 800dec4:	e79b      	b.n	800ddfe <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800dec6:	4b0f      	ldr	r3, [pc, #60]	; (800df04 <PrintKey+0x14c>)
 800dec8:	2200      	movs	r2, #0
 800deca:	4611      	mov	r1, r2
 800decc:	2002      	movs	r0, #2
 800dece:	f002 fba1 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 800ded2:	e794      	b.n	800ddfe <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ded4:	4b0c      	ldr	r3, [pc, #48]	; (800df08 <PrintKey+0x150>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	4611      	mov	r1, r2
 800deda:	2002      	movs	r0, #2
 800dedc:	f002 fb9a 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 800dee0:	e78d      	b.n	800ddfe <PrintKey+0x46>
 800dee2:	bf00      	nop
 800dee4:	08011cb8 	.word	0x08011cb8
 800dee8:	08011d90 	.word	0x08011d90
 800deec:	08011cd0 	.word	0x08011cd0
 800def0:	08011ce8 	.word	0x08011ce8
 800def4:	08011d00 	.word	0x08011d00
 800def8:	08011d18 	.word	0x08011d18
 800defc:	08011d30 	.word	0x08011d30
 800df00:	08011d48 	.word	0x08011d48
 800df04:	08011d60 	.word	0x08011d60
 800df08:	08011d78 	.word	0x08011d78

0800df0c <SecureElementInit>:
{
 800df0c:	b530      	push	{r4, r5, lr}
 800df0e:	b0b1      	sub	sp, #196	; 0xc4
 800df10:	4605      	mov	r5, r0
    SecureElementNvmData_t seNvmInit =
 800df12:	466c      	mov	r4, sp
 800df14:	22c0      	movs	r2, #192	; 0xc0
 800df16:	2100      	movs	r1, #0
 800df18:	4620      	mov	r0, r4
 800df1a:	f003 f921 	bl	8011160 <memset>
 800df1e:	4b39      	ldr	r3, [pc, #228]	; (800e004 <SecureElementInit+0xf8>)
 800df20:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df24:	e884 0003 	stmia.w	r4, {r0, r1}
 800df28:	4a37      	ldr	r2, [pc, #220]	; (800e008 <SecureElementInit+0xfc>)
 800df2a:	ab02      	add	r3, sp, #8
 800df2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df30:	e883 0003 	stmia.w	r3, {r0, r1}
 800df34:	4c35      	ldr	r4, [pc, #212]	; (800e00c <SecureElementInit+0x100>)
 800df36:	46a4      	mov	ip, r4
 800df38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800df3c:	f8cd 0011 	str.w	r0, [sp, #17]
 800df40:	f8cd 1015 	str.w	r1, [sp, #21]
 800df44:	f8cd 2019 	str.w	r2, [sp, #25]
 800df48:	f8cd 301d 	str.w	r3, [sp, #29]
 800df4c:	2301      	movs	r3, #1
 800df4e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800df52:	46a4      	mov	ip, r4
 800df54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800df58:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 800df5c:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 800df60:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800df64:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
 800df68:	2302      	movs	r3, #2
 800df6a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 800df6e:	46a4      	mov	ip, r4
 800df70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800df74:	f8cd 0033 	str.w	r0, [sp, #51]	; 0x33
 800df78:	f8cd 1037 	str.w	r1, [sp, #55]	; 0x37
 800df7c:	f8cd 203b 	str.w	r2, [sp, #59]	; 0x3b
 800df80:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
 800df84:	2303      	movs	r3, #3
 800df86:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 800df8a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800df8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800df92:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800df96:	2304      	movs	r3, #4
 800df98:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800df9c:	237f      	movs	r3, #127	; 0x7f
 800df9e:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 800dfa2:	2380      	movs	r3, #128	; 0x80
 800dfa4:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 800dfa8:	2381      	movs	r3, #129	; 0x81
 800dfaa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 800dfae:	2382      	movs	r3, #130	; 0x82
 800dfb0:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 800dfb4:	2383      	movs	r3, #131	; 0x83
 800dfb6:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
    if( nvm == NULL )
 800dfba:	b30d      	cbz	r5, 800e000 <SecureElementInit+0xf4>
    SeNvm = nvm;
 800dfbc:	4b14      	ldr	r3, [pc, #80]	; (800e010 <SecureElementInit+0x104>)
 800dfbe:	601d      	str	r5, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800dfc0:	22c0      	movs	r2, #192	; 0xc0
 800dfc2:	4669      	mov	r1, sp
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	f000 f990 	bl	800e2ea <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800dfca:	4b12      	ldr	r3, [pc, #72]	; (800e014 <SecureElementInit+0x108>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4611      	mov	r1, r2
 800dfd0:	2002      	movs	r0, #2
 800dfd2:	f002 fb1f 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	f7ff feee 	bl	800ddb8 <PrintKey>
    PrintKey(NWK_KEY);
 800dfdc:	2001      	movs	r0, #1
 800dfde:	f7ff feeb 	bl	800ddb8 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800dfe2:	4b0d      	ldr	r3, [pc, #52]	; (800e018 <SecureElementInit+0x10c>)
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	2002      	movs	r0, #2
 800dfea:	f002 fb13 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800dfee:	2003      	movs	r0, #3
 800dff0:	f7ff fee2 	bl	800ddb8 <PrintKey>
    PrintKey(NWK_S_KEY);
 800dff4:	2002      	movs	r0, #2
 800dff6:	f7ff fedf 	bl	800ddb8 <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 800dffa:	2000      	movs	r0, #0
}
 800dffc:	b031      	add	sp, #196	; 0xc4
 800dffe:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e000:	2002      	movs	r0, #2
 800e002:	e7fb      	b.n	800dffc <SecureElementInit+0xf0>
 800e004:	08011e14 	.word	0x08011e14
 800e008:	08011328 	.word	0x08011328
 800e00c:	08011e20 	.word	0x08011e20
 800e010:	200011e8 	.word	0x200011e8
 800e014:	08011de4 	.word	0x08011de4
 800e018:	08011dfc 	.word	0x08011dfc

0800e01c <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800e01c:	2b7e      	cmp	r3, #126	; 0x7e
 800e01e:	d80a      	bhi.n	800e036 <SecureElementComputeAesCmac+0x1a>
{
 800e020:	b500      	push	{lr}
 800e022:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e024:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e028:	f8cd c000 	str.w	ip, [sp]
 800e02c:	f7ff fe64 	bl	800dcf8 <ComputeCmac>
}
 800e030:	b003      	add	sp, #12
 800e032:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e036:	2003      	movs	r0, #3
}
 800e038:	4770      	bx	lr

0800e03a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800e03a:	b190      	cbz	r0, 800e062 <SecureElementVerifyAesCmac+0x28>
{
 800e03c:	b510      	push	{r4, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	468c      	mov	ip, r1
 800e042:	4614      	mov	r4, r2
 800e044:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800e046:	2000      	movs	r0, #0
 800e048:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e04a:	aa03      	add	r2, sp, #12
 800e04c:	9200      	str	r2, [sp, #0]
 800e04e:	4662      	mov	r2, ip
 800e050:	f7ff fe52 	bl	800dcf8 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e054:	b918      	cbnz	r0, 800e05e <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800e056:	9b03      	ldr	r3, [sp, #12]
 800e058:	42a3      	cmp	r3, r4
 800e05a:	d000      	beq.n	800e05e <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800e05c:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800e05e:	b004      	add	sp, #16
 800e060:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e062:	2002      	movs	r0, #2
}
 800e064:	4770      	bx	lr

0800e066 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800e066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e06a:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800e06c:	b350      	cbz	r0, 800e0c4 <SecureElementAesEncrypt+0x5e>
 800e06e:	460c      	mov	r4, r1
 800e070:	4615      	mov	r5, r2
 800e072:	461e      	mov	r6, r3
 800e074:	4607      	mov	r7, r0
 800e076:	b343      	cbz	r3, 800e0ca <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800e078:	f011 0f0f 	tst.w	r1, #15
 800e07c:	d128      	bne.n	800e0d0 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800e07e:	22f0      	movs	r2, #240	; 0xf0
 800e080:	2100      	movs	r1, #0
 800e082:	a801      	add	r0, sp, #4
 800e084:	f000 f949 	bl	800e31a <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800e088:	4669      	mov	r1, sp
 800e08a:	4628      	mov	r0, r5
 800e08c:	f7ff fe14 	bl	800dcb8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e090:	4680      	mov	r8, r0
 800e092:	b118      	cbz	r0, 800e09c <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800e094:	4640      	mov	r0, r8
 800e096:	b03e      	add	sp, #248	; 0xf8
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800e09c:	aa01      	add	r2, sp, #4
 800e09e:	2110      	movs	r1, #16
 800e0a0:	9800      	ldr	r0, [sp, #0]
 800e0a2:	3001      	adds	r0, #1
 800e0a4:	f7ff fd5a 	bl	800db5c <lorawan_aes_set_key>
        uint8_t block = 0;
 800e0a8:	4645      	mov	r5, r8
        while( size != 0 )
 800e0aa:	e008      	b.n	800e0be <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800e0ac:	aa01      	add	r2, sp, #4
 800e0ae:	1971      	adds	r1, r6, r5
 800e0b0:	1978      	adds	r0, r7, r5
 800e0b2:	f7ff fdd7 	bl	800dc64 <lorawan_aes_encrypt>
            block = block + 16;
 800e0b6:	3510      	adds	r5, #16
 800e0b8:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800e0ba:	3c10      	subs	r4, #16
 800e0bc:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800e0be:	2c00      	cmp	r4, #0
 800e0c0:	d1f4      	bne.n	800e0ac <SecureElementAesEncrypt+0x46>
 800e0c2:	e7e7      	b.n	800e094 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800e0c4:	f04f 0802 	mov.w	r8, #2
 800e0c8:	e7e4      	b.n	800e094 <SecureElementAesEncrypt+0x2e>
 800e0ca:	f04f 0802 	mov.w	r8, #2
 800e0ce:	e7e1      	b.n	800e094 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e0d0:	f04f 0805 	mov.w	r8, #5
 800e0d4:	e7de      	b.n	800e094 <SecureElementAesEncrypt+0x2e>
	...

0800e0d8 <SecureElementSetKey>:
{
 800e0d8:	b530      	push	{r4, r5, lr}
 800e0da:	b085      	sub	sp, #20
    if( key == NULL )
 800e0dc:	2900      	cmp	r1, #0
 800e0de:	d038      	beq.n	800e152 <SecureElementSetKey+0x7a>
 800e0e0:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	2b09      	cmp	r3, #9
 800e0e6:	d830      	bhi.n	800e14a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e0e8:	4a1b      	ldr	r2, [pc, #108]	; (800e158 <SecureElementSetKey+0x80>)
 800e0ea:	6811      	ldr	r1, [r2, #0]
 800e0ec:	461c      	mov	r4, r3
 800e0ee:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e0f2:	440a      	add	r2, r1
 800e0f4:	7c12      	ldrb	r2, [r2, #16]
 800e0f6:	4282      	cmp	r2, r0
 800e0f8:	d002      	beq.n	800e100 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	e7f1      	b.n	800e0e4 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800e100:	2880      	cmp	r0, #128	; 0x80
 800e102:	d00a      	beq.n	800e11a <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e104:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 800e108:	3410      	adds	r4, #16
 800e10a:	1908      	adds	r0, r1, r4
 800e10c:	2210      	movs	r2, #16
 800e10e:	4661      	mov	r1, ip
 800e110:	3001      	adds	r0, #1
 800e112:	f000 f8ea 	bl	800e2ea <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e116:	2500      	movs	r5, #0
 800e118:	e018      	b.n	800e14c <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800e11a:	2300      	movs	r3, #0
 800e11c:	9300      	str	r3, [sp, #0]
 800e11e:	9301      	str	r3, [sp, #4]
 800e120:	9302      	str	r3, [sp, #8]
 800e122:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800e124:	466b      	mov	r3, sp
 800e126:	227f      	movs	r2, #127	; 0x7f
 800e128:	2110      	movs	r1, #16
 800e12a:	4660      	mov	r0, ip
 800e12c:	f7ff ff9b 	bl	800e066 <SecureElementAesEncrypt>
 800e130:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e132:	4b09      	ldr	r3, [pc, #36]	; (800e158 <SecureElementSetKey+0x80>)
 800e134:	6818      	ldr	r0, [r3, #0]
 800e136:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800e13a:	3410      	adds	r4, #16
 800e13c:	4420      	add	r0, r4
 800e13e:	2210      	movs	r2, #16
 800e140:	4669      	mov	r1, sp
 800e142:	3001      	adds	r0, #1
 800e144:	f000 f8d1 	bl	800e2ea <memcpy1>
                return retval;
 800e148:	e000      	b.n	800e14c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e14a:	2503      	movs	r5, #3
}
 800e14c:	4628      	mov	r0, r5
 800e14e:	b005      	add	sp, #20
 800e150:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e152:	2502      	movs	r5, #2
 800e154:	e7fa      	b.n	800e14c <SecureElementSetKey+0x74>
 800e156:	bf00      	nop
 800e158:	200011e8 	.word	0x200011e8

0800e15c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800e15c:	b1d0      	cbz	r0, 800e194 <SecureElementDeriveAndStoreKey+0x38>
{
 800e15e:	b510      	push	{r4, lr}
 800e160:	b084      	sub	sp, #16
 800e162:	4614      	mov	r4, r2
 800e164:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800e166:	2a7f      	cmp	r2, #127	; 0x7f
 800e168:	d101      	bne.n	800e16e <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e16a:	2904      	cmp	r1, #4
 800e16c:	d114      	bne.n	800e198 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800e16e:	2300      	movs	r3, #0
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	9302      	str	r3, [sp, #8]
 800e176:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800e178:	466b      	mov	r3, sp
 800e17a:	460a      	mov	r2, r1
 800e17c:	2110      	movs	r1, #16
 800e17e:	4660      	mov	r0, ip
 800e180:	f7ff ff71 	bl	800e066 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e184:	b108      	cbz	r0, 800e18a <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e186:	b004      	add	sp, #16
 800e188:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800e18a:	4669      	mov	r1, sp
 800e18c:	4620      	mov	r0, r4
 800e18e:	f7ff ffa3 	bl	800e0d8 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e192:	e7f8      	b.n	800e186 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800e194:	2002      	movs	r0, #2
}
 800e196:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e198:	2003      	movs	r0, #3
 800e19a:	e7f4      	b.n	800e186 <SecureElementDeriveAndStoreKey+0x2a>

0800e19c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800e19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800e1a4:	9d07      	ldr	r5, [sp, #28]
 800e1a6:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e1a8:	b37b      	cbz	r3, 800e20a <SecureElementProcessJoinAccept+0x6e>
 800e1aa:	4698      	mov	r8, r3
 800e1ac:	b37d      	cbz	r5, 800e20e <SecureElementProcessJoinAccept+0x72>
 800e1ae:	b386      	cbz	r6, 800e212 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e1b0:	2c21      	cmp	r4, #33	; 0x21
 800e1b2:	d830      	bhi.n	800e216 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e1b4:	b2a7      	uxth	r7, r4
 800e1b6:	463a      	mov	r2, r7
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f000 f895 	bl	800e2ea <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e1c0:	1e79      	subs	r1, r7, #1
 800e1c2:	1c6b      	adds	r3, r5, #1
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	b289      	uxth	r1, r1
 800e1c8:	eb08 0002 	add.w	r0, r8, r2
 800e1cc:	f7ff ff4b 	bl	800e066 <SecureElementAesEncrypt>
 800e1d0:	bb20      	cbnz	r0, 800e21c <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e1d2:	7aeb      	ldrb	r3, [r5, #11]
 800e1d4:	09db      	lsrs	r3, r3, #7
 800e1d6:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800e1d8:	442c      	add	r4, r5
 800e1da:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800e1de:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e1e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800e1e6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800e1ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800e1ee:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e1f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800e1f6:	b99b      	cbnz	r3, 800e220 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e1f8:	1f39      	subs	r1, r7, #4
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	b289      	uxth	r1, r1
 800e1fe:	4628      	mov	r0, r5
 800e200:	f7ff ff1b 	bl	800e03a <SecureElementVerifyAesCmac>
 800e204:	b140      	cbz	r0, 800e218 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e206:	2001      	movs	r0, #1
 800e208:	e006      	b.n	800e218 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 800e20a:	2002      	movs	r0, #2
 800e20c:	e004      	b.n	800e218 <SecureElementProcessJoinAccept+0x7c>
 800e20e:	2002      	movs	r0, #2
 800e210:	e002      	b.n	800e218 <SecureElementProcessJoinAccept+0x7c>
 800e212:	2002      	movs	r0, #2
 800e214:	e000      	b.n	800e218 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e216:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800e218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e21c:	2007      	movs	r0, #7
 800e21e:	e7fb      	b.n	800e218 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e220:	2004      	movs	r0, #4
 800e222:	e7f9      	b.n	800e218 <SecureElementProcessJoinAccept+0x7c>

0800e224 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 800e224:	b138      	cbz	r0, 800e236 <SecureElementRandomNumber+0x12>
{
 800e226:	b510      	push	{r4, lr}
 800e228:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800e22a:	4b04      	ldr	r3, [pc, #16]	; (800e23c <SecureElementRandomNumber+0x18>)
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	4798      	blx	r3
 800e230:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 800e232:	2000      	movs	r0, #0
}
 800e234:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e236:	2002      	movs	r0, #2
}
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	08011ea4 	.word	0x08011ea4

0800e240 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800e240:	b140      	cbz	r0, 800e254 <SecureElementSetDevEui+0x14>
{
 800e242:	b508      	push	{r3, lr}
 800e244:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800e246:	2208      	movs	r2, #8
 800e248:	4b03      	ldr	r3, [pc, #12]	; (800e258 <SecureElementSetDevEui+0x18>)
 800e24a:	6818      	ldr	r0, [r3, #0]
 800e24c:	f000 f84d 	bl	800e2ea <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e250:	2000      	movs	r0, #0
}
 800e252:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e254:	2002      	movs	r0, #2
}
 800e256:	4770      	bx	lr
 800e258:	200011e8 	.word	0x200011e8

0800e25c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800e25c:	4b01      	ldr	r3, [pc, #4]	; (800e264 <SecureElementGetDevEui+0x8>)
 800e25e:	6818      	ldr	r0, [r3, #0]
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	200011e8 	.word	0x200011e8

0800e268 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800e268:	b148      	cbz	r0, 800e27e <SecureElementSetJoinEui+0x16>
{
 800e26a:	b508      	push	{r3, lr}
 800e26c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800e26e:	4b05      	ldr	r3, [pc, #20]	; (800e284 <SecureElementSetJoinEui+0x1c>)
 800e270:	6818      	ldr	r0, [r3, #0]
 800e272:	2208      	movs	r2, #8
 800e274:	4410      	add	r0, r2
 800e276:	f000 f838 	bl	800e2ea <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e27a:	2000      	movs	r0, #0
}
 800e27c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e27e:	2002      	movs	r0, #2
}
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	200011e8 	.word	0x200011e8

0800e288 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800e288:	4b01      	ldr	r3, [pc, #4]	; (800e290 <SecureElementGetJoinEui+0x8>)
 800e28a:	6818      	ldr	r0, [r3, #0]
}
 800e28c:	3008      	adds	r0, #8
 800e28e:	4770      	bx	lr
 800e290:	200011e8 	.word	0x200011e8

0800e294 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e294:	4b09      	ldr	r3, [pc, #36]	; (800e2bc <rand1+0x28>)
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	4909      	ldr	r1, [pc, #36]	; (800e2c0 <rand1+0x2c>)
 800e29a:	f243 0039 	movw	r0, #12345	; 0x3039
 800e29e:	fb01 0002 	mla	r0, r1, r2, r0
 800e2a2:	6018      	str	r0, [r3, #0]
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	fba3 2300 	umull	r2, r3, r3, r0
 800e2aa:	1ac2      	subs	r2, r0, r3
 800e2ac:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e2b0:	0f9b      	lsrs	r3, r3, #30
 800e2b2:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800e2b6:	1ac0      	subs	r0, r0, r3
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	200000cc 	.word	0x200000cc
 800e2c0:	41c64e6d 	.word	0x41c64e6d

0800e2c4 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800e2c4:	4b01      	ldr	r3, [pc, #4]	; (800e2cc <srand1+0x8>)
 800e2c6:	6018      	str	r0, [r3, #0]
}
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	200000cc 	.word	0x200000cc

0800e2d0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800e2d6:	f7ff ffdd 	bl	800e294 <rand1>
 800e2da:	1b61      	subs	r1, r4, r5
 800e2dc:	3101      	adds	r1, #1
 800e2de:	fb90 f3f1 	sdiv	r3, r0, r1
 800e2e2:	fb01 0013 	mls	r0, r1, r3, r0
}
 800e2e6:	4428      	add	r0, r5
 800e2e8:	bd38      	pop	{r3, r4, r5, pc}

0800e2ea <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800e2ea:	e004      	b.n	800e2f6 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800e2ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2f0:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	1e53      	subs	r3, r2, #1
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	2a00      	cmp	r2, #0
 800e2fc:	d1f6      	bne.n	800e2ec <memcpy1+0x2>
    }
}
 800e2fe:	4770      	bx	lr

0800e300 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800e300:	1e53      	subs	r3, r2, #1
 800e302:	4418      	add	r0, r3
    while( size-- )
 800e304:	e004      	b.n	800e310 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800e306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e30a:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800e30e:	461a      	mov	r2, r3
 800e310:	1e53      	subs	r3, r2, #1
 800e312:	b29b      	uxth	r3, r3
 800e314:	2a00      	cmp	r2, #0
 800e316:	d1f6      	bne.n	800e306 <memcpyr+0x6>
    }
}
 800e318:	4770      	bx	lr

0800e31a <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800e31a:	e002      	b.n	800e322 <memset1+0x8>
    {
        *dst++ = value;
 800e31c:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800e320:	461a      	mov	r2, r3
 800e322:	1e53      	subs	r3, r2, #1
 800e324:	b29b      	uxth	r3, r3
 800e326:	2a00      	cmp	r2, #0
 800e328:	d1f8      	bne.n	800e31c <memset1+0x2>
    }
}
 800e32a:	4770      	bx	lr

0800e32c <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800e32c:	b1f0      	cbz	r0, 800e36c <Crc32+0x40>
{
 800e32e:	b510      	push	{r4, lr}
 800e330:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800e332:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800e336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e33a:	e00e      	b.n	800e35a <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800e33c:	f340 0c00 	sbfx	ip, r0, #0, #1
 800e340:	4a0b      	ldr	r2, [pc, #44]	; (800e370 <Crc32+0x44>)
 800e342:	ea0c 0202 	and.w	r2, ip, r2
 800e346:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800e34a:	3301      	adds	r3, #1
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	2b07      	cmp	r3, #7
 800e350:	d9f4      	bls.n	800e33c <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800e352:	f10e 0e01 	add.w	lr, lr, #1
 800e356:	fa1f fe8e 	uxth.w	lr, lr
 800e35a:	458e      	cmp	lr, r1
 800e35c:	d204      	bcs.n	800e368 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800e35e:	f814 300e 	ldrb.w	r3, [r4, lr]
 800e362:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800e364:	2300      	movs	r3, #0
 800e366:	e7f2      	b.n	800e34e <Crc32+0x22>
        }
    }

    return ~crc;
 800e368:	43c0      	mvns	r0, r0
}
 800e36a:	bd10      	pop	{r4, pc}
        return 0;
 800e36c:	2000      	movs	r0, #0
}
 800e36e:	4770      	bx	lr
 800e370:	edb88320 	.word	0xedb88320

0800e374 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800e374:	2001      	movs	r0, #1
 800e376:	4770      	bx	lr

0800e378 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800e378:	280a      	cmp	r0, #10
 800e37a:	d807      	bhi.n	800e38c <RadioGetLoRaBandwidthInHz+0x14>
 800e37c:	e8df f000 	tbb	[pc, r0]
 800e380:	17110b20 	.word	0x17110b20
 800e384:	061e1c1a 	.word	0x061e1c1a
 800e388:	0e08      	.short	0x0e08
 800e38a:	14          	.byte	0x14
 800e38b:	00          	.byte	0x00
 800e38c:	2000      	movs	r0, #0
 800e38e:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800e390:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800e394:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800e396:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800e39a:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800e39c:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800e3a0:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800e3a2:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800e3a6:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800e3a8:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800e3ac:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800e3ae:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800e3b2:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800e3b4:	4804      	ldr	r0, [pc, #16]	; (800e3c8 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800e3b6:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800e3b8:	4804      	ldr	r0, [pc, #16]	; (800e3cc <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800e3ba:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800e3bc:	4804      	ldr	r0, [pc, #16]	; (800e3d0 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800e3be:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800e3c0:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	0001e848 	.word	0x0001e848
 800e3cc:	0003d090 	.word	0x0003d090
 800e3d0:	0007a120 	.word	0x0007a120

0800e3d4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e3d4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800e3d8:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e3da:	b953      	cbnz	r3, 800e3f2 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800e3dc:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 800e3de:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e3e0:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e3e2:	b141      	cbz	r1, 800e3f6 <RadioGetGfskTimeOnAirNumerator+0x22>
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	f89d 0000 	ldrb.w	r0, [sp]
 800e3ea:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800e3ec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800e3f0:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	e7f3      	b.n	800e3de <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	e7f5      	b.n	800e3e6 <RadioGetGfskTimeOnAirNumerator+0x12>

0800e3fa <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e3fa:	b570      	push	{r4, r5, r6, lr}
 800e3fc:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800e400:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800e404:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800e406:	f1a1 0c05 	sub.w	ip, r1, #5
 800e40a:	f1bc 0f01 	cmp.w	ip, #1
 800e40e:	d931      	bls.n	800e474 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e410:	b918      	cbnz	r0, 800e41a <RadioGetLoRaTimeOnAirNumerator+0x20>
 800e412:	f1a1 060b 	sub.w	r6, r1, #11
 800e416:	2e01      	cmp	r6, #1
 800e418:	d934      	bls.n	800e484 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800e41a:	2801      	cmp	r0, #1
 800e41c:	d02e      	beq.n	800e47c <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800e41e:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e420:	f89d c014 	ldrb.w	ip, [sp, #20]
 800e424:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800e428:	b385      	cbz	r5, 800e48c <RadioGetLoRaTimeOnAirNumerator+0x92>
 800e42a:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e42c:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800e42e:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800e430:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800e434:	b364      	cbz	r4, 800e490 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800e436:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800e43a:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800e43c:	2906      	cmp	r1, #6
 800e43e:	d904      	bls.n	800e44a <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800e440:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800e444:	b10e      	cbz	r6, 800e44a <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800e446:	1e88      	subs	r0, r1, #2
 800e448:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800e44a:	f1bc 0f00 	cmp.w	ip, #0
 800e44e:	db22      	blt.n	800e496 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800e450:	4484      	add	ip, r0
 800e452:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800e456:	fb9c fcf0 	sdiv	ip, ip, r0
 800e45a:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800e45e:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800e462:	2906      	cmp	r1, #6
 800e464:	d801      	bhi.n	800e46a <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800e466:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800e46a:	0080      	lsls	r0, r0, #2
 800e46c:	3001      	adds	r0, #1
 800e46e:	3902      	subs	r1, #2
}
 800e470:	4088      	lsls	r0, r1
 800e472:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800e474:	2b0b      	cmp	r3, #11
 800e476:	d8cb      	bhi.n	800e410 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800e478:	230c      	movs	r3, #12
 800e47a:	e7c9      	b.n	800e410 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e47c:	290c      	cmp	r1, #12
 800e47e:	d003      	beq.n	800e488 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800e480:	2600      	movs	r6, #0
 800e482:	e7cd      	b.n	800e420 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800e484:	2601      	movs	r6, #1
 800e486:	e7cb      	b.n	800e420 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800e488:	2601      	movs	r6, #1
 800e48a:	e7c9      	b.n	800e420 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800e48c:	2000      	movs	r0, #0
 800e48e:	e7cd      	b.n	800e42c <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800e490:	f04f 0e14 	mov.w	lr, #20
 800e494:	e7d1      	b.n	800e43a <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 800e496:	f04f 0c00 	mov.w	ip, #0
 800e49a:	e7d9      	b.n	800e450 <RadioGetLoRaTimeOnAirNumerator+0x56>

0800e49c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800e49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e49e:	b085      	sub	sp, #20
 800e4a0:	460e      	mov	r6, r1
 800e4a2:	4615      	mov	r5, r2
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800e4aa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800e4ae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800e4b2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800e4b6:	b148      	cbz	r0, 800e4cc <RadioTimeOnAir+0x30>
 800e4b8:	2801      	cmp	r0, #1
 800e4ba:	d012      	beq.n	800e4e2 <RadioTimeOnAir+0x46>
 800e4bc:	2501      	movs	r5, #1
 800e4be:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800e4c0:	442c      	add	r4, r5
 800e4c2:	1e60      	subs	r0, r4, #1
}
 800e4c4:	fbb0 f0f5 	udiv	r0, r0, r5
 800e4c8:	b005      	add	sp, #20
 800e4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800e4cc:	f8cd c004 	str.w	ip, [sp, #4]
 800e4d0:	9700      	str	r7, [sp, #0]
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f7ff ff7e 	bl	800e3d4 <RadioGetGfskTimeOnAirNumerator>
 800e4d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e4dc:	fb03 f400 	mul.w	r4, r3, r0
        break;
 800e4e0:	e7ee      	b.n	800e4c0 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800e4e2:	f8cd c008 	str.w	ip, [sp, #8]
 800e4e6:	9701      	str	r7, [sp, #4]
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	460a      	mov	r2, r1
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f7ff ff82 	bl	800e3fa <RadioGetLoRaTimeOnAirNumerator>
 800e4f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e4fa:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800e4fe:	4b03      	ldr	r3, [pc, #12]	; (800e50c <RadioTimeOnAir+0x70>)
 800e500:	5d98      	ldrb	r0, [r3, r6]
 800e502:	f7ff ff39 	bl	800e378 <RadioGetLoRaBandwidthInHz>
 800e506:	4605      	mov	r5, r0
        break;
 800e508:	e7da      	b.n	800e4c0 <RadioTimeOnAir+0x24>
 800e50a:	bf00      	nop
 800e50c:	08011ea0 	.word	0x08011ea0

0800e510 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800e510:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e512:	4b03      	ldr	r3, [pc, #12]	; (800e520 <RadioOnTxTimeoutProcess+0x10>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	b113      	cbz	r3, 800e51e <RadioOnTxTimeoutProcess+0xe>
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	b103      	cbz	r3, 800e51e <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 800e51c:	4798      	blx	r3
    }
}
 800e51e:	bd08      	pop	{r3, pc}
 800e520:	200012ec 	.word	0x200012ec

0800e524 <RadioOnTxTimeoutIrq>:
{
 800e524:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800e526:	f7ff fff3 	bl	800e510 <RadioOnTxTimeoutProcess>
}
 800e52a:	bd08      	pop	{r3, pc}

0800e52c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800e52c:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e52e:	4b03      	ldr	r3, [pc, #12]	; (800e53c <RadioOnRxTimeoutProcess+0x10>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	b113      	cbz	r3, 800e53a <RadioOnRxTimeoutProcess+0xe>
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	b103      	cbz	r3, 800e53a <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 800e538:	4798      	blx	r3
    }
}
 800e53a:	bd08      	pop	{r3, pc}
 800e53c:	200012ec 	.word	0x200012ec

0800e540 <RadioOnRxTimeoutIrq>:
{
 800e540:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800e542:	f7ff fff3 	bl	800e52c <RadioOnRxTimeoutProcess>
}
 800e546:	bd08      	pop	{r3, pc}

0800e548 <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800e548:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 800e54a:	2300      	movs	r3, #0
 800e54c:	e005      	b.n	800e55a <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800e54e:	5ccc      	ldrb	r4, [r1, r3]
 800e550:	43e4      	mvns	r4, r4
 800e552:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 800e554:	2400      	movs	r4, #0
 800e556:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 800e558:	3301      	adds	r3, #1
 800e55a:	429a      	cmp	r2, r3
 800e55c:	dcf7      	bgt.n	800e54e <payload_integration+0x6>
    }

    for (i = 0; i < (size * 8); i++)
 800e55e:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800e560:	461c      	mov	r4, r3
 800e562:	e011      	b.n	800e588 <payload_integration+0x40>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 800e564:	f103 0c07 	add.w	ip, r3, #7
 800e568:	e022      	b.n	800e5b0 <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800e56a:	b2ed      	uxtb	r5, r5
 800e56c:	5d4d      	ldrb	r5, [r1, r5]
 800e56e:	fa45 f50e 	asr.w	r5, r5, lr
 800e572:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 800e576:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800e578:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 800e57c:	fa04 fc0c 	lsl.w	ip, r4, ip
 800e580:	5d46      	ldrb	r6, [r0, r5]
 800e582:	ea46 060c 	orr.w	r6, r6, ip
 800e586:	5546      	strb	r6, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 800e588:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800e58c:	da26      	bge.n	800e5dc <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 800e58e:	425d      	negs	r5, r3
 800e590:	f003 0c07 	and.w	ip, r3, #7
 800e594:	f005 0507 	and.w	r5, r5, #7
 800e598:	bf58      	it	pl
 800e59a:	f1c5 0c00 	rsbpl	ip, r5, #0
 800e59e:	fa5f fe8c 	uxtb.w	lr, ip
 800e5a2:	f1ce 0e07 	rsb	lr, lr, #7
 800e5a6:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 800e5aa:	469c      	mov	ip, r3
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	dbd9      	blt.n	800e564 <payload_integration+0x1c>
 800e5b0:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	425e      	negs	r6, r3
 800e5b8:	f003 0c07 	and.w	ip, r3, #7
 800e5bc:	f006 0607 	and.w	r6, r6, #7
 800e5c0:	bf58      	it	pl
 800e5c2:	f1c6 0c00 	rsbpl	ip, r6, #0
 800e5c6:	fa5f fc8c 	uxtb.w	ip, ip
 800e5ca:	f1cc 0c07 	rsb	ip, ip, #7
 800e5ce:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 800e5d2:	461e      	mov	r6, r3
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	dac8      	bge.n	800e56a <payload_integration+0x22>
 800e5d8:	1dde      	adds	r6, r3, #7
 800e5da:	e7c6      	b.n	800e56a <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800e5dc:	01a3      	lsls	r3, r4, #6
 800e5de:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 800e5e2:	b25b      	sxtb	r3, r3
 800e5e4:	b91c      	cbnz	r4, 800e5ee <payload_integration+0xa6>
 800e5e6:	2120      	movs	r1, #32
 800e5e8:	430b      	orrs	r3, r1
 800e5ea:	5483      	strb	r3, [r0, r2]
}
 800e5ec:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	e7fa      	b.n	800e5e8 <payload_integration+0xa0>
	...

0800e5f4 <RadioSetMaxPayloadLength>:
{
 800e5f4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800e5f6:	2801      	cmp	r0, #1
 800e5f8:	d004      	beq.n	800e604 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800e5fa:	4b0a      	ldr	r3, [pc, #40]	; (800e624 <RadioSetMaxPayloadLength+0x30>)
 800e5fc:	7d5b      	ldrb	r3, [r3, #21]
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d008      	beq.n	800e614 <RadioSetMaxPayloadLength+0x20>
}
 800e602:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800e604:	4b08      	ldr	r3, [pc, #32]	; (800e628 <RadioSetMaxPayloadLength+0x34>)
 800e606:	7019      	strb	r1, [r3, #0]
 800e608:	4806      	ldr	r0, [pc, #24]	; (800e624 <RadioSetMaxPayloadLength+0x30>)
 800e60a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e60c:	300e      	adds	r0, #14
 800e60e:	f001 fd31 	bl	8010074 <SUBGRF_SetPacketParams>
 800e612:	e7f6      	b.n	800e602 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800e614:	4b04      	ldr	r3, [pc, #16]	; (800e628 <RadioSetMaxPayloadLength+0x34>)
 800e616:	7019      	strb	r1, [r3, #0]
 800e618:	4802      	ldr	r0, [pc, #8]	; (800e624 <RadioSetMaxPayloadLength+0x30>)
 800e61a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e61c:	300e      	adds	r0, #14
 800e61e:	f001 fd29 	bl	8010074 <SUBGRF_SetPacketParams>
}
 800e622:	e7ee      	b.n	800e602 <RadioSetMaxPayloadLength+0xe>
 800e624:	20001308 	.word	0x20001308
 800e628:	200000d0 	.word	0x200000d0

0800e62c <RadioRead>:
{
 800e62c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 800e62e:	f001 fbdb 	bl	800fde8 <SUBGRF_ReadRegister>
}
 800e632:	bd08      	pop	{r3, pc}

0800e634 <RadioWrite>:
{
 800e634:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 800e636:	f001 fae5 	bl	800fc04 <SUBGRF_WriteRegister>
}
 800e63a:	bd08      	pop	{r3, pc}

0800e63c <RadioTxCw>:
{
 800e63c:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800e63e:	f001 fe2f 	bl	80102a0 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800e642:	2101      	movs	r1, #1
 800e644:	f001 fe18 	bl	8010278 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800e648:	f001 f96e 	bl	800f928 <SUBGRF_SetTxContinuousWave>
}
 800e64c:	bd08      	pop	{r3, pc}
	...

0800e650 <RadioTxPrbs>:
{
 800e650:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800e652:	2101      	movs	r1, #1
 800e654:	4b07      	ldr	r3, [pc, #28]	; (800e674 <RadioTxPrbs+0x24>)
 800e656:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800e65a:	f001 fe0d 	bl	8010278 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800e65e:	212d      	movs	r1, #45	; 0x2d
 800e660:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e664:	f7ff ffe6 	bl	800e634 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800e668:	f001 f965 	bl	800f936 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800e66c:	4802      	ldr	r0, [pc, #8]	; (800e678 <RadioTxPrbs+0x28>)
 800e66e:	f001 f8f7 	bl	800f860 <SUBGRF_SetTx>
}
 800e672:	bd08      	pop	{r3, pc}
 800e674:	20001308 	.word	0x20001308
 800e678:	000fffff 	.word	0x000fffff

0800e67c <RadioSetRxDutyCycle>:
{
 800e67c:	b538      	push	{r3, r4, r5, lr}
 800e67e:	4604      	mov	r4, r0
 800e680:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e682:	2100      	movs	r1, #0
 800e684:	4b04      	ldr	r3, [pc, #16]	; (800e698 <RadioSetRxDutyCycle+0x1c>)
 800e686:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800e68a:	f001 fdf5 	bl	8010278 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800e68e:	4629      	mov	r1, r5
 800e690:	4620      	mov	r0, r4
 800e692:	f001 f919 	bl	800f8c8 <SUBGRF_SetRxDutyCycle>
}
 800e696:	bd38      	pop	{r3, r4, r5, pc}
 800e698:	20001308 	.word	0x20001308

0800e69c <RadioRxBoosted>:
{
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 800e6a0:	f001 fed2 	bl	8010448 <RFW_Is_Init>
 800e6a4:	2801      	cmp	r0, #1
 800e6a6:	d014      	beq.n	800e6d2 <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	f240 2162 	movw	r1, #610	; 0x262
 800e6b0:	4608      	mov	r0, r1
 800e6b2:	f001 f9e4 	bl	800fa7e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800e6b6:	b97c      	cbnz	r4, 800e6d8 <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e6b8:	4c0f      	ldr	r4, [pc, #60]	; (800e6f8 <RadioRxBoosted+0x5c>)
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800e6c0:	f001 fdda 	bl	8010278 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800e6c4:	7863      	ldrb	r3, [r4, #1]
 800e6c6:	b183      	cbz	r3, 800e6ea <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800e6c8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e6cc:	f001 faaa 	bl	800fc24 <SUBGRF_SetRxBoosted>
}
 800e6d0:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 800e6d2:	f001 fec1 	bl	8010458 <RFW_ReceiveInit>
 800e6d6:	e7ee      	b.n	800e6b6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e6d8:	4d08      	ldr	r5, [pc, #32]	; (800e6fc <RadioRxBoosted+0x60>)
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4628      	mov	r0, r5
 800e6de:	f002 fb7d 	bl	8010ddc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f002 fb34 	bl	8010d50 <UTIL_TIMER_Start>
 800e6e8:	e7e6      	b.n	800e6b8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800e6ea:	4b03      	ldr	r3, [pc, #12]	; (800e6f8 <RadioRxBoosted+0x5c>)
 800e6ec:	6898      	ldr	r0, [r3, #8]
 800e6ee:	0180      	lsls	r0, r0, #6
 800e6f0:	f001 fa98 	bl	800fc24 <SUBGRF_SetRxBoosted>
}
 800e6f4:	e7ec      	b.n	800e6d0 <RadioRxBoosted+0x34>
 800e6f6:	bf00      	nop
 800e6f8:	20001308 	.word	0x20001308
 800e6fc:	200012f0 	.word	0x200012f0

0800e700 <RadioStandby>:
{
 800e700:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800e702:	2000      	movs	r0, #0
 800e704:	f001 f892 	bl	800f82c <SUBGRF_SetStandby>
}
 800e708:	bd08      	pop	{r3, pc}

0800e70a <RadioGetStatus>:
{
 800e70a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800e70c:	f001 f888 	bl	800f820 <SUBGRF_GetOperatingMode>
 800e710:	2805      	cmp	r0, #5
 800e712:	d007      	beq.n	800e724 <RadioGetStatus+0x1a>
 800e714:	2807      	cmp	r0, #7
 800e716:	d007      	beq.n	800e728 <RadioGetStatus+0x1e>
 800e718:	2804      	cmp	r0, #4
 800e71a:	d001      	beq.n	800e720 <RadioGetStatus+0x16>
            return RF_IDLE;
 800e71c:	2000      	movs	r0, #0
}
 800e71e:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800e720:	2002      	movs	r0, #2
 800e722:	e7fc      	b.n	800e71e <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800e724:	2001      	movs	r0, #1
 800e726:	e7fa      	b.n	800e71e <RadioGetStatus+0x14>
            return RF_CAD;
 800e728:	2003      	movs	r0, #3
 800e72a:	e7f8      	b.n	800e71e <RadioGetStatus+0x14>

0800e72c <RadioIrqProcess>:
{
 800e72c:	b530      	push	{r4, r5, lr}
 800e72e:	b083      	sub	sp, #12
    uint8_t size = 0;
 800e730:	2300      	movs	r3, #0
 800e732:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800e736:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 800e738:	4b9c      	ldr	r3, [pc, #624]	; (800e9ac <RadioIrqProcess+0x280>)
 800e73a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e73e:	2b20      	cmp	r3, #32
 800e740:	d829      	bhi.n	800e796 <RadioIrqProcess+0x6a>
 800e742:	b21a      	sxth	r2, r3
 800e744:	2a00      	cmp	r2, #0
 800e746:	f000 80eb 	beq.w	800e920 <RadioIrqProcess+0x1f4>
 800e74a:	3b01      	subs	r3, #1
 800e74c:	2b1f      	cmp	r3, #31
 800e74e:	f200 80e7 	bhi.w	800e920 <RadioIrqProcess+0x1f4>
 800e752:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e756:	005f      	.short	0x005f
 800e758:	00e50075 	.word	0x00e50075
 800e75c:	00e500df 	.word	0x00e500df
 800e760:	00e500e5 	.word	0x00e500e5
 800e764:	00e500e7 	.word	0x00e500e7
 800e768:	00e500e5 	.word	0x00e500e5
 800e76c:	00e500e5 	.word	0x00e500e5
 800e770:	00e500e5 	.word	0x00e500e5
 800e774:	00e500f4 	.word	0x00e500f4
 800e778:	00e500e5 	.word	0x00e500e5
 800e77c:	00e500e5 	.word	0x00e500e5
 800e780:	00e500e5 	.word	0x00e500e5
 800e784:	00e500e5 	.word	0x00e500e5
 800e788:	00e500e5 	.word	0x00e500e5
 800e78c:	00e500e5 	.word	0x00e500e5
 800e790:	00e500e5 	.word	0x00e500e5
 800e794:	00fb      	.short	0x00fb
 800e796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e79a:	f000 80a3 	beq.w	800e8e4 <RadioIrqProcess+0x1b8>
 800e79e:	d924      	bls.n	800e7ea <RadioIrqProcess+0xbe>
 800e7a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7a4:	f040 80bc 	bne.w	800e920 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800e7a8:	4b81      	ldr	r3, [pc, #516]	; (800e9b0 <RadioIrqProcess+0x284>)
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	2002      	movs	r0, #2
 800e7b0:	f001 ff30 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800e7b4:	f001 f834 	bl	800f820 <SUBGRF_GetOperatingMode>
 800e7b8:	2804      	cmp	r0, #4
 800e7ba:	f000 809e 	beq.w	800e8fa <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800e7be:	f001 f82f 	bl	800f820 <SUBGRF_GetOperatingMode>
 800e7c2:	2805      	cmp	r0, #5
 800e7c4:	f040 80ac 	bne.w	800e920 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 800e7c8:	487a      	ldr	r0, [pc, #488]	; (800e9b4 <RadioIrqProcess+0x288>)
 800e7ca:	f002 fa67 	bl	8010c9c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	f001 f82c 	bl	800f82c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e7d4:	4b78      	ldr	r3, [pc, #480]	; (800e9b8 <RadioIrqProcess+0x28c>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	f000 80a1 	beq.w	800e920 <RadioIrqProcess+0x1f4>
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	f000 809d 	beq.w	800e920 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 800e7e6:	4798      	blx	r3
 800e7e8:	e09a      	b.n	800e920 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 800e7ea:	2b40      	cmp	r3, #64	; 0x40
 800e7ec:	f000 80c7 	beq.w	800e97e <RadioIrqProcess+0x252>
 800e7f0:	2b80      	cmp	r3, #128	; 0x80
 800e7f2:	f040 8095 	bne.w	800e920 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	f001 f818 	bl	800f82c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800e7fc:	4b6e      	ldr	r3, [pc, #440]	; (800e9b8 <RadioIrqProcess+0x28c>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	f000 808d 	beq.w	800e920 <RadioIrqProcess+0x1f4>
 800e806:	699b      	ldr	r3, [r3, #24]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	f000 8089 	beq.w	800e920 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 800e80e:	2000      	movs	r0, #0
 800e810:	4798      	blx	r3
 800e812:	e085      	b.n	800e920 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 800e814:	4869      	ldr	r0, [pc, #420]	; (800e9bc <RadioIrqProcess+0x290>)
 800e816:	f002 fa41 	bl	8010c9c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800e81a:	2000      	movs	r0, #0
 800e81c:	f001 f806 	bl	800f82c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800e820:	f001 fe14 	bl	801044c <RFW_Is_LongPacketModeEnabled>
 800e824:	2801      	cmp	r0, #1
 800e826:	d008      	beq.n	800e83a <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800e828:	4b63      	ldr	r3, [pc, #396]	; (800e9b8 <RadioIrqProcess+0x28c>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d077      	beq.n	800e920 <RadioIrqProcess+0x1f4>
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d074      	beq.n	800e920 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 800e836:	4798      	blx	r3
 800e838:	e072      	b.n	800e920 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 800e83a:	f001 fe10 	bl	801045e <RFW_DeInit_TxLongPacket>
 800e83e:	e7f3      	b.n	800e828 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 800e840:	485c      	ldr	r0, [pc, #368]	; (800e9b4 <RadioIrqProcess+0x288>)
 800e842:	f002 fa2b 	bl	8010c9c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800e846:	4b59      	ldr	r3, [pc, #356]	; (800e9ac <RadioIrqProcess+0x280>)
 800e848:	785b      	ldrb	r3, [r3, #1]
 800e84a:	b1f3      	cbz	r3, 800e88a <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800e84c:	22ff      	movs	r2, #255	; 0xff
 800e84e:	f10d 0107 	add.w	r1, sp, #7
 800e852:	485b      	ldr	r0, [pc, #364]	; (800e9c0 <RadioIrqProcess+0x294>)
 800e854:	f001 fcf6 	bl	8010244 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800e858:	485a      	ldr	r0, [pc, #360]	; (800e9c4 <RadioIrqProcess+0x298>)
 800e85a:	f001 f997 	bl	800fb8c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800e85e:	4b56      	ldr	r3, [pc, #344]	; (800e9b8 <RadioIrqProcess+0x28c>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d05c      	beq.n	800e920 <RadioIrqProcess+0x1f4>
 800e866:	689c      	ldr	r4, [r3, #8]
 800e868:	2c00      	cmp	r4, #0
 800e86a:	d059      	beq.n	800e920 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 800e86c:	4b4f      	ldr	r3, [pc, #316]	; (800e9ac <RadioIrqProcess+0x280>)
 800e86e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e872:	2b01      	cmp	r3, #1
 800e874:	d11d      	bne.n	800e8b2 <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800e876:	4a4d      	ldr	r2, [pc, #308]	; (800e9ac <RadioIrqProcess+0x280>)
 800e878:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800e87c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800e880:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e884:	484e      	ldr	r0, [pc, #312]	; (800e9c0 <RadioIrqProcess+0x294>)
 800e886:	47a0      	blx	r4
                break;
 800e888:	e04a      	b.n	800e920 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800e88a:	2000      	movs	r0, #0
 800e88c:	f000 ffce 	bl	800f82c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800e890:	2100      	movs	r1, #0
 800e892:	f640 1002 	movw	r0, #2306	; 0x902
 800e896:	f001 f9b5 	bl	800fc04 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800e89a:	f640 1044 	movw	r0, #2372	; 0x944
 800e89e:	f001 faa3 	bl	800fde8 <SUBGRF_ReadRegister>
 800e8a2:	f040 0102 	orr.w	r1, r0, #2
 800e8a6:	b2c9      	uxtb	r1, r1
 800e8a8:	f640 1044 	movw	r0, #2372	; 0x944
 800e8ac:	f001 f9aa 	bl	800fc04 <SUBGRF_WriteRegister>
 800e8b0:	e7cc      	b.n	800e84c <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800e8b2:	4c3e      	ldr	r4, [pc, #248]	; (800e9ac <RadioIrqProcess+0x280>)
 800e8b4:	4669      	mov	r1, sp
 800e8b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e8b8:	f001 fd78 	bl	80103ac <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800e8bc:	4b3e      	ldr	r3, [pc, #248]	; (800e9b8 <RadioIrqProcess+0x28c>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	689d      	ldr	r5, [r3, #8]
 800e8c2:	9b00      	ldr	r3, [sp, #0]
 800e8c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e8c8:	4a3f      	ldr	r2, [pc, #252]	; (800e9c8 <RadioIrqProcess+0x29c>)
 800e8ca:	fb82 1203 	smull	r1, r2, r2, r3
 800e8ce:	17db      	asrs	r3, r3, #31
 800e8d0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e8d4:	b25b      	sxtb	r3, r3
 800e8d6:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800e8da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e8de:	4838      	ldr	r0, [pc, #224]	; (800e9c0 <RadioIrqProcess+0x294>)
 800e8e0:	47a8      	blx	r5
                break;
 800e8e2:	e01d      	b.n	800e920 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	f000 ffa1 	bl	800f82c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800e8ea:	4b33      	ldr	r3, [pc, #204]	; (800e9b8 <RadioIrqProcess+0x28c>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	b1bb      	cbz	r3, 800e920 <RadioIrqProcess+0x1f4>
 800e8f0:	699b      	ldr	r3, [r3, #24]
 800e8f2:	b1ab      	cbz	r3, 800e920 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 800e8f4:	2001      	movs	r0, #1
 800e8f6:	4798      	blx	r3
 800e8f8:	e012      	b.n	800e920 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 800e8fa:	4830      	ldr	r0, [pc, #192]	; (800e9bc <RadioIrqProcess+0x290>)
 800e8fc:	f002 f9ce 	bl	8010c9c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800e900:	2000      	movs	r0, #0
 800e902:	f000 ff93 	bl	800f82c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e906:	4b2c      	ldr	r3, [pc, #176]	; (800e9b8 <RadioIrqProcess+0x28c>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	b14b      	cbz	r3, 800e920 <RadioIrqProcess+0x1f4>
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	b13b      	cbz	r3, 800e920 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 800e910:	4798      	blx	r3
 800e912:	e005      	b.n	800e920 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800e914:	4b2d      	ldr	r3, [pc, #180]	; (800e9cc <RadioIrqProcess+0x2a0>)
 800e916:	2201      	movs	r2, #1
 800e918:	2100      	movs	r1, #0
 800e91a:	2002      	movs	r0, #2
 800e91c:	f001 fe7a 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
}
 800e920:	b003      	add	sp, #12
 800e922:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800e924:	4b2a      	ldr	r3, [pc, #168]	; (800e9d0 <RadioIrqProcess+0x2a4>)
 800e926:	2201      	movs	r2, #1
 800e928:	2100      	movs	r1, #0
 800e92a:	2002      	movs	r0, #2
 800e92c:	f001 fe72 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 800e930:	f001 fd8a 	bl	8010448 <RFW_Is_Init>
 800e934:	2801      	cmp	r0, #1
 800e936:	d1f3      	bne.n	800e920 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 800e938:	f001 fd92 	bl	8010460 <RFW_ReceivePayload>
 800e93c:	e7f0      	b.n	800e920 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800e93e:	4b25      	ldr	r3, [pc, #148]	; (800e9d4 <RadioIrqProcess+0x2a8>)
 800e940:	2201      	movs	r2, #1
 800e942:	2100      	movs	r1, #0
 800e944:	2002      	movs	r0, #2
 800e946:	f001 fe65 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e94a:	e7e9      	b.n	800e920 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 800e94c:	4819      	ldr	r0, [pc, #100]	; (800e9b4 <RadioIrqProcess+0x288>)
 800e94e:	f002 f9a5 	bl	8010c9c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800e952:	4b16      	ldr	r3, [pc, #88]	; (800e9ac <RadioIrqProcess+0x280>)
 800e954:	785b      	ldrb	r3, [r3, #1]
 800e956:	b173      	cbz	r3, 800e976 <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e958:	4b17      	ldr	r3, [pc, #92]	; (800e9b8 <RadioIrqProcess+0x28c>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d0df      	beq.n	800e920 <RadioIrqProcess+0x1f4>
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d0dc      	beq.n	800e920 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 800e966:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800e968:	4b1b      	ldr	r3, [pc, #108]	; (800e9d8 <RadioIrqProcess+0x2ac>)
 800e96a:	2201      	movs	r2, #1
 800e96c:	2100      	movs	r1, #0
 800e96e:	2002      	movs	r0, #2
 800e970:	f001 fe50 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
 800e974:	e7d4      	b.n	800e920 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800e976:	2000      	movs	r0, #0
 800e978:	f000 ff58 	bl	800f82c <SUBGRF_SetStandby>
 800e97c:	e7ec      	b.n	800e958 <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800e97e:	4b17      	ldr	r3, [pc, #92]	; (800e9dc <RadioIrqProcess+0x2b0>)
 800e980:	2201      	movs	r2, #1
 800e982:	2100      	movs	r1, #0
 800e984:	2002      	movs	r0, #2
 800e986:	f001 fe45 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800e98a:	4b08      	ldr	r3, [pc, #32]	; (800e9ac <RadioIrqProcess+0x280>)
 800e98c:	785b      	ldrb	r3, [r3, #1]
 800e98e:	b143      	cbz	r3, 800e9a2 <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800e990:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <RadioIrqProcess+0x28c>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d0c3      	beq.n	800e920 <RadioIrqProcess+0x1f4>
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d0c0      	beq.n	800e920 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 800e99e:	4798      	blx	r3
}
 800e9a0:	e7be      	b.n	800e920 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	f000 ff42 	bl	800f82c <SUBGRF_SetStandby>
 800e9a8:	e7f2      	b.n	800e990 <RadioIrqProcess+0x264>
 800e9aa:	bf00      	nop
 800e9ac:	20001308 	.word	0x20001308
 800e9b0:	08011e34 	.word	0x08011e34
 800e9b4:	200012f0 	.word	0x200012f0
 800e9b8:	200012ec 	.word	0x200012ec
 800e9bc:	20001360 	.word	0x20001360
 800e9c0:	200011ec 	.word	0x200011ec
 800e9c4:	2000132c 	.word	0x2000132c
 800e9c8:	10624dd3 	.word	0x10624dd3
 800e9cc:	08011e48 	.word	0x08011e48
 800e9d0:	08011e54 	.word	0x08011e54
 800e9d4:	08011e60 	.word	0x08011e60
 800e9d8:	08011e6c 	.word	0x08011e6c
 800e9dc:	08011e78 	.word	0x08011e78

0800e9e0 <RadioOnDioIrq>:
{
 800e9e0:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800e9e2:	4b03      	ldr	r3, [pc, #12]	; (800e9f0 <RadioOnDioIrq+0x10>)
 800e9e4:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800e9e8:	f7ff fea0 	bl	800e72c <RadioIrqProcess>
}
 800e9ec:	bd08      	pop	{r3, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20001308 	.word	0x20001308

0800e9f4 <RadioGetWakeupTime>:
{
 800e9f4:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800e9f6:	f001 fc6a 	bl	80102ce <SUBGRF_GetRadioWakeUpTime>
}
 800e9fa:	3003      	adds	r0, #3
 800e9fc:	bd08      	pop	{r3, pc}

0800e9fe <RadioReadRegisters>:
{
 800e9fe:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800ea00:	f001 fbaa 	bl	8010158 <SUBGRF_ReadRegisters>
}
 800ea04:	bd08      	pop	{r3, pc}

0800ea06 <RadioWriteRegisters>:
{
 800ea06:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800ea08:	f001 faf2 	bl	800fff0 <SUBGRF_WriteRegisters>
}
 800ea0c:	bd08      	pop	{r3, pc}

0800ea0e <RadioRssi>:
{
 800ea0e:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800ea10:	f001 f8ae 	bl	800fb70 <SUBGRF_GetRssiInst>
}
 800ea14:	b200      	sxth	r0, r0
 800ea16:	bd08      	pop	{r3, pc}

0800ea18 <RadioSetTxContinuousWave>:
{
 800ea18:	b538      	push	{r3, r4, r5, lr}
 800ea1a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800ea1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea20:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 800ea24:	f001 f864 	bl	800faf0 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800ea28:	4628      	mov	r0, r5
 800ea2a:	f001 fc39 	bl	80102a0 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800ea2e:	2101      	movs	r1, #1
 800ea30:	f001 fc22 	bl	8010278 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ea34:	f000 ff78 	bl	800f928 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800ea38:	4d04      	ldr	r5, [pc, #16]	; (800ea4c <RadioSetTxContinuousWave+0x34>)
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	f002 f9cd 	bl	8010ddc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ea42:	4628      	mov	r0, r5
 800ea44:	f002 f984 	bl	8010d50 <UTIL_TIMER_Start>
}
 800ea48:	bd38      	pop	{r3, r4, r5, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20001360 	.word	0x20001360

0800ea50 <RadioSetChannel>:
{
 800ea50:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800ea52:	f001 f84d 	bl	800faf0 <SUBGRF_SetRfFrequency>
}
 800ea56:	bd08      	pop	{r3, pc}

0800ea58 <RadioStartCad>:
{
 800ea58:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	4b07      	ldr	r3, [pc, #28]	; (800ea7c <RadioStartCad+0x24>)
 800ea5e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800ea62:	f001 fc09 	bl	8010278 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800ea66:	2300      	movs	r3, #0
 800ea68:	461a      	mov	r2, r3
 800ea6a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800ea6e:	4608      	mov	r0, r1
 800ea70:	f001 f805 	bl	800fa7e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800ea74:	f000 ff4c 	bl	800f910 <SUBGRF_SetCad>
}
 800ea78:	bd08      	pop	{r3, pc}
 800ea7a:	bf00      	nop
 800ea7c:	20001308 	.word	0x20001308

0800ea80 <RadioRx>:
{
 800ea80:	b538      	push	{r3, r4, r5, lr}
 800ea82:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 800ea84:	f001 fce0 	bl	8010448 <RFW_Is_Init>
 800ea88:	2801      	cmp	r0, #1
 800ea8a:	d014      	beq.n	800eab6 <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	461a      	mov	r2, r3
 800ea90:	f240 2162 	movw	r1, #610	; 0x262
 800ea94:	4608      	mov	r0, r1
 800ea96:	f000 fff2 	bl	800fa7e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800ea9a:	b97c      	cbnz	r4, 800eabc <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800ea9c:	4c0f      	ldr	r4, [pc, #60]	; (800eadc <RadioRx+0x5c>)
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800eaa4:	f001 fbe8 	bl	8010278 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800eaa8:	7863      	ldrb	r3, [r4, #1]
 800eaaa:	b183      	cbz	r3, 800eace <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800eaac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800eab0:	f000 fef0 	bl	800f894 <SUBGRF_SetRx>
}
 800eab4:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 800eab6:	f001 fccf 	bl	8010458 <RFW_ReceiveInit>
 800eaba:	e7ee      	b.n	800ea9a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800eabc:	4d08      	ldr	r5, [pc, #32]	; (800eae0 <RadioRx+0x60>)
 800eabe:	4621      	mov	r1, r4
 800eac0:	4628      	mov	r0, r5
 800eac2:	f002 f98b 	bl	8010ddc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800eac6:	4628      	mov	r0, r5
 800eac8:	f002 f942 	bl	8010d50 <UTIL_TIMER_Start>
 800eacc:	e7e6      	b.n	800ea9c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800eace:	4b03      	ldr	r3, [pc, #12]	; (800eadc <RadioRx+0x5c>)
 800ead0:	6898      	ldr	r0, [r3, #8]
 800ead2:	0180      	lsls	r0, r0, #6
 800ead4:	f000 fede 	bl	800f894 <SUBGRF_SetRx>
}
 800ead8:	e7ec      	b.n	800eab4 <RadioRx+0x34>
 800eada:	bf00      	nop
 800eadc:	20001308 	.word	0x20001308
 800eae0:	200012f0 	.word	0x200012f0

0800eae4 <RadioSleep>:
{
 800eae4:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800eae6:	f04f 0004 	mov.w	r0, #4
 800eaea:	f001 f9d7 	bl	800fe9c <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800eaee:	2002      	movs	r0, #2
 800eaf0:	f7f2 fd04 	bl	80014fc <HAL_Delay>
}
 800eaf4:	bd08      	pop	{r3, pc}
	...

0800eaf8 <RadioSend>:
{
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	4605      	mov	r5, r0
 800eafe:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800eb00:	2300      	movs	r3, #0
 800eb02:	461a      	mov	r2, r3
 800eb04:	f240 2101 	movw	r1, #513	; 0x201
 800eb08:	4608      	mov	r0, r1
 800eb0a:	f000 ffb8 	bl	800fa7e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800eb0e:	4e5a      	ldr	r6, [pc, #360]	; (800ec78 <RadioSend+0x180>)
 800eb10:	2101      	movs	r1, #1
 800eb12:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800eb16:	f001 fbaf 	bl	8010278 <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800eb1a:	7833      	ldrb	r3, [r6, #0]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d103      	bne.n	800eb28 <RadioSend+0x30>
 800eb20:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800eb24:	2b06      	cmp	r3, #6
 800eb26:	d012      	beq.n	800eb4e <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800eb28:	f640 0089 	movw	r0, #2185	; 0x889
 800eb2c:	f001 f95c 	bl	800fde8 <SUBGRF_ReadRegister>
 800eb30:	f040 0104 	orr.w	r1, r0, #4
 800eb34:	b2c9      	uxtb	r1, r1
 800eb36:	f640 0089 	movw	r0, #2185	; 0x889
 800eb3a:	f001 f863 	bl	800fc04 <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 800eb3e:	4b4e      	ldr	r3, [pc, #312]	; (800ec78 <RadioSend+0x180>)
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	2b03      	cmp	r3, #3
 800eb44:	d818      	bhi.n	800eb78 <RadioSend+0x80>
 800eb46:	e8df f003 	tbb	[pc, r3]
 800eb4a:	0d22      	.short	0x0d22
 800eb4c:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800eb4e:	f640 0089 	movw	r0, #2185	; 0x889
 800eb52:	f001 f949 	bl	800fde8 <SUBGRF_ReadRegister>
 800eb56:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800eb5a:	f640 0089 	movw	r0, #2185	; 0x889
 800eb5e:	f001 f851 	bl	800fc04 <SUBGRF_WriteRegister>
 800eb62:	e7ec      	b.n	800eb3e <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800eb64:	4844      	ldr	r0, [pc, #272]	; (800ec78 <RadioSend+0x180>)
 800eb66:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eb68:	300e      	adds	r0, #14
 800eb6a:	f001 fa83 	bl	8010074 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800eb6e:	2200      	movs	r2, #0
 800eb70:	4621      	mov	r1, r4
 800eb72:	4628      	mov	r0, r5
 800eb74:	f001 fb4d 	bl	8010212 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800eb78:	4c40      	ldr	r4, [pc, #256]	; (800ec7c <RadioSend+0x184>)
 800eb7a:	4b3f      	ldr	r3, [pc, #252]	; (800ec78 <RadioSend+0x180>)
 800eb7c:	6859      	ldr	r1, [r3, #4]
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f002 f92c 	bl	8010ddc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800eb84:	4620      	mov	r0, r4
 800eb86:	f002 f8e3 	bl	8010d50 <UTIL_TIMER_Start>
}
 800eb8a:	b002      	add	sp, #8
 800eb8c:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800eb8e:	f001 fc5b 	bl	8010448 <RFW_Is_Init>
 800eb92:	2801      	cmp	r0, #1
 800eb94:	d00a      	beq.n	800ebac <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800eb96:	4838      	ldr	r0, [pc, #224]	; (800ec78 <RadioSend+0x180>)
 800eb98:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eb9a:	300e      	adds	r0, #14
 800eb9c:	f001 fa6a 	bl	8010074 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800eba0:	2200      	movs	r2, #0
 800eba2:	4621      	mov	r1, r4
 800eba4:	4628      	mov	r0, r5
 800eba6:	f001 fb34 	bl	8010212 <SUBGRF_SendPayload>
 800ebaa:	e7e5      	b.n	800eb78 <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800ebac:	f10d 0207 	add.w	r2, sp, #7
 800ebb0:	4621      	mov	r1, r4
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f001 fc4d 	bl	8010452 <RFW_TransmitInit>
 800ebb8:	b968      	cbnz	r0, 800ebd6 <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ebba:	482f      	ldr	r0, [pc, #188]	; (800ec78 <RadioSend+0x180>)
 800ebbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ebc0:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ebc2:	300e      	adds	r0, #14
 800ebc4:	f001 fa56 	bl	8010074 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ebce:	4628      	mov	r0, r5
 800ebd0:	f001 fb1f 	bl	8010212 <SUBGRF_SendPayload>
 800ebd4:	e7d0      	b.n	800eb78 <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800ebd6:	4b2a      	ldr	r3, [pc, #168]	; (800ec80 <RadioSend+0x188>)
 800ebd8:	2201      	movs	r2, #1
 800ebda:	2100      	movs	r1, #0
 800ebdc:	2002      	movs	r0, #2
 800ebde:	f001 fd19 	bl	8010614 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800ebe2:	e7d2      	b.n	800eb8a <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ebe4:	4824      	ldr	r0, [pc, #144]	; (800ec78 <RadioSend+0x180>)
 800ebe6:	2302      	movs	r3, #2
 800ebe8:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ebea:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ebec:	300e      	adds	r0, #14
 800ebee:	f001 fa41 	bl	8010074 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f001 fb0b 	bl	8010212 <SUBGRF_SendPayload>
            break;
 800ebfc:	e7bc      	b.n	800eb78 <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 800ebfe:	4622      	mov	r2, r4
 800ec00:	4629      	mov	r1, r5
 800ec02:	4820      	ldr	r0, [pc, #128]	; (800ec84 <RadioSend+0x18c>)
 800ec04:	f7ff fca0 	bl	800e548 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ec08:	4e1b      	ldr	r6, [pc, #108]	; (800ec78 <RadioSend+0x180>)
 800ec0a:	2302      	movs	r3, #2
 800ec0c:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800ec0e:	1c65      	adds	r5, r4, #1
 800ec10:	b2ed      	uxtb	r5, r5
 800ec12:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ec14:	f106 000e 	add.w	r0, r6, #14
 800ec18:	f001 fa2c 	bl	8010074 <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	20f1      	movs	r0, #241	; 0xf1
 800ec20:	f7ff fd08 	bl	800e634 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800ec24:	2100      	movs	r1, #0
 800ec26:	20f0      	movs	r0, #240	; 0xf0
 800ec28:	f7ff fd04 	bl	800e634 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800ec2c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800ec2e:	2b64      	cmp	r3, #100	; 0x64
 800ec30:	d019      	beq.n	800ec66 <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800ec32:	21e1      	movs	r1, #225	; 0xe1
 800ec34:	20f3      	movs	r0, #243	; 0xf3
 800ec36:	f7ff fcfd 	bl	800e634 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800ec3a:	2104      	movs	r1, #4
 800ec3c:	20f2      	movs	r0, #242	; 0xf2
 800ec3e:	f7ff fcf9 	bl	800e634 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800ec42:	00e1      	lsls	r1, r4, #3
 800ec44:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800ec46:	0a09      	lsrs	r1, r1, #8
 800ec48:	20f4      	movs	r0, #244	; 0xf4
 800ec4a:	f7ff fcf3 	bl	800e634 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800ec4e:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 800ec52:	20f5      	movs	r0, #245	; 0xf5
 800ec54:	f7ff fcee 	bl	800e634 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800ec58:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ec5c:	4629      	mov	r1, r5
 800ec5e:	4809      	ldr	r0, [pc, #36]	; (800ec84 <RadioSend+0x18c>)
 800ec60:	f001 fad7 	bl	8010212 <SUBGRF_SendPayload>
            break;
 800ec64:	e788      	b.n	800eb78 <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800ec66:	2170      	movs	r1, #112	; 0x70
 800ec68:	20f3      	movs	r0, #243	; 0xf3
 800ec6a:	f7ff fce3 	bl	800e634 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800ec6e:	211d      	movs	r1, #29
 800ec70:	20f2      	movs	r0, #242	; 0xf2
 800ec72:	f7ff fcdf 	bl	800e634 <RadioWrite>
 800ec76:	e7e4      	b.n	800ec42 <RadioSend+0x14a>
 800ec78:	20001308 	.word	0x20001308
 800ec7c:	20001360 	.word	0x20001360
 800ec80:	08011e88 	.word	0x08011e88
 800ec84:	200011ec 	.word	0x200011ec

0800ec88 <RadioSetModem>:
{
 800ec88:	b510      	push	{r4, lr}
 800ec8a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800ec8c:	4b19      	ldr	r3, [pc, #100]	; (800ecf4 <RadioSetModem+0x6c>)
 800ec8e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 800ec90:	f001 fbe7 	bl	8010462 <RFW_SetRadioModem>
    switch( modem )
 800ec94:	3c01      	subs	r4, #1
 800ec96:	2c03      	cmp	r4, #3
 800ec98:	d803      	bhi.n	800eca2 <RadioSetModem+0x1a>
 800ec9a:	e8df f004 	tbb	[pc, r4]
 800ec9e:	1509      	.short	0x1509
 800eca0:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800eca2:	2000      	movs	r0, #0
 800eca4:	f000 fffe 	bl	800fca4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800eca8:	4b12      	ldr	r3, [pc, #72]	; (800ecf4 <RadioSetModem+0x6c>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	735a      	strb	r2, [r3, #13]
        break;
 800ecae:	e011      	b.n	800ecd4 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800ecb0:	2001      	movs	r0, #1
 800ecb2:	f000 fff7 	bl	800fca4 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800ecb6:	4b0f      	ldr	r3, [pc, #60]	; (800ecf4 <RadioSetModem+0x6c>)
 800ecb8:	7b5a      	ldrb	r2, [r3, #13]
 800ecba:	7b18      	ldrb	r0, [r3, #12]
 800ecbc:	4282      	cmp	r2, r0
 800ecbe:	d009      	beq.n	800ecd4 <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800ecc0:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800ecc2:	f000 fa81 	bl	800f1c8 <RadioSetPublicNetwork>
 800ecc6:	e005      	b.n	800ecd4 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ecc8:	2002      	movs	r0, #2
 800ecca:	f000 ffeb 	bl	800fca4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ecce:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <RadioSetModem+0x6c>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	735a      	strb	r2, [r3, #13]
}
 800ecd4:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ecd6:	2002      	movs	r0, #2
 800ecd8:	f000 ffe4 	bl	800fca4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ecdc:	4b05      	ldr	r3, [pc, #20]	; (800ecf4 <RadioSetModem+0x6c>)
 800ecde:	2200      	movs	r2, #0
 800ece0:	735a      	strb	r2, [r3, #13]
        break;
 800ece2:	e7f7      	b.n	800ecd4 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ece4:	2000      	movs	r0, #0
 800ece6:	f000 ffdd 	bl	800fca4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ecea:	4b02      	ldr	r3, [pc, #8]	; (800ecf4 <RadioSetModem+0x6c>)
 800ecec:	2200      	movs	r2, #0
 800ecee:	735a      	strb	r2, [r3, #13]
}
 800ecf0:	e7f0      	b.n	800ecd4 <RadioSetModem+0x4c>
 800ecf2:	bf00      	nop
 800ecf4:	20001308 	.word	0x20001308

0800ecf8 <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800ecf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfc:	b086      	sub	sp, #24
 800ecfe:	4605      	mov	r5, r0
 800ed00:	460c      	mov	r4, r1
 800ed02:	4617      	mov	r7, r2
 800ed04:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800ed06:	2300      	movs	r3, #0
 800ed08:	9304      	str	r3, [sp, #16]
 800ed0a:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ed0c:	f001 fb9b 	bl	8010446 <RFW_DeInit>
    switch( modem )
 800ed10:	2d01      	cmp	r5, #1
 800ed12:	f000 8087 	beq.w	800ee24 <RadioSetTxGenericConfig+0x12c>
 800ed16:	2d02      	cmp	r5, #2
 800ed18:	f000 80ef 	beq.w	800eefa <RadioSetTxGenericConfig+0x202>
 800ed1c:	b165      	cbz	r5, 800ed38 <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800ed1e:	4638      	mov	r0, r7
 800ed20:	f001 fabe 	bl	80102a0 <SUBGRF_SetRfTxPower>
 800ed24:	4c85      	ldr	r4, [pc, #532]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800ed26:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800ed2a:	f001 fb91 	bl	8010450 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800ed2e:	6066      	str	r6, [r4, #4]
    return 0;
 800ed30:	2000      	movs	r0, #0
}
 800ed32:	b006      	add	sp, #24
 800ed34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ed38:	68a3      	ldr	r3, [r4, #8]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f000 80f2 	beq.w	800ef24 <RadioSetTxGenericConfig+0x22c>
 800ed40:	6923      	ldr	r3, [r4, #16]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f000 80f1 	beq.w	800ef2a <RadioSetTxGenericConfig+0x232>
        if( config->fsk.SyncWordLength > 8 )
 800ed48:	7d20      	ldrb	r0, [r4, #20]
 800ed4a:	2808      	cmp	r0, #8
 800ed4c:	f200 80f0 	bhi.w	800ef30 <RadioSetTxGenericConfig+0x238>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ed50:	2100      	movs	r1, #0
 800ed52:	e007      	b.n	800ed64 <RadioSetTxGenericConfig+0x6c>
                syncword[i] = config->fsk.SyncWord[i];
 800ed54:	69a3      	ldr	r3, [r4, #24]
 800ed56:	5c5a      	ldrb	r2, [r3, r1]
 800ed58:	f101 0318 	add.w	r3, r1, #24
 800ed5c:	446b      	add	r3, sp
 800ed5e:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ed62:	3101      	adds	r1, #1
 800ed64:	4288      	cmp	r0, r1
 800ed66:	dcf5      	bgt.n	800ed54 <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ed68:	4d74      	ldr	r5, [pc, #464]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800ed6a:	f04f 0800 	mov.w	r8, #0
 800ed6e:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800ed72:	68a3      	ldr	r3, [r4, #8]
 800ed74:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800ed76:	7823      	ldrb	r3, [r4, #0]
 800ed78:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800ed7c:	6860      	ldr	r0, [r4, #4]
 800ed7e:	f001 fafd 	bl	801037c <SUBGRF_GetFskBandwidthRegValue>
 800ed82:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800ed86:	68e3      	ldr	r3, [r4, #12]
 800ed88:	642b      	str	r3, [r5, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ed8a:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800ed8e:	6923      	ldr	r3, [r4, #16]
 800ed90:	00db      	lsls	r3, r3, #3
 800ed92:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800ed94:	2304      	movs	r3, #4
 800ed96:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800ed98:	7d23      	ldrb	r3, [r4, #20]
 800ed9a:	00db      	lsls	r3, r3, #3
 800ed9c:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800ed9e:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800eda2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800eda6:	2b02      	cmp	r3, #2
 800eda8:	d008      	beq.n	800edbc <RadioSetTxGenericConfig+0xc4>
 800edaa:	7fa2      	ldrb	r2, [r4, #30]
 800edac:	2a02      	cmp	r2, #2
 800edae:	d005      	beq.n	800edbc <RadioSetTxGenericConfig+0xc4>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800edb0:	7fe0      	ldrb	r0, [r4, #31]
 800edb2:	4962      	ldr	r1, [pc, #392]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800edb4:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800edb6:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800edb8:	754a      	strb	r2, [r1, #21]
 800edba:	e018      	b.n	800edee <RadioSetTxGenericConfig+0xf6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800edbc:	7fe2      	ldrb	r2, [r4, #31]
 800edbe:	f102 030f 	add.w	r3, r2, #15
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d901      	bls.n	800edcc <RadioSetTxGenericConfig+0xd4>
 800edc8:	2a01      	cmp	r2, #1
 800edca:	d128      	bne.n	800ee1e <RadioSetTxGenericConfig+0x126>
            ConfigGeneric.rtx = CONFIG_TX;
 800edcc:	2301      	movs	r3, #1
 800edce:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800edd2:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800edd4:	4a5a      	ldr	r2, [pc, #360]	; (800ef40 <RadioSetTxGenericConfig+0x248>)
 800edd6:	4b5b      	ldr	r3, [pc, #364]	; (800ef44 <RadioSetTxGenericConfig+0x24c>)
 800edd8:	6819      	ldr	r1, [r3, #0]
 800edda:	a801      	add	r0, sp, #4
 800eddc:	f001 fb30 	bl	8010440 <RFW_Init>
 800ede0:	b9e8      	cbnz	r0, 800ee1e <RadioSetTxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800ede2:	4b56      	ldr	r3, [pc, #344]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800ede4:	2200      	movs	r2, #0
 800ede6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800ede8:	2101      	movs	r1, #1
 800edea:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800edec:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800edee:	f7ff fc87 	bl	800e700 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800edf2:	2000      	movs	r0, #0
 800edf4:	f7ff ff48 	bl	800ec88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800edf8:	4d50      	ldr	r5, [pc, #320]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800edfa:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800edfe:	f000 ff6b 	bl	800fcd8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ee02:	f105 000e 	add.w	r0, r5, #14
 800ee06:	f001 f935 	bl	8010074 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800ee0a:	a804      	add	r0, sp, #16
 800ee0c:	f001 f900 	bl	8010010 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800ee10:	8ba0      	ldrh	r0, [r4, #28]
 800ee12:	f001 f863 	bl	800fedc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800ee16:	8c20      	ldrh	r0, [r4, #32]
 800ee18:	f001 f917 	bl	801004a <SUBGRF_SetCrcPolynomial>
        break;
 800ee1c:	e77f      	b.n	800ed1e <RadioSetTxGenericConfig+0x26>
                return -1;
 800ee1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee22:	e786      	b.n	800ed32 <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ee24:	4b45      	ldr	r3, [pc, #276]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800ee26:	2201      	movs	r2, #1
 800ee28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800ee2c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800ee30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800ee34:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800ee38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800ee3c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800ee40:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800ee44:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d036      	beq.n	800eeba <RadioSetTxGenericConfig+0x1c2>
 800ee4c:	2b02      	cmp	r3, #2
 800ee4e:	d039      	beq.n	800eec4 <RadioSetTxGenericConfig+0x1cc>
 800ee50:	b373      	cbz	r3, 800eeb0 <RadioSetTxGenericConfig+0x1b8>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ee52:	4d3a      	ldr	r5, [pc, #232]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800ee54:	f04f 0801 	mov.w	r8, #1
 800ee58:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800ee5c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800ee5e:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800ee60:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800ee64:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800ee66:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ee6a:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800ee6e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ee72:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 800ee76:	f7ff fc43 	bl	800e700 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800ee7a:	4640      	mov	r0, r8
 800ee7c:	f7ff ff04 	bl	800ec88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ee80:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800ee84:	f000 ff28 	bl	800fcd8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ee88:	f105 000e 	add.w	r0, r5, #14
 800ee8c:	f001 f8f2 	bl	8010074 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800ee90:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 800ee94:	2b06      	cmp	r3, #6
 800ee96:	d025      	beq.n	800eee4 <RadioSetTxGenericConfig+0x1ec>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800ee98:	f640 0089 	movw	r0, #2185	; 0x889
 800ee9c:	f000 ffa4 	bl	800fde8 <SUBGRF_ReadRegister>
 800eea0:	f040 0104 	orr.w	r1, r0, #4
 800eea4:	b2c9      	uxtb	r1, r1
 800eea6:	f640 0089 	movw	r0, #2185	; 0x889
 800eeaa:	f000 feab 	bl	800fc04 <SUBGRF_WriteRegister>
 800eeae:	e736      	b.n	800ed1e <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800eeb0:	4b22      	ldr	r3, [pc, #136]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800eeb8:	e7cb      	b.n	800ee52 <RadioSetTxGenericConfig+0x15a>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800eeba:	4b20      	ldr	r3, [pc, #128]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800eebc:	2201      	movs	r2, #1
 800eebe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800eec2:	e7c6      	b.n	800ee52 <RadioSetTxGenericConfig+0x15a>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800eec4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800eec8:	3b0b      	subs	r3, #11
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d904      	bls.n	800eeda <RadioSetTxGenericConfig+0x1e2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800eed0:	4b1a      	ldr	r3, [pc, #104]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800eed2:	2200      	movs	r2, #0
 800eed4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800eed8:	e7bb      	b.n	800ee52 <RadioSetTxGenericConfig+0x15a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800eeda:	4b18      	ldr	r3, [pc, #96]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800eedc:	2201      	movs	r2, #1
 800eede:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800eee2:	e7b6      	b.n	800ee52 <RadioSetTxGenericConfig+0x15a>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800eee4:	f640 0089 	movw	r0, #2185	; 0x889
 800eee8:	f000 ff7e 	bl	800fde8 <SUBGRF_ReadRegister>
 800eeec:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800eef0:	f640 0089 	movw	r0, #2185	; 0x889
 800eef4:	f000 fe86 	bl	800fc04 <SUBGRF_WriteRegister>
 800eef8:	e711      	b.n	800ed1e <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800eefa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eefc:	3b01      	subs	r3, #1
 800eefe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef02:	d218      	bcs.n	800ef36 <RadioSetTxGenericConfig+0x23e>
        RadioSetModem( MODEM_BPSK );
 800ef04:	2002      	movs	r0, #2
 800ef06:	f7ff febf 	bl	800ec88 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800ef0a:	480c      	ldr	r0, [pc, #48]	; (800ef3c <RadioSetTxGenericConfig+0x244>)
 800ef0c:	2302      	movs	r3, #2
 800ef0e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800ef12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef14:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800ef16:	2316      	movs	r3, #22
 800ef18:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ef1c:	3038      	adds	r0, #56	; 0x38
 800ef1e:	f000 fedb 	bl	800fcd8 <SUBGRF_SetModulationParams>
        break;
 800ef22:	e6fc      	b.n	800ed1e <RadioSetTxGenericConfig+0x26>
            return -1;
 800ef24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef28:	e703      	b.n	800ed32 <RadioSetTxGenericConfig+0x3a>
 800ef2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef2e:	e700      	b.n	800ed32 <RadioSetTxGenericConfig+0x3a>
            return -1;
 800ef30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef34:	e6fd      	b.n	800ed32 <RadioSetTxGenericConfig+0x3a>
            return -1;
 800ef36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef3a:	e6fa      	b.n	800ed32 <RadioSetTxGenericConfig+0x3a>
 800ef3c:	20001308 	.word	0x20001308
 800ef40:	20001360 	.word	0x20001360
 800ef44:	200012ec 	.word	0x200012ec

0800ef48 <RadioSetRxGenericConfig>:
{
 800ef48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef4a:	b087      	sub	sp, #28
 800ef4c:	4607      	mov	r7, r0
 800ef4e:	460c      	mov	r4, r1
 800ef50:	4615      	mov	r5, r2
 800ef52:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800ef54:	2300      	movs	r3, #0
 800ef56:	9304      	str	r3, [sp, #16]
 800ef58:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ef5a:	f001 fa74 	bl	8010446 <RFW_DeInit>
    if( rxContinuous != 0 )
 800ef5e:	b105      	cbz	r5, 800ef62 <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 800ef60:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800ef62:	3d00      	subs	r5, #0
 800ef64:	bf18      	it	ne
 800ef66:	2501      	movne	r5, #1
 800ef68:	4b94      	ldr	r3, [pc, #592]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800ef6a:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800ef6c:	b12f      	cbz	r7, 800ef7a <RadioSetRxGenericConfig+0x32>
 800ef6e:	2f01      	cmp	r7, #1
 800ef70:	f000 8095 	beq.w	800f09e <RadioSetRxGenericConfig+0x156>
 800ef74:	2000      	movs	r0, #0
}
 800ef76:	b007      	add	sp, #28
 800ef78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ef7a:	68e3      	ldr	r3, [r4, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f000 8111 	beq.w	800f1a4 <RadioSetRxGenericConfig+0x25c>
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f000 8110 	beq.w	800f1aa <RadioSetRxGenericConfig+0x262>
        if( config->fsk.SyncWordLength > 8 )
 800ef8a:	7d63      	ldrb	r3, [r4, #21]
 800ef8c:	2b08      	cmp	r3, #8
 800ef8e:	f200 810f 	bhi.w	800f1b0 <RadioSetRxGenericConfig+0x268>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ef92:	2200      	movs	r2, #0
 800ef94:	e007      	b.n	800efa6 <RadioSetRxGenericConfig+0x5e>
                syncword[i] = config->fsk.SyncWord[i];
 800ef96:	69a1      	ldr	r1, [r4, #24]
 800ef98:	5c88      	ldrb	r0, [r1, r2]
 800ef9a:	f102 0118 	add.w	r1, r2, #24
 800ef9e:	4469      	add	r1, sp
 800efa0:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800efa4:	3201      	adds	r2, #1
 800efa6:	4293      	cmp	r3, r2
 800efa8:	dcf5      	bgt.n	800ef96 <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800efaa:	6820      	ldr	r0, [r4, #0]
 800efac:	3800      	subs	r0, #0
 800efae:	bf18      	it	ne
 800efb0:	2001      	movne	r0, #1
 800efb2:	f000 fcc7 	bl	800f944 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800efb6:	4d81      	ldr	r5, [pc, #516]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800efb8:	2700      	movs	r7, #0
 800efba:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800efbe:	68e3      	ldr	r3, [r4, #12]
 800efc0:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800efc2:	7923      	ldrb	r3, [r4, #4]
 800efc4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800efc8:	68a0      	ldr	r0, [r4, #8]
 800efca:	f001 f9d7 	bl	801037c <SUBGRF_GetFskBandwidthRegValue>
 800efce:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800efd2:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800efd4:	6923      	ldr	r3, [r4, #16]
 800efd6:	00db      	lsls	r3, r3, #3
 800efd8:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800efda:	7d23      	ldrb	r3, [r4, #20]
 800efdc:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800efde:	7d63      	ldrb	r3, [r4, #21]
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800efe4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800efe8:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800efea:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800efee:	b973      	cbnz	r3, 800f00e <RadioSetRxGenericConfig+0xc6>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800eff0:	69e1      	ldr	r1, [r4, #28]
 800eff2:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800eff4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800eff8:	2a02      	cmp	r2, #2
 800effa:	d012      	beq.n	800f022 <RadioSetRxGenericConfig+0xda>
 800effc:	2b02      	cmp	r3, #2
 800effe:	d010      	beq.n	800f022 <RadioSetRxGenericConfig+0xda>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800f000:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800f004:	496d      	ldr	r1, [pc, #436]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f006:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800f008:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800f00a:	754b      	strb	r3, [r1, #21]
 800f00c:	e023      	b.n	800f056 <RadioSetRxGenericConfig+0x10e>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800f00e:	2b02      	cmp	r3, #2
 800f010:	d003      	beq.n	800f01a <RadioSetRxGenericConfig+0xd2>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800f012:	4a6a      	ldr	r2, [pc, #424]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f014:	21ff      	movs	r1, #255	; 0xff
 800f016:	7591      	strb	r1, [r2, #22]
 800f018:	e7ec      	b.n	800eff4 <RadioSetRxGenericConfig+0xac>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800f01a:	4a68      	ldr	r2, [pc, #416]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f01c:	21ff      	movs	r1, #255	; 0xff
 800f01e:	7591      	strb	r1, [r2, #22]
 800f020:	e7e8      	b.n	800eff4 <RadioSetRxGenericConfig+0xac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800f022:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800f026:	f102 030f 	add.w	r3, r2, #15
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d901      	bls.n	800f034 <RadioSetRxGenericConfig+0xec>
 800f030:	2a01      	cmp	r2, #1
 800f032:	d131      	bne.n	800f098 <RadioSetRxGenericConfig+0x150>
          ConfigGeneric.rtx = CONFIG_RX;
 800f034:	2300      	movs	r3, #0
 800f036:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 800f03a:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800f03c:	4a60      	ldr	r2, [pc, #384]	; (800f1c0 <RadioSetRxGenericConfig+0x278>)
 800f03e:	4b61      	ldr	r3, [pc, #388]	; (800f1c4 <RadioSetRxGenericConfig+0x27c>)
 800f040:	6819      	ldr	r1, [r3, #0]
 800f042:	a801      	add	r0, sp, #4
 800f044:	f001 f9fc 	bl	8010440 <RFW_Init>
 800f048:	bb30      	cbnz	r0, 800f098 <RadioSetRxGenericConfig+0x150>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800f04a:	4b5c      	ldr	r3, [pc, #368]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800f050:	2101      	movs	r1, #1
 800f052:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800f054:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800f056:	f7ff fb53 	bl	800e700 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800f05a:	2000      	movs	r0, #0
 800f05c:	f7ff fe14 	bl	800ec88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f060:	4d56      	ldr	r5, [pc, #344]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f062:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800f066:	f000 fe37 	bl	800fcd8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f06a:	f105 000e 	add.w	r0, r5, #14
 800f06e:	f001 f801 	bl	8010074 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800f072:	a804      	add	r0, sp, #16
 800f074:	f000 ffcc 	bl	8010010 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800f078:	8c20      	ldrh	r0, [r4, #32]
 800f07a:	f000 ff2f 	bl	800fedc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800f07e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 800f080:	f000 ffe3 	bl	801004a <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800f084:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f088:	fb06 f303 	mul.w	r3, r6, r3
 800f08c:	68e2      	ldr	r2, [r4, #12]
 800f08e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f092:	60ab      	str	r3, [r5, #8]
    return status;
 800f094:	2000      	movs	r0, #0
        break;
 800f096:	e76e      	b.n	800ef76 <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f09c:	e76b      	b.n	800ef76 <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 800f09e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 8088 	beq.w	800f1b6 <RadioSetRxGenericConfig+0x26e>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800f0a6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d053      	beq.n	800f156 <RadioSetRxGenericConfig+0x20e>
            MaxPayloadLength = 0xFF;
 800f0ae:	27ff      	movs	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800f0b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f0b2:	3800      	subs	r0, #0
 800f0b4:	bf18      	it	ne
 800f0b6:	2001      	movne	r0, #1
 800f0b8:	f000 fc44 	bl	800f944 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f0bc:	b2f0      	uxtb	r0, r6
 800f0be:	f000 fdcf 	bl	800fc60 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f0c2:	4b3e      	ldr	r3, [pc, #248]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800f0ca:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800f0ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800f0d2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800f0d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800f0da:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800f0de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800f0e2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d03c      	beq.n	800f164 <RadioSetRxGenericConfig+0x21c>
 800f0ea:	2b02      	cmp	r3, #2
 800f0ec:	d03f      	beq.n	800f16e <RadioSetRxGenericConfig+0x226>
 800f0ee:	b3a3      	cbz	r3, 800f15a <RadioSetRxGenericConfig+0x212>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f0f0:	4d32      	ldr	r5, [pc, #200]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f0f2:	2601      	movs	r6, #1
 800f0f4:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800f0f6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f0f8:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800f0fa:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800f0fe:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f100:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800f102:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f106:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800f10a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800f10e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 800f112:	f7ff faf5 	bl	800e700 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800f116:	4630      	mov	r0, r6
 800f118:	f7ff fdb6 	bl	800ec88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f11c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800f120:	f000 fdda 	bl	800fcd8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f124:	f105 000e 	add.w	r0, r5, #14
 800f128:	f000 ffa4 	bl	8010074 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f12c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800f130:	42b3      	cmp	r3, r6
 800f132:	d02c      	beq.n	800f18e <RadioSetRxGenericConfig+0x246>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800f134:	f240 7036 	movw	r0, #1846	; 0x736
 800f138:	f000 fe56 	bl	800fde8 <SUBGRF_ReadRegister>
 800f13c:	f040 0104 	orr.w	r1, r0, #4
 800f140:	b2c9      	uxtb	r1, r1
 800f142:	f240 7036 	movw	r0, #1846	; 0x736
 800f146:	f000 fd5d 	bl	800fc04 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800f14a:	4b1c      	ldr	r3, [pc, #112]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f14c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f150:	609a      	str	r2, [r3, #8]
    return status;
 800f152:	2000      	movs	r0, #0
        break;
 800f154:	e70f      	b.n	800ef76 <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800f156:	7f27      	ldrb	r7, [r4, #28]
 800f158:	e7aa      	b.n	800f0b0 <RadioSetRxGenericConfig+0x168>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f15a:	4b18      	ldr	r3, [pc, #96]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f15c:	2200      	movs	r2, #0
 800f15e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f162:	e7c5      	b.n	800f0f0 <RadioSetRxGenericConfig+0x1a8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f164:	4b15      	ldr	r3, [pc, #84]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f166:	2201      	movs	r2, #1
 800f168:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f16c:	e7c0      	b.n	800f0f0 <RadioSetRxGenericConfig+0x1a8>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800f16e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f172:	3b0b      	subs	r3, #11
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b01      	cmp	r3, #1
 800f178:	d904      	bls.n	800f184 <RadioSetRxGenericConfig+0x23c>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f17a:	4b10      	ldr	r3, [pc, #64]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f17c:	2200      	movs	r2, #0
 800f17e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f182:	e7b5      	b.n	800f0f0 <RadioSetRxGenericConfig+0x1a8>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f184:	4b0d      	ldr	r3, [pc, #52]	; (800f1bc <RadioSetRxGenericConfig+0x274>)
 800f186:	2201      	movs	r2, #1
 800f188:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f18c:	e7b0      	b.n	800f0f0 <RadioSetRxGenericConfig+0x1a8>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800f18e:	f240 7036 	movw	r0, #1846	; 0x736
 800f192:	f000 fe29 	bl	800fde8 <SUBGRF_ReadRegister>
 800f196:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800f19a:	f240 7036 	movw	r0, #1846	; 0x736
 800f19e:	f000 fd31 	bl	800fc04 <SUBGRF_WriteRegister>
 800f1a2:	e7d2      	b.n	800f14a <RadioSetRxGenericConfig+0x202>
            return -1;
 800f1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1a8:	e6e5      	b.n	800ef76 <RadioSetRxGenericConfig+0x2e>
 800f1aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1ae:	e6e2      	b.n	800ef76 <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1b4:	e6df      	b.n	800ef76 <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f1b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1ba:	e6dc      	b.n	800ef76 <RadioSetRxGenericConfig+0x2e>
 800f1bc:	20001308 	.word	0x20001308
 800f1c0:	200012f0 	.word	0x200012f0
 800f1c4:	200012ec 	.word	0x200012ec

0800f1c8 <RadioSetPublicNetwork>:
{
 800f1c8:	b510      	push	{r4, lr}
 800f1ca:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800f1cc:	4b0e      	ldr	r3, [pc, #56]	; (800f208 <RadioSetPublicNetwork+0x40>)
 800f1ce:	7318      	strb	r0, [r3, #12]
 800f1d0:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800f1d2:	2001      	movs	r0, #1
 800f1d4:	f7ff fd58 	bl	800ec88 <RadioSetModem>
    if( enable == true )
 800f1d8:	b154      	cbz	r4, 800f1f0 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800f1da:	2134      	movs	r1, #52	; 0x34
 800f1dc:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f1e0:	f000 fd10 	bl	800fc04 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800f1e4:	2144      	movs	r1, #68	; 0x44
 800f1e6:	f240 7041 	movw	r0, #1857	; 0x741
 800f1ea:	f000 fd0b 	bl	800fc04 <SUBGRF_WriteRegister>
}
 800f1ee:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800f1f0:	2114      	movs	r1, #20
 800f1f2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f1f6:	f000 fd05 	bl	800fc04 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f1fa:	2124      	movs	r1, #36	; 0x24
 800f1fc:	f240 7041 	movw	r0, #1857	; 0x741
 800f200:	f000 fd00 	bl	800fc04 <SUBGRF_WriteRegister>
}
 800f204:	e7f3      	b.n	800f1ee <RadioSetPublicNetwork+0x26>
 800f206:	bf00      	nop
 800f208:	20001308 	.word	0x20001308

0800f20c <RadioSetTxConfig>:
{
 800f20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f210:	b083      	sub	sp, #12
 800f212:	4604      	mov	r4, r0
 800f214:	460d      	mov	r5, r1
 800f216:	4691      	mov	r9, r2
 800f218:	461f      	mov	r7, r3
 800f21a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800f21e:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800f222:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f226:	f001 f90e 	bl	8010446 <RFW_DeInit>
    switch( modem )
 800f22a:	2c01      	cmp	r4, #1
 800f22c:	d05a      	beq.n	800f2e4 <RadioSetTxConfig+0xd8>
 800f22e:	2c03      	cmp	r4, #3
 800f230:	f000 80ab 	beq.w	800f38a <RadioSetTxConfig+0x17e>
 800f234:	b164      	cbz	r4, 800f250 <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f236:	4628      	mov	r0, r5
 800f238:	f001 f832 	bl	80102a0 <SUBGRF_SetRfTxPower>
 800f23c:	4c5b      	ldr	r4, [pc, #364]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f23e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800f242:	f001 f905 	bl	8010450 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f246:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f248:	6063      	str	r3, [r4, #4]
}
 800f24a:	b003      	add	sp, #12
 800f24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f250:	4c56      	ldr	r4, [pc, #344]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f252:	f04f 0b00 	mov.w	fp, #0
 800f256:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f25a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f25c:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f25e:	230b      	movs	r3, #11
 800f260:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f264:	4638      	mov	r0, r7
 800f266:	f001 f889 	bl	801037c <SUBGRF_GetFskBandwidthRegValue>
 800f26a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800f26e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f272:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f276:	00f6      	lsls	r6, r6, #3
 800f278:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f27a:	2304      	movs	r3, #4
 800f27c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800f27e:	2318      	movs	r3, #24
 800f280:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f282:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f286:	f088 0801 	eor.w	r8, r8, #1
 800f28a:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 800f28e:	f1ba 0f00 	cmp.w	sl, #0
 800f292:	d023      	beq.n	800f2dc <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f294:	22f2      	movs	r2, #242	; 0xf2
 800f296:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f298:	4c44      	ldr	r4, [pc, #272]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f29a:	2301      	movs	r3, #1
 800f29c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f29e:	f7ff fa2f 	bl	800e700 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f2a2:	4626      	mov	r6, r4
 800f2a4:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f2a8:	3800      	subs	r0, #0
 800f2aa:	bf18      	it	ne
 800f2ac:	2001      	movne	r0, #1
 800f2ae:	f7ff fceb 	bl	800ec88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f000 fd10 	bl	800fcd8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f2b8:	f104 000e 	add.w	r0, r4, #14
 800f2bc:	f000 feda 	bl	8010074 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f2c0:	4a3b      	ldr	r2, [pc, #236]	; (800f3b0 <RadioSetTxConfig+0x1a4>)
 800f2c2:	466b      	mov	r3, sp
 800f2c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2c8:	e883 0003 	stmia.w	r3, {r0, r1}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f000 fe9f 	bl	8010010 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f2d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f2d6:	f000 fe01 	bl	800fedc <SUBGRF_SetWhiteningSeed>
            break;
 800f2da:	e7ac      	b.n	800f236 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f2dc:	4b33      	ldr	r3, [pc, #204]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f2de:	2201      	movs	r2, #1
 800f2e0:	75da      	strb	r2, [r3, #23]
 800f2e2:	e7d9      	b.n	800f298 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f2e4:	4a31      	ldr	r2, [pc, #196]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800f2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800f2f4:	492f      	ldr	r1, [pc, #188]	; (800f3b4 <RadioSetTxConfig+0x1a8>)
 800f2f6:	5dc9      	ldrb	r1, [r1, r7]
 800f2f8:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800f2fc:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 800f300:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f304:	b91f      	cbnz	r7, 800f30e <RadioSetTxConfig+0x102>
 800f306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f308:	3a0b      	subs	r2, #11
 800f30a:	2a01      	cmp	r2, #1
 800f30c:	d92f      	bls.n	800f36e <RadioSetTxConfig+0x162>
 800f30e:	2f01      	cmp	r7, #1
 800f310:	d02a      	beq.n	800f368 <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f312:	4a26      	ldr	r2, [pc, #152]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f314:	2100      	movs	r1, #0
 800f316:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f31a:	4a24      	ldr	r2, [pc, #144]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f31c:	2101      	movs	r1, #1
 800f31e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f320:	3b05      	subs	r3, #5
 800f322:	b2db      	uxtb	r3, r3
 800f324:	428b      	cmp	r3, r1
 800f326:	d927      	bls.n	800f378 <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f328:	4b20      	ldr	r3, [pc, #128]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f32a:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f32c:	4c1f      	ldr	r4, [pc, #124]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f32e:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f332:	4b21      	ldr	r3, [pc, #132]	; (800f3b8 <RadioSetTxConfig+0x1ac>)
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f338:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f33c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800f340:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f344:	f7ff f9dc 	bl	800e700 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f348:	4626      	mov	r6, r4
 800f34a:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f34e:	3800      	subs	r0, #0
 800f350:	bf18      	it	ne
 800f352:	2001      	movne	r0, #1
 800f354:	f7ff fc98 	bl	800ec88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f358:	4630      	mov	r0, r6
 800f35a:	f000 fcbd 	bl	800fcd8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f35e:	f104 000e 	add.w	r0, r4, #14
 800f362:	f000 fe87 	bl	8010074 <SUBGRF_SetPacketParams>
            break;
 800f366:	e766      	b.n	800f236 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f36a:	2a0c      	cmp	r2, #12
 800f36c:	d1d1      	bne.n	800f312 <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f36e:	4a0f      	ldr	r2, [pc, #60]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f370:	2101      	movs	r1, #1
 800f372:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f376:	e7d0      	b.n	800f31a <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 800f378:	2e0b      	cmp	r6, #11
 800f37a:	d803      	bhi.n	800f384 <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f37c:	4613      	mov	r3, r2
 800f37e:	220c      	movs	r2, #12
 800f380:	839a      	strh	r2, [r3, #28]
 800f382:	e7d3      	b.n	800f32c <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f384:	4b09      	ldr	r3, [pc, #36]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f386:	839e      	strh	r6, [r3, #28]
 800f388:	e7d0      	b.n	800f32c <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 800f38a:	2003      	movs	r0, #3
 800f38c:	f7ff fc7c 	bl	800ec88 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800f390:	4806      	ldr	r0, [pc, #24]	; (800f3ac <RadioSetTxConfig+0x1a0>)
 800f392:	2302      	movs	r3, #2
 800f394:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800f398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f39a:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800f39c:	2316      	movs	r3, #22
 800f39e:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f3a2:	3038      	adds	r0, #56	; 0x38
 800f3a4:	f000 fc98 	bl	800fcd8 <SUBGRF_SetModulationParams>
            break;
 800f3a8:	e745      	b.n	800f236 <RadioSetTxConfig+0x2a>
 800f3aa:	bf00      	nop
 800f3ac:	20001308 	.word	0x20001308
 800f3b0:	08011330 	.word	0x08011330
 800f3b4:	08011ea0 	.word	0x08011ea0
 800f3b8:	200000d0 	.word	0x200000d0

0800f3bc <RadioSetRxConfig>:
{
 800f3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c0:	b087      	sub	sp, #28
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	460e      	mov	r6, r1
 800f3c6:	4615      	mov	r5, r2
 800f3c8:	9301      	str	r3, [sp, #4]
 800f3ca:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 800f3ce:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 800f3d2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800f3d6:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 800f3da:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 800f3de:	4baf      	ldr	r3, [pc, #700]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f3e0:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f3e4:	f001 f82f 	bl	8010446 <RFW_DeInit>
    if( rxContinuous == true )
 800f3e8:	f1b8 0f00 	cmp.w	r8, #0
 800f3ec:	d001      	beq.n	800f3f2 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800f3ee:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800f3f2:	b16f      	cbz	r7, 800f410 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 800f3f4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800f3f8:	4ba9      	ldr	r3, [pc, #676]	; (800f6a0 <RadioSetRxConfig+0x2e4>)
 800f3fa:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800f3fc:	2c01      	cmp	r4, #1
 800f3fe:	f000 80d6 	beq.w	800f5ae <RadioSetRxConfig+0x1f2>
 800f402:	2c04      	cmp	r4, #4
 800f404:	d008      	beq.n	800f418 <RadioSetRxConfig+0x5c>
 800f406:	2c00      	cmp	r4, #0
 800f408:	d07c      	beq.n	800f504 <RadioSetRxConfig+0x148>
}
 800f40a:	b007      	add	sp, #28
 800f40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800f410:	4ba3      	ldr	r3, [pc, #652]	; (800f6a0 <RadioSetRxConfig+0x2e4>)
 800f412:	22ff      	movs	r2, #255	; 0xff
 800f414:	701a      	strb	r2, [r3, #0]
 800f416:	e7f1      	b.n	800f3fc <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800f418:	2001      	movs	r0, #1
 800f41a:	f000 fa93 	bl	800f944 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f41e:	4c9f      	ldr	r4, [pc, #636]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f420:	2700      	movs	r7, #0
 800f422:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f426:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800f428:	2309      	movs	r3, #9
 800f42a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800f42e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f432:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f434:	4630      	mov	r0, r6
 800f436:	f000 ffa1 	bl	801037c <SUBGRF_GetFskBandwidthRegValue>
 800f43a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f43e:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f440:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f444:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800f448:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800f44a:	2310      	movs	r3, #16
 800f44c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f44e:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800f450:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f452:	4b93      	ldr	r3, [pc, #588]	; (800f6a0 <RadioSetRxConfig+0x2e4>)
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f458:	2301      	movs	r3, #1
 800f45a:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800f45c:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800f45e:	2004      	movs	r0, #4
 800f460:	f7ff fc12 	bl	800ec88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f464:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f468:	f000 fc36 	bl	800fcd8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f46c:	f104 000e 	add.w	r0, r4, #14
 800f470:	f000 fe00 	bl	8010074 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f474:	ab02      	add	r3, sp, #8
 800f476:	4a8b      	ldr	r2, [pc, #556]	; (800f6a4 <RadioSetRxConfig+0x2e8>)
 800f478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f47c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f480:	4618      	mov	r0, r3
 800f482:	f000 fdc5 	bl	8010010 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f486:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f48a:	f000 fd27 	bl	800fedc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800f48e:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800f492:	f7ff f8cb 	bl	800e62c <RadioRead>
            RadioWrite(0x8b8, modReg);
 800f496:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 800f49a:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800f49e:	f7ff f8c9 	bl	800e634 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800f4a2:	2104      	movs	r1, #4
 800f4a4:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800f4a8:	f7ff f8c4 	bl	800e634 <RadioWrite>
            modReg= RadioRead(0x89b);
 800f4ac:	f640 009b 	movw	r0, #2203	; 0x89b
 800f4b0:	f7ff f8bc 	bl	800e62c <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800f4b4:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800f4b8:	f041 0108 	orr.w	r1, r1, #8
 800f4bc:	f640 009b 	movw	r0, #2203	; 0x89b
 800f4c0:	f7ff f8b8 	bl	800e634 <RadioWrite>
            modReg= RadioRead(0x6d1);
 800f4c4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800f4c8:	f7ff f8b0 	bl	800e62c <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800f4cc:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800f4d0:	f041 0118 	orr.w	r1, r1, #24
 800f4d4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800f4d8:	f7ff f8ac 	bl	800e634 <RadioWrite>
            modReg= RadioRead(0x6ac);
 800f4dc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800f4e0:	f7ff f8a4 	bl	800e62c <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800f4e4:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800f4e8:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 800f4ec:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800f4f0:	f7ff f8a0 	bl	800e634 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f4f4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f4f8:	fb03 f30a 	mul.w	r3, r3, sl
 800f4fc:	fbb3 f3f5 	udiv	r3, r3, r5
 800f500:	60a3      	str	r3, [r4, #8]
            break;
 800f502:	e782      	b.n	800f40a <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f504:	2000      	movs	r0, #0
 800f506:	f000 fa1d 	bl	800f944 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f50a:	4c64      	ldr	r4, [pc, #400]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f50c:	f04f 0800 	mov.w	r8, #0
 800f510:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f514:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f516:	230b      	movs	r3, #11
 800f518:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f51c:	4630      	mov	r0, r6
 800f51e:	f000 ff2d 	bl	801037c <SUBGRF_GetFskBandwidthRegValue>
 800f522:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f526:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f52a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f52e:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f532:	2304      	movs	r3, #4
 800f534:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800f536:	2318      	movs	r3, #24
 800f538:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f53a:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f53e:	f087 0701 	eor.w	r7, r7, #1
 800f542:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f544:	4b56      	ldr	r3, [pc, #344]	; (800f6a0 <RadioSetRxConfig+0x2e4>)
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800f54a:	f1bb 0f00 	cmp.w	fp, #0
 800f54e:	d02a      	beq.n	800f5a6 <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f550:	22f2      	movs	r2, #242	; 0xf2
 800f552:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f554:	4c51      	ldr	r4, [pc, #324]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f556:	2301      	movs	r3, #1
 800f558:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f55a:	f7ff f8d1 	bl	800e700 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f55e:	4626      	mov	r6, r4
 800f560:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f564:	3800      	subs	r0, #0
 800f566:	bf18      	it	ne
 800f568:	2001      	movne	r0, #1
 800f56a:	f7ff fb8d 	bl	800ec88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f56e:	4630      	mov	r0, r6
 800f570:	f000 fbb2 	bl	800fcd8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f574:	f104 000e 	add.w	r0, r4, #14
 800f578:	f000 fd7c 	bl	8010074 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f57c:	4a4a      	ldr	r2, [pc, #296]	; (800f6a8 <RadioSetRxConfig+0x2ec>)
 800f57e:	ab04      	add	r3, sp, #16
 800f580:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f584:	e883 0003 	stmia.w	r3, {r0, r1}
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 fd41 	bl	8010010 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f58e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f592:	f000 fca3 	bl	800fedc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f596:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f59a:	fb03 f30a 	mul.w	r3, r3, sl
 800f59e:	fbb3 f3f5 	udiv	r3, r3, r5
 800f5a2:	60a3      	str	r3, [r4, #8]
            break;
 800f5a4:	e731      	b.n	800f40a <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f5a6:	4b3d      	ldr	r3, [pc, #244]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	75da      	strb	r2, [r3, #23]
 800f5ac:	e7d2      	b.n	800f554 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f5ae:	2000      	movs	r0, #0
 800f5b0:	f000 f9c8 	bl	800f944 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f5b4:	4a39      	ldr	r2, [pc, #228]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800f5bc:	b2eb      	uxtb	r3, r5
 800f5be:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800f5c2:	493a      	ldr	r1, [pc, #232]	; (800f6ac <RadioSetRxConfig+0x2f0>)
 800f5c4:	5d89      	ldrb	r1, [r1, r6]
 800f5c6:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800f5ca:	9901      	ldr	r1, [sp, #4]
 800f5cc:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f5d0:	b91e      	cbnz	r6, 800f5da <RadioSetRxConfig+0x21e>
 800f5d2:	f1a5 020b 	sub.w	r2, r5, #11
 800f5d6:	2a01      	cmp	r2, #1
 800f5d8:	d945      	bls.n	800f666 <RadioSetRxConfig+0x2aa>
 800f5da:	2e01      	cmp	r6, #1
 800f5dc:	d041      	beq.n	800f662 <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f5de:	4a2f      	ldr	r2, [pc, #188]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f5e0:	2100      	movs	r1, #0
 800f5e2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f5e6:	4a2d      	ldr	r2, [pc, #180]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f5e8:	2101      	movs	r1, #1
 800f5ea:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f5ec:	3b05      	subs	r3, #5
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	428b      	cmp	r3, r1
 800f5f2:	d93d      	bls.n	800f670 <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f5f4:	4b29      	ldr	r3, [pc, #164]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f5f6:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f5fa:	4c28      	ldr	r4, [pc, #160]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f5fc:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f5fe:	4b28      	ldr	r3, [pc, #160]	; (800f6a0 <RadioSetRxConfig+0x2e4>)
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f604:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f608:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800f60c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f610:	f7ff f876 	bl	800e700 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f614:	4625      	mov	r5, r4
 800f616:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 800f61a:	3800      	subs	r0, #0
 800f61c:	bf18      	it	ne
 800f61e:	2001      	movne	r0, #1
 800f620:	f7ff fb32 	bl	800ec88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f624:	4628      	mov	r0, r5
 800f626:	f000 fb57 	bl	800fcd8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f62a:	f104 000e 	add.w	r0, r4, #14
 800f62e:	f000 fd21 	bl	8010074 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f632:	fa5f f08a 	uxtb.w	r0, sl
 800f636:	f000 fb13 	bl	800fc60 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f63a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d021      	beq.n	800f686 <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800f642:	f240 7036 	movw	r0, #1846	; 0x736
 800f646:	f000 fbcf 	bl	800fde8 <SUBGRF_ReadRegister>
 800f64a:	f040 0104 	orr.w	r1, r0, #4
 800f64e:	b2c9      	uxtb	r1, r1
 800f650:	f240 7036 	movw	r0, #1846	; 0x736
 800f654:	f000 fad6 	bl	800fc04 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800f658:	4b10      	ldr	r3, [pc, #64]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f65a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f65e:	609a      	str	r2, [r3, #8]
}
 800f660:	e6d3      	b.n	800f40a <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f662:	2d0c      	cmp	r5, #12
 800f664:	d1bb      	bne.n	800f5de <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f666:	4a0d      	ldr	r2, [pc, #52]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f668:	2101      	movs	r1, #1
 800f66a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f66e:	e7ba      	b.n	800f5e6 <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 800f670:	f1b9 0f0b 	cmp.w	r9, #11
 800f674:	d803      	bhi.n	800f67e <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f676:	4613      	mov	r3, r2
 800f678:	220c      	movs	r2, #12
 800f67a:	839a      	strh	r2, [r3, #28]
 800f67c:	e7bd      	b.n	800f5fa <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f67e:	4b07      	ldr	r3, [pc, #28]	; (800f69c <RadioSetRxConfig+0x2e0>)
 800f680:	f8a3 901c 	strh.w	r9, [r3, #28]
 800f684:	e7b9      	b.n	800f5fa <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800f686:	f240 7036 	movw	r0, #1846	; 0x736
 800f68a:	f000 fbad 	bl	800fde8 <SUBGRF_ReadRegister>
 800f68e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800f692:	f240 7036 	movw	r0, #1846	; 0x736
 800f696:	f000 fab5 	bl	800fc04 <SUBGRF_WriteRegister>
 800f69a:	e7dd      	b.n	800f658 <RadioSetRxConfig+0x29c>
 800f69c:	20001308 	.word	0x20001308
 800f6a0:	200000d0 	.word	0x200000d0
 800f6a4:	08011338 	.word	0x08011338
 800f6a8:	08011330 	.word	0x08011330
 800f6ac:	08011ea0 	.word	0x08011ea0

0800f6b0 <RadioRandom>:
{
 800f6b0:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 800f6b2:	2001      	movs	r0, #1
 800f6b4:	f7ff fae8 	bl	800ec88 <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	4619      	mov	r1, r3
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f000 f9dd 	bl	800fa7e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800f6c4:	f000 fd58 	bl	8010178 <SUBGRF_GetRandom>
}
 800f6c8:	bd08      	pop	{r3, pc}

0800f6ca <RadioIsChannelFree>:
{
 800f6ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6cc:	b08b      	sub	sp, #44	; 0x2c
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	460f      	mov	r7, r1
 800f6d2:	4616      	mov	r6, r2
 800f6d4:	461d      	mov	r5, r3
    RadioStandby( );
 800f6d6:	f7ff f813 	bl	800e700 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800f6da:	2000      	movs	r0, #0
 800f6dc:	f7ff fad4 	bl	800ec88 <RadioSetModem>
    RadioSetChannel( freq );
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	f7ff f9b5 	bl	800ea50 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f6ea:	2400      	movs	r4, #0
 800f6ec:	9408      	str	r4, [sp, #32]
 800f6ee:	9407      	str	r4, [sp, #28]
 800f6f0:	9406      	str	r4, [sp, #24]
 800f6f2:	9405      	str	r4, [sp, #20]
 800f6f4:	9404      	str	r4, [sp, #16]
 800f6f6:	9403      	str	r4, [sp, #12]
 800f6f8:	9402      	str	r4, [sp, #8]
 800f6fa:	2303      	movs	r3, #3
 800f6fc:	9301      	str	r3, [sp, #4]
 800f6fe:	9700      	str	r7, [sp, #0]
 800f700:	4623      	mov	r3, r4
 800f702:	f44f 7216 	mov.w	r2, #600	; 0x258
 800f706:	4639      	mov	r1, r7
 800f708:	4620      	mov	r0, r4
 800f70a:	f7ff fe57 	bl	800f3bc <RadioSetRxConfig>
    RadioRx( 0 );
 800f70e:	4620      	mov	r0, r4
 800f710:	f7ff f9b6 	bl	800ea80 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800f714:	f7ff f96e 	bl	800e9f4 <RadioGetWakeupTime>
 800f718:	f7f1 fef0 	bl	80014fc <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800f71c:	f001 fa7e 	bl	8010c1c <UTIL_TIMER_GetCurrentTime>
 800f720:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f722:	4620      	mov	r0, r4
 800f724:	f001 fa84 	bl	8010c30 <UTIL_TIMER_GetElapsedTime>
 800f728:	42a8      	cmp	r0, r5
 800f72a:	d206      	bcs.n	800f73a <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800f72c:	2000      	movs	r0, #0
 800f72e:	f7ff f96e 	bl	800ea0e <RadioRssi>
        if( rssi > rssiThresh )
 800f732:	42b0      	cmp	r0, r6
 800f734:	ddf5      	ble.n	800f722 <RadioIsChannelFree+0x58>
            status = false;
 800f736:	2400      	movs	r4, #0
 800f738:	e000      	b.n	800f73c <RadioIsChannelFree+0x72>
    bool status = true;
 800f73a:	2401      	movs	r4, #1
    RadioStandby( );
 800f73c:	f7fe ffe0 	bl	800e700 <RadioStandby>
}
 800f740:	4620      	mov	r0, r4
 800f742:	b00b      	add	sp, #44	; 0x2c
 800f744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f748 <RadioInit>:
{
 800f748:	b570      	push	{r4, r5, r6, lr}
 800f74a:	b082      	sub	sp, #8
    RadioEvents = events;
 800f74c:	4b1d      	ldr	r3, [pc, #116]	; (800f7c4 <RadioInit+0x7c>)
 800f74e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800f750:	4b1d      	ldr	r3, [pc, #116]	; (800f7c8 <RadioInit+0x80>)
 800f752:	2400      	movs	r4, #0
 800f754:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 800f756:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 800f758:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 800f75a:	481c      	ldr	r0, [pc, #112]	; (800f7cc <RadioInit+0x84>)
 800f75c:	f000 fb68 	bl	800fe30 <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 800f760:	4620      	mov	r0, r4
 800f762:	f7ff fd31 	bl	800f1c8 <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 800f766:	f000 f8fa 	bl	800f95e <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800f76a:	4621      	mov	r1, r4
 800f76c:	4620      	mov	r0, r4
 800f76e:	f000 f9f1 	bl	800fb54 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800f772:	2204      	movs	r2, #4
 800f774:	4621      	mov	r1, r4
 800f776:	2001      	movs	r0, #1
 800f778:	f000 fbc9 	bl	800ff0e <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f77c:	4623      	mov	r3, r4
 800f77e:	4622      	mov	r2, r4
 800f780:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f784:	4608      	mov	r0, r1
 800f786:	f000 f97a 	bl	800fa7e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800f78a:	f7ff f9ab 	bl	800eae4 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800f78e:	4e10      	ldr	r6, [pc, #64]	; (800f7d0 <RadioInit+0x88>)
 800f790:	9400      	str	r4, [sp, #0]
 800f792:	4b10      	ldr	r3, [pc, #64]	; (800f7d4 <RadioInit+0x8c>)
 800f794:	4622      	mov	r2, r4
 800f796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f79a:	4630      	mov	r0, r6
 800f79c:	f001 fa20 	bl	8010be0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800f7a0:	4d0d      	ldr	r5, [pc, #52]	; (800f7d8 <RadioInit+0x90>)
 800f7a2:	9400      	str	r4, [sp, #0]
 800f7a4:	4b0d      	ldr	r3, [pc, #52]	; (800f7dc <RadioInit+0x94>)
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	f001 fa17 	bl	8010be0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f001 fa72 	bl	8010c9c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	f001 fa6f 	bl	8010c9c <UTIL_TIMER_Stop>
}
 800f7be:	b002      	add	sp, #8
 800f7c0:	bd70      	pop	{r4, r5, r6, pc}
 800f7c2:	bf00      	nop
 800f7c4:	200012ec 	.word	0x200012ec
 800f7c8:	20001308 	.word	0x20001308
 800f7cc:	0800e9e1 	.word	0x0800e9e1
 800f7d0:	20001360 	.word	0x20001360
 800f7d4:	0800e525 	.word	0x0800e525
 800f7d8:	200012f0 	.word	0x200012f0
 800f7dc:	0800e541 	.word	0x0800e541

0800f7e0 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f7e0:	b510      	push	{r4, lr}
 800f7e2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7e4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f7e8:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f7ea:	460a      	mov	r2, r1
 800f7ec:	4601      	mov	r1, r0
 800f7ee:	4803      	ldr	r0, [pc, #12]	; (800f7fc <SUBGRF_WriteCommand+0x1c>)
 800f7f0:	f7f5 f976 	bl	8004ae0 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7f4:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f7f8:	bd10      	pop	{r4, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20000194 	.word	0x20000194

0800f800 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f800:	b510      	push	{r4, lr}
 800f802:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f804:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f808:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f80a:	460a      	mov	r2, r1
 800f80c:	4601      	mov	r1, r0
 800f80e:	4803      	ldr	r0, [pc, #12]	; (800f81c <SUBGRF_ReadCommand+0x1c>)
 800f810:	f7f5 f9bc 	bl	8004b8c <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f814:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f818:	bd10      	pop	{r4, pc}
 800f81a:	bf00      	nop
 800f81c:	20000194 	.word	0x20000194

0800f820 <SUBGRF_GetOperatingMode>:
}
 800f820:	4b01      	ldr	r3, [pc, #4]	; (800f828 <SUBGRF_GetOperatingMode+0x8>)
 800f822:	7818      	ldrb	r0, [r3, #0]
 800f824:	4770      	bx	lr
 800f826:	bf00      	nop
 800f828:	2000137e 	.word	0x2000137e

0800f82c <SUBGRF_SetStandby>:
{
 800f82c:	b500      	push	{lr}
 800f82e:	b083      	sub	sp, #12
 800f830:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800f834:	2201      	movs	r2, #1
 800f836:	f10d 0107 	add.w	r1, sp, #7
 800f83a:	2080      	movs	r0, #128	; 0x80
 800f83c:	f7ff ffd0 	bl	800f7e0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800f840:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f844:	b92b      	cbnz	r3, 800f852 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800f846:	4b05      	ldr	r3, [pc, #20]	; (800f85c <SUBGRF_SetStandby+0x30>)
 800f848:	2201      	movs	r2, #1
 800f84a:	701a      	strb	r2, [r3, #0]
}
 800f84c:	b003      	add	sp, #12
 800f84e:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800f852:	4b02      	ldr	r3, [pc, #8]	; (800f85c <SUBGRF_SetStandby+0x30>)
 800f854:	2202      	movs	r2, #2
 800f856:	701a      	strb	r2, [r3, #0]
}
 800f858:	e7f8      	b.n	800f84c <SUBGRF_SetStandby+0x20>
 800f85a:	bf00      	nop
 800f85c:	2000137e 	.word	0x2000137e

0800f860 <SUBGRF_SetTx>:
{
 800f860:	b500      	push	{lr}
 800f862:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800f864:	4b0a      	ldr	r3, [pc, #40]	; (800f890 <SUBGRF_SetTx+0x30>)
 800f866:	2204      	movs	r2, #4
 800f868:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f86a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f86e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f872:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f876:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f87a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800f87e:	2203      	movs	r2, #3
 800f880:	a901      	add	r1, sp, #4
 800f882:	2083      	movs	r0, #131	; 0x83
 800f884:	f7ff ffac 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800f888:	b003      	add	sp, #12
 800f88a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f88e:	bf00      	nop
 800f890:	2000137e 	.word	0x2000137e

0800f894 <SUBGRF_SetRx>:
{
 800f894:	b500      	push	{lr}
 800f896:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800f898:	4b0a      	ldr	r3, [pc, #40]	; (800f8c4 <SUBGRF_SetRx+0x30>)
 800f89a:	2205      	movs	r2, #5
 800f89c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f89e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f8a2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f8a6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f8aa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f8ae:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800f8b2:	2203      	movs	r2, #3
 800f8b4:	a901      	add	r1, sp, #4
 800f8b6:	2082      	movs	r0, #130	; 0x82
 800f8b8:	f7ff ff92 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800f8bc:	b003      	add	sp, #12
 800f8be:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8c2:	bf00      	nop
 800f8c4:	2000137e 	.word	0x2000137e

0800f8c8 <SUBGRF_SetRxDutyCycle>:
{
 800f8c8:	b500      	push	{lr}
 800f8ca:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800f8cc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f8d0:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800f8d4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f8d8:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800f8dc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800f8e0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f8e4:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800f8e8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800f8ec:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800f8f0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800f8f4:	2206      	movs	r2, #6
 800f8f6:	4669      	mov	r1, sp
 800f8f8:	2094      	movs	r0, #148	; 0x94
 800f8fa:	f7ff ff71 	bl	800f7e0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800f8fe:	4b03      	ldr	r3, [pc, #12]	; (800f90c <SUBGRF_SetRxDutyCycle+0x44>)
 800f900:	2206      	movs	r2, #6
 800f902:	701a      	strb	r2, [r3, #0]
}
 800f904:	b003      	add	sp, #12
 800f906:	f85d fb04 	ldr.w	pc, [sp], #4
 800f90a:	bf00      	nop
 800f90c:	2000137e 	.word	0x2000137e

0800f910 <SUBGRF_SetCad>:
{
 800f910:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800f912:	2200      	movs	r2, #0
 800f914:	4611      	mov	r1, r2
 800f916:	20c5      	movs	r0, #197	; 0xc5
 800f918:	f7ff ff62 	bl	800f7e0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800f91c:	4b01      	ldr	r3, [pc, #4]	; (800f924 <SUBGRF_SetCad+0x14>)
 800f91e:	2207      	movs	r2, #7
 800f920:	701a      	strb	r2, [r3, #0]
}
 800f922:	bd08      	pop	{r3, pc}
 800f924:	2000137e 	.word	0x2000137e

0800f928 <SUBGRF_SetTxContinuousWave>:
{
 800f928:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800f92a:	2200      	movs	r2, #0
 800f92c:	4611      	mov	r1, r2
 800f92e:	20d1      	movs	r0, #209	; 0xd1
 800f930:	f7ff ff56 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800f934:	bd08      	pop	{r3, pc}

0800f936 <SUBGRF_SetTxInfinitePreamble>:
{
 800f936:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800f938:	2200      	movs	r2, #0
 800f93a:	4611      	mov	r1, r2
 800f93c:	20d2      	movs	r0, #210	; 0xd2
 800f93e:	f7ff ff4f 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800f942:	bd08      	pop	{r3, pc}

0800f944 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800f944:	b500      	push	{lr}
 800f946:	b083      	sub	sp, #12
 800f948:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800f94c:	2201      	movs	r2, #1
 800f94e:	f10d 0107 	add.w	r1, sp, #7
 800f952:	209f      	movs	r0, #159	; 0x9f
 800f954:	f7ff ff44 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800f958:	b003      	add	sp, #12
 800f95a:	f85d fb04 	ldr.w	pc, [sp], #4

0800f95e <SUBGRF_SetRegulatorMode>:
{
 800f95e:	b500      	push	{lr}
 800f960:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800f962:	f7f2 fab3 	bl	8001ecc <RBI_IsDCDC>
 800f966:	2801      	cmp	r0, #1
 800f968:	d00b      	beq.n	800f982 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800f96a:	2300      	movs	r3, #0
 800f96c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800f970:	2201      	movs	r2, #1
 800f972:	f10d 0107 	add.w	r1, sp, #7
 800f976:	2096      	movs	r0, #150	; 0x96
 800f978:	f7ff ff32 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800f97c:	b003      	add	sp, #12
 800f97e:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800f982:	2301      	movs	r3, #1
 800f984:	f88d 3007 	strb.w	r3, [sp, #7]
 800f988:	e7f2      	b.n	800f970 <SUBGRF_SetRegulatorMode+0x12>

0800f98a <SUBGRF_Calibrate>:
{
 800f98a:	b500      	push	{lr}
 800f98c:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f98e:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f992:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f996:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f998:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f99c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f99e:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f9a2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f9a4:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f9a8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f9aa:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f9ae:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800f9b0:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f9b4:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f9b6:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	f10d 0107 	add.w	r1, sp, #7
 800f9c0:	2089      	movs	r0, #137	; 0x89
 800f9c2:	f7ff ff0d 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800f9c6:	b003      	add	sp, #12
 800f9c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800f9cc <SUBGRF_CalibrateImage>:
{
 800f9cc:	b500      	push	{lr}
 800f9ce:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800f9d0:	4b1c      	ldr	r3, [pc, #112]	; (800fa44 <SUBGRF_CalibrateImage+0x78>)
 800f9d2:	4298      	cmp	r0, r3
 800f9d4:	d90d      	bls.n	800f9f2 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800f9d6:	23e1      	movs	r3, #225	; 0xe1
 800f9d8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800f9dc:	23e9      	movs	r3, #233	; 0xe9
 800f9de:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800f9e2:	2202      	movs	r2, #2
 800f9e4:	a901      	add	r1, sp, #4
 800f9e6:	2098      	movs	r0, #152	; 0x98
 800f9e8:	f7ff fefa 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800f9ec:	b003      	add	sp, #12
 800f9ee:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800f9f2:	4b15      	ldr	r3, [pc, #84]	; (800fa48 <SUBGRF_CalibrateImage+0x7c>)
 800f9f4:	4298      	cmp	r0, r3
 800f9f6:	d906      	bls.n	800fa06 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800f9f8:	23d7      	movs	r3, #215	; 0xd7
 800f9fa:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800f9fe:	23db      	movs	r3, #219	; 0xdb
 800fa00:	f88d 3005 	strb.w	r3, [sp, #5]
 800fa04:	e7ed      	b.n	800f9e2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800fa06:	4b11      	ldr	r3, [pc, #68]	; (800fa4c <SUBGRF_CalibrateImage+0x80>)
 800fa08:	4298      	cmp	r0, r3
 800fa0a:	d906      	bls.n	800fa1a <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800fa0c:	23c1      	movs	r3, #193	; 0xc1
 800fa0e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800fa12:	23c5      	movs	r3, #197	; 0xc5
 800fa14:	f88d 3005 	strb.w	r3, [sp, #5]
 800fa18:	e7e3      	b.n	800f9e2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800fa1a:	4b0d      	ldr	r3, [pc, #52]	; (800fa50 <SUBGRF_CalibrateImage+0x84>)
 800fa1c:	4298      	cmp	r0, r3
 800fa1e:	d906      	bls.n	800fa2e <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800fa20:	2375      	movs	r3, #117	; 0x75
 800fa22:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800fa26:	2381      	movs	r3, #129	; 0x81
 800fa28:	f88d 3005 	strb.w	r3, [sp, #5]
 800fa2c:	e7d9      	b.n	800f9e2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800fa2e:	4b09      	ldr	r3, [pc, #36]	; (800fa54 <SUBGRF_CalibrateImage+0x88>)
 800fa30:	4298      	cmp	r0, r3
 800fa32:	d9d6      	bls.n	800f9e2 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 800fa34:	236b      	movs	r3, #107	; 0x6b
 800fa36:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800fa3a:	236f      	movs	r3, #111	; 0x6f
 800fa3c:	f88d 3005 	strb.w	r3, [sp, #5]
 800fa40:	e7cf      	b.n	800f9e2 <SUBGRF_CalibrateImage+0x16>
 800fa42:	bf00      	nop
 800fa44:	35a4e900 	.word	0x35a4e900
 800fa48:	32a9f880 	.word	0x32a9f880
 800fa4c:	2de54480 	.word	0x2de54480
 800fa50:	1b6b0b00 	.word	0x1b6b0b00
 800fa54:	1954fc40 	.word	0x1954fc40

0800fa58 <SUBGRF_SetPaConfig>:
{
 800fa58:	b500      	push	{lr}
 800fa5a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800fa5c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800fa60:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800fa64:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800fa68:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800fa6c:	2204      	movs	r2, #4
 800fa6e:	eb0d 0102 	add.w	r1, sp, r2
 800fa72:	2095      	movs	r0, #149	; 0x95
 800fa74:	f7ff feb4 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800fa78:	b003      	add	sp, #12
 800fa7a:	f85d fb04 	ldr.w	pc, [sp], #4

0800fa7e <SUBGRF_SetDioIrqParams>:
{
 800fa7e:	b500      	push	{lr}
 800fa80:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800fa82:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800fa86:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800fa8a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800fa8e:	0a08      	lsrs	r0, r1, #8
 800fa90:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800fa94:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800fa98:	0a11      	lsrs	r1, r2, #8
 800fa9a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800fa9e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800faa2:	0a1a      	lsrs	r2, r3, #8
 800faa4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800faa8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800faac:	2208      	movs	r2, #8
 800faae:	4669      	mov	r1, sp
 800fab0:	4610      	mov	r0, r2
 800fab2:	f7ff fe95 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800fab6:	b003      	add	sp, #12
 800fab8:	f85d fb04 	ldr.w	pc, [sp], #4

0800fabc <SUBGRF_SetTcxoMode>:
{
 800fabc:	b500      	push	{lr}
 800fabe:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800fac0:	f000 0007 	and.w	r0, r0, #7
 800fac4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fac8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800facc:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fad0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800fad4:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800fad8:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800fadc:	2204      	movs	r2, #4
 800fade:	eb0d 0102 	add.w	r1, sp, r2
 800fae2:	2097      	movs	r0, #151	; 0x97
 800fae4:	f7ff fe7c 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800fae8:	b003      	add	sp, #12
 800faea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800faf0 <SUBGRF_SetRfFrequency>:
{
 800faf0:	b510      	push	{r4, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800faf6:	4b12      	ldr	r3, [pc, #72]	; (800fb40 <SUBGRF_SetRfFrequency+0x50>)
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	b1d3      	cbz	r3, 800fb32 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800fafc:	4a11      	ldr	r2, [pc, #68]	; (800fb44 <SUBGRF_SetRfFrequency+0x54>)
 800fafe:	2300      	movs	r3, #0
 800fb00:	0660      	lsls	r0, r4, #25
 800fb02:	09e1      	lsrs	r1, r4, #7
 800fb04:	f7f1 f82a 	bl	8000b5c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800fb08:	0e03      	lsrs	r3, r0, #24
 800fb0a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800fb0e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fb12:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800fb16:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fb1a:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800fb1e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800fb22:	2204      	movs	r2, #4
 800fb24:	eb0d 0102 	add.w	r1, sp, r2
 800fb28:	2086      	movs	r0, #134	; 0x86
 800fb2a:	f7ff fe59 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800fb2e:	b002      	add	sp, #8
 800fb30:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800fb32:	f7ff ff4b 	bl	800f9cc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800fb36:	4b02      	ldr	r3, [pc, #8]	; (800fb40 <SUBGRF_SetRfFrequency+0x50>)
 800fb38:	2201      	movs	r2, #1
 800fb3a:	701a      	strb	r2, [r3, #0]
 800fb3c:	e7de      	b.n	800fafc <SUBGRF_SetRfFrequency+0xc>
 800fb3e:	bf00      	nop
 800fb40:	2000137c 	.word	0x2000137c
 800fb44:	01e84800 	.word	0x01e84800

0800fb48 <SUBGRF_GetPacketType>:
}
 800fb48:	4b01      	ldr	r3, [pc, #4]	; (800fb50 <SUBGRF_GetPacketType+0x8>)
 800fb4a:	7818      	ldrb	r0, [r3, #0]
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop
 800fb50:	2000137f 	.word	0x2000137f

0800fb54 <SUBGRF_SetBufferBaseAddress>:
{
 800fb54:	b500      	push	{lr}
 800fb56:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800fb58:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800fb5c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800fb60:	2202      	movs	r2, #2
 800fb62:	a901      	add	r1, sp, #4
 800fb64:	208f      	movs	r0, #143	; 0x8f
 800fb66:	f7ff fe3b 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800fb6a:	b003      	add	sp, #12
 800fb6c:	f85d fb04 	ldr.w	pc, [sp], #4

0800fb70 <SUBGRF_GetRssiInst>:
{
 800fb70:	b500      	push	{lr}
 800fb72:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800fb74:	2201      	movs	r2, #1
 800fb76:	a901      	add	r1, sp, #4
 800fb78:	2015      	movs	r0, #21
 800fb7a:	f7ff fe41 	bl	800f800 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800fb7e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800fb82:	4240      	negs	r0, r0
}
 800fb84:	1040      	asrs	r0, r0, #1
 800fb86:	b003      	add	sp, #12
 800fb88:	f85d fb04 	ldr.w	pc, [sp], #4

0800fb8c <SUBGRF_GetPacketStatus>:
{
 800fb8c:	b510      	push	{r4, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800fb92:	2203      	movs	r2, #3
 800fb94:	a901      	add	r1, sp, #4
 800fb96:	2014      	movs	r0, #20
 800fb98:	f7ff fe32 	bl	800f800 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800fb9c:	f7ff ffd4 	bl	800fb48 <SUBGRF_GetPacketType>
 800fba0:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800fba2:	b148      	cbz	r0, 800fbb8 <SUBGRF_GetPacketStatus+0x2c>
 800fba4:	2801      	cmp	r0, #1
 800fba6:	d018      	beq.n	800fbda <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800fba8:	2214      	movs	r2, #20
 800fbaa:	2100      	movs	r1, #0
 800fbac:	4620      	mov	r0, r4
 800fbae:	f000 fe52 	bl	8010856 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800fbb2:	230f      	movs	r3, #15
 800fbb4:	7023      	strb	r3, [r4, #0]
}
 800fbb6:	e00e      	b.n	800fbd6 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800fbb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fbbc:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800fbbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fbc2:	425b      	negs	r3, r3
 800fbc4:	105b      	asrs	r3, r3, #1
 800fbc6:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800fbc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fbcc:	425b      	negs	r3, r3
 800fbce:	105b      	asrs	r3, r3, #1
 800fbd0:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	60a3      	str	r3, [r4, #8]
}
 800fbd6:	b002      	add	sp, #8
 800fbd8:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800fbda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fbde:	425b      	negs	r3, r3
 800fbe0:	105b      	asrs	r3, r3, #1
 800fbe2:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800fbe4:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800fbe8:	3302      	adds	r3, #2
 800fbea:	109b      	asrs	r3, r3, #2
 800fbec:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800fbee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fbf2:	425b      	negs	r3, r3
 800fbf4:	105b      	asrs	r3, r3, #1
 800fbf6:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800fbf8:	4b01      	ldr	r3, [pc, #4]	; (800fc00 <SUBGRF_GetPacketStatus+0x74>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	6123      	str	r3, [r4, #16]
            break;
 800fbfe:	e7ea      	b.n	800fbd6 <SUBGRF_GetPacketStatus+0x4a>
 800fc00:	20001378 	.word	0x20001378

0800fc04 <SUBGRF_WriteRegister>:
{
 800fc04:	b500      	push	{lr}
 800fc06:	b083      	sub	sp, #12
 800fc08:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	f10d 0207 	add.w	r2, sp, #7
 800fc12:	4601      	mov	r1, r0
 800fc14:	4802      	ldr	r0, [pc, #8]	; (800fc20 <SUBGRF_WriteRegister+0x1c>)
 800fc16:	f7f4 febf 	bl	8004998 <HAL_SUBGHZ_WriteRegisters>
}
 800fc1a:	b003      	add	sp, #12
 800fc1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc20:	20000194 	.word	0x20000194

0800fc24 <SUBGRF_SetRxBoosted>:
{
 800fc24:	b510      	push	{r4, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800fc2a:	4b0c      	ldr	r3, [pc, #48]	; (800fc5c <SUBGRF_SetRxBoosted+0x38>)
 800fc2c:	2205      	movs	r2, #5
 800fc2e:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800fc30:	2197      	movs	r1, #151	; 0x97
 800fc32:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800fc36:	f7ff ffe5 	bl	800fc04 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fc3a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800fc3e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fc42:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800fc46:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fc4a:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800fc4e:	2203      	movs	r2, #3
 800fc50:	a901      	add	r1, sp, #4
 800fc52:	2082      	movs	r0, #130	; 0x82
 800fc54:	f7ff fdc4 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800fc58:	b002      	add	sp, #8
 800fc5a:	bd10      	pop	{r4, pc}
 800fc5c:	2000137e 	.word	0x2000137e

0800fc60 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800fc60:	b500      	push	{lr}
 800fc62:	b083      	sub	sp, #12
 800fc64:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800fc68:	2201      	movs	r2, #1
 800fc6a:	f10d 0107 	add.w	r1, sp, #7
 800fc6e:	20a0      	movs	r0, #160	; 0xa0
 800fc70:	f7ff fdb6 	bl	800f7e0 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800fc74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc78:	2b3f      	cmp	r3, #63	; 0x3f
 800fc7a:	d90f      	bls.n	800fc9c <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800fc7c:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800fc7e:	2200      	movs	r2, #0
        while( mant > 31 )
 800fc80:	e002      	b.n	800fc88 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 800fc82:	089b      	lsrs	r3, r3, #2
            exp++;
 800fc84:	3201      	adds	r2, #1
 800fc86:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 800fc88:	2b1f      	cmp	r3, #31
 800fc8a:	d8fa      	bhi.n	800fc82 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800fc8c:	00d9      	lsls	r1, r3, #3
 800fc8e:	b2c9      	uxtb	r1, r1
 800fc90:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800fc92:	b2c9      	uxtb	r1, r1
 800fc94:	f240 7006 	movw	r0, #1798	; 0x706
 800fc98:	f7ff ffb4 	bl	800fc04 <SUBGRF_WriteRegister>
}
 800fc9c:	b003      	add	sp, #12
 800fc9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fca4 <SUBGRF_SetPacketType>:
{
 800fca4:	b500      	push	{lr}
 800fca6:	b083      	sub	sp, #12
 800fca8:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800fcac:	b2c3      	uxtb	r3, r0
 800fcae:	4a09      	ldr	r2, [pc, #36]	; (800fcd4 <SUBGRF_SetPacketType+0x30>)
 800fcb0:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800fcb2:	b143      	cbz	r3, 800fcc6 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	f10d 0107 	add.w	r1, sp, #7
 800fcba:	208a      	movs	r0, #138	; 0x8a
 800fcbc:	f7ff fd90 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800fcc0:	b003      	add	sp, #12
 800fcc2:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800fccc:	f7ff ff9a 	bl	800fc04 <SUBGRF_WriteRegister>
 800fcd0:	e7f0      	b.n	800fcb4 <SUBGRF_SetPacketType+0x10>
 800fcd2:	bf00      	nop
 800fcd4:	2000137f 	.word	0x2000137f

0800fcd8 <SUBGRF_SetModulationParams>:
{
 800fcd8:	b510      	push	{r4, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800fcde:	4b3e      	ldr	r3, [pc, #248]	; (800fdd8 <SUBGRF_SetModulationParams+0x100>)
 800fce0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fce4:	ab02      	add	r3, sp, #8
 800fce6:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800fcea:	7820      	ldrb	r0, [r4, #0]
 800fcec:	4b3b      	ldr	r3, [pc, #236]	; (800fddc <SUBGRF_SetModulationParams+0x104>)
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	4298      	cmp	r0, r3
 800fcf2:	d106      	bne.n	800fd02 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800fcf4:	7823      	ldrb	r3, [r4, #0]
 800fcf6:	2b03      	cmp	r3, #3
 800fcf8:	d82c      	bhi.n	800fd54 <SUBGRF_SetModulationParams+0x7c>
 800fcfa:	e8df f003 	tbb	[pc, r3]
 800fcfe:	4205      	.short	0x4205
 800fd00:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800fd02:	f7ff ffcf 	bl	800fca4 <SUBGRF_SetPacketType>
 800fd06:	e7f5      	b.n	800fcf4 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800fd08:	6862      	ldr	r2, [r4, #4]
 800fd0a:	4b35      	ldr	r3, [pc, #212]	; (800fde0 <SUBGRF_SetModulationParams+0x108>)
 800fd0c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fd10:	0c1a      	lsrs	r2, r3, #16
 800fd12:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fd16:	0a1a      	lsrs	r2, r3, #8
 800fd18:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fd1c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fd20:	7b23      	ldrb	r3, [r4, #12]
 800fd22:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fd26:	7b63      	ldrb	r3, [r4, #13]
 800fd28:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800fd2c:	68a1      	ldr	r1, [r4, #8]
 800fd2e:	4a2d      	ldr	r2, [pc, #180]	; (800fde4 <SUBGRF_SetModulationParams+0x10c>)
 800fd30:	2300      	movs	r3, #0
 800fd32:	0648      	lsls	r0, r1, #25
 800fd34:	09c9      	lsrs	r1, r1, #7
 800fd36:	f7f0 ff11 	bl	8000b5c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800fd3a:	0c03      	lsrs	r3, r0, #16
 800fd3c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800fd40:	0a03      	lsrs	r3, r0, #8
 800fd42:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800fd46:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fd4a:	2208      	movs	r2, #8
 800fd4c:	4669      	mov	r1, sp
 800fd4e:	208b      	movs	r0, #139	; 0x8b
 800fd50:	f7ff fd46 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800fd54:	b002      	add	sp, #8
 800fd56:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800fd58:	6922      	ldr	r2, [r4, #16]
 800fd5a:	4b21      	ldr	r3, [pc, #132]	; (800fde0 <SUBGRF_SetModulationParams+0x108>)
 800fd5c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fd60:	0c1a      	lsrs	r2, r3, #16
 800fd62:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fd66:	0a1a      	lsrs	r2, r3, #8
 800fd68:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fd6c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800fd70:	7d23      	ldrb	r3, [r4, #20]
 800fd72:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fd76:	2204      	movs	r2, #4
 800fd78:	4669      	mov	r1, sp
 800fd7a:	208b      	movs	r0, #139	; 0x8b
 800fd7c:	f7ff fd30 	bl	800f7e0 <SUBGRF_WriteCommand>
        break;
 800fd80:	e7e8      	b.n	800fd54 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800fd82:	7e23      	ldrb	r3, [r4, #24]
 800fd84:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800fd88:	7e63      	ldrb	r3, [r4, #25]
 800fd8a:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800fd8e:	7ea3      	ldrb	r3, [r4, #26]
 800fd90:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800fd94:	7ee3      	ldrb	r3, [r4, #27]
 800fd96:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fd9a:	2204      	movs	r2, #4
 800fd9c:	4669      	mov	r1, sp
 800fd9e:	208b      	movs	r0, #139	; 0x8b
 800fda0:	f7ff fd1e 	bl	800f7e0 <SUBGRF_WriteCommand>
        break;
 800fda4:	e7d6      	b.n	800fd54 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800fda6:	6862      	ldr	r2, [r4, #4]
 800fda8:	4b0d      	ldr	r3, [pc, #52]	; (800fde0 <SUBGRF_SetModulationParams+0x108>)
 800fdaa:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fdae:	0c1a      	lsrs	r2, r3, #16
 800fdb0:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fdb4:	0a1a      	lsrs	r2, r3, #8
 800fdb6:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fdba:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fdbe:	7b23      	ldrb	r3, [r4, #12]
 800fdc0:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fdc4:	7b63      	ldrb	r3, [r4, #13]
 800fdc6:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fdca:	2205      	movs	r2, #5
 800fdcc:	4669      	mov	r1, sp
 800fdce:	208b      	movs	r0, #139	; 0x8b
 800fdd0:	f7ff fd06 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800fdd4:	e7be      	b.n	800fd54 <SUBGRF_SetModulationParams+0x7c>
 800fdd6:	bf00      	nop
 800fdd8:	08011340 	.word	0x08011340
 800fddc:	2000137f 	.word	0x2000137f
 800fde0:	3d090000 	.word	0x3d090000
 800fde4:	01e84800 	.word	0x01e84800

0800fde8 <SUBGRF_ReadRegister>:
{
 800fde8:	b500      	push	{lr}
 800fdea:	b083      	sub	sp, #12
 800fdec:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800fdee:	2301      	movs	r3, #1
 800fdf0:	f10d 0207 	add.w	r2, sp, #7
 800fdf4:	4803      	ldr	r0, [pc, #12]	; (800fe04 <SUBGRF_ReadRegister+0x1c>)
 800fdf6:	f7f4 fe1f 	bl	8004a38 <HAL_SUBGHZ_ReadRegisters>
}
 800fdfa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fdfe:	b003      	add	sp, #12
 800fe00:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe04:	20000194 	.word	0x20000194

0800fe08 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800fe08:	b510      	push	{r4, lr}
 800fe0a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800fe0c:	f7f2 f85e 	bl	8001ecc <RBI_IsDCDC>
 800fe10:	2801      	cmp	r0, #1
 800fe12:	d000      	beq.n	800fe16 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800fe14:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800fe16:	f640 1023 	movw	r0, #2339	; 0x923
 800fe1a:	f7ff ffe5 	bl	800fde8 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800fe1e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800fe22:	4321      	orrs	r1, r4
 800fe24:	f640 1023 	movw	r0, #2339	; 0x923
 800fe28:	f7ff feec 	bl	800fc04 <SUBGRF_WriteRegister>
}
 800fe2c:	e7f2      	b.n	800fe14 <Radio_SMPS_Set+0xc>
	...

0800fe30 <SUBGRF_Init>:
{
 800fe30:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800fe32:	b108      	cbz	r0, 800fe38 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800fe34:	4a16      	ldr	r2, [pc, #88]	; (800fe90 <SUBGRF_Init+0x60>)
 800fe36:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800fe38:	f7f1 fa5e 	bl	80012f8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fe3c:	2002      	movs	r0, #2
 800fe3e:	f7ff ffe3 	bl	800fe08 <Radio_SMPS_Set>
    ImageCalibrated = false;
 800fe42:	2000      	movs	r0, #0
 800fe44:	4b13      	ldr	r3, [pc, #76]	; (800fe94 <SUBGRF_Init+0x64>)
 800fe46:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800fe48:	f7ff fcf0 	bl	800f82c <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800fe4c:	f7f2 f83a 	bl	8001ec4 <RBI_IsTCXO>
 800fe50:	2801      	cmp	r0, #1
 800fe52:	d00f      	beq.n	800fe74 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fe54:	2120      	movs	r1, #32
 800fe56:	f640 1011 	movw	r0, #2321	; 0x911
 800fe5a:	f7ff fed3 	bl	800fc04 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fe5e:	2120      	movs	r1, #32
 800fe60:	f640 1012 	movw	r0, #2322	; 0x912
 800fe64:	f7ff fece 	bl	800fc04 <SUBGRF_WriteRegister>
    RBI_Init();
 800fe68:	f7f2 f820 	bl	8001eac <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800fe6c:	4b0a      	ldr	r3, [pc, #40]	; (800fe98 <SUBGRF_Init+0x68>)
 800fe6e:	2201      	movs	r2, #1
 800fe70:	701a      	strb	r2, [r3, #0]
}
 800fe72:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800fe74:	2140      	movs	r1, #64	; 0x40
 800fe76:	f7ff fe21 	bl	800fabc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	f640 1011 	movw	r0, #2321	; 0x911
 800fe80:	f7ff fec0 	bl	800fc04 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 800fe84:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800fe88:	f7ff fd7f 	bl	800f98a <SUBGRF_Calibrate>
 800fe8c:	e7ec      	b.n	800fe68 <SUBGRF_Init+0x38>
 800fe8e:	bf00      	nop
 800fe90:	20001380 	.word	0x20001380
 800fe94:	2000137c 	.word	0x2000137c
 800fe98:	2000137e 	.word	0x2000137e

0800fe9c <SUBGRF_SetSleep>:
{
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800fea2:	2000      	movs	r0, #0
 800fea4:	f7f2 f806 	bl	8001eb4 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fea8:	2002      	movs	r0, #2
 800feaa:	f7ff ffad 	bl	800fe08 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800feae:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800feb2:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800feb6:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800feb8:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800febc:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800febe:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800fec2:	2201      	movs	r2, #1
 800fec4:	f10d 0107 	add.w	r1, sp, #7
 800fec8:	2084      	movs	r0, #132	; 0x84
 800feca:	f7ff fc89 	bl	800f7e0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800fece:	4b02      	ldr	r3, [pc, #8]	; (800fed8 <SUBGRF_SetSleep+0x3c>)
 800fed0:	2200      	movs	r2, #0
 800fed2:	701a      	strb	r2, [r3, #0]
}
 800fed4:	b002      	add	sp, #8
 800fed6:	bd10      	pop	{r4, pc}
 800fed8:	2000137e 	.word	0x2000137e

0800fedc <SUBGRF_SetWhiteningSeed>:
{
 800fedc:	b510      	push	{r4, lr}
 800fede:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800fee0:	f7ff fe32 	bl	800fb48 <SUBGRF_GetPacketType>
 800fee4:	b100      	cbz	r0, 800fee8 <SUBGRF_SetWhiteningSeed+0xc>
}
 800fee6:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800fee8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800feec:	f7ff ff7c 	bl	800fde8 <SUBGRF_ReadRegister>
 800fef0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800fef4:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800fef8:	4301      	orrs	r1, r0
 800fefa:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fefe:	f7ff fe81 	bl	800fc04 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800ff02:	b2e1      	uxtb	r1, r4
 800ff04:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800ff08:	f7ff fe7c 	bl	800fc04 <SUBGRF_WriteRegister>
}
 800ff0c:	e7eb      	b.n	800fee6 <SUBGRF_SetWhiteningSeed+0xa>

0800ff0e <SUBGRF_SetTxParams>:
{
 800ff0e:	b530      	push	{r4, r5, lr}
 800ff10:	b083      	sub	sp, #12
 800ff12:	460c      	mov	r4, r1
 800ff14:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 800ff16:	2801      	cmp	r0, #1
 800ff18:	d127      	bne.n	800ff6a <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 800ff1a:	290f      	cmp	r1, #15
 800ff1c:	d00d      	beq.n	800ff3a <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800ff1e:	2301      	movs	r3, #1
 800ff20:	461a      	mov	r2, r3
 800ff22:	2100      	movs	r1, #0
 800ff24:	2004      	movs	r0, #4
 800ff26:	f7ff fd97 	bl	800fa58 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 800ff2a:	2c0d      	cmp	r4, #13
 800ff2c:	dc0c      	bgt.n	800ff48 <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 800ff2e:	f114 0f11 	cmn.w	r4, #17
 800ff32:	da0a      	bge.n	800ff4a <SUBGRF_SetTxParams+0x3c>
            power = -17;
 800ff34:	f06f 0410 	mvn.w	r4, #16
 800ff38:	e007      	b.n	800ff4a <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	2100      	movs	r1, #0
 800ff40:	2006      	movs	r0, #6
 800ff42:	f7ff fd89 	bl	800fa58 <SUBGRF_SetPaConfig>
 800ff46:	e7f0      	b.n	800ff2a <SUBGRF_SetTxParams+0x1c>
            power = 14;
 800ff48:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800ff4a:	2118      	movs	r1, #24
 800ff4c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ff50:	f7ff fe58 	bl	800fc04 <SUBGRF_WriteRegister>
    buf[0] = power;
 800ff54:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 800ff58:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800ff5c:	2202      	movs	r2, #2
 800ff5e:	a901      	add	r1, sp, #4
 800ff60:	208e      	movs	r0, #142	; 0x8e
 800ff62:	f7ff fc3d 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 800ff66:	b003      	add	sp, #12
 800ff68:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800ff6a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ff6e:	f7ff ff3b 	bl	800fde8 <SUBGRF_ReadRegister>
 800ff72:	f040 011e 	orr.w	r1, r0, #30
 800ff76:	b2c9      	uxtb	r1, r1
 800ff78:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ff7c:	f7ff fe42 	bl	800fc04 <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800ff80:	2301      	movs	r3, #1
 800ff82:	2200      	movs	r2, #0
 800ff84:	2107      	movs	r1, #7
 800ff86:	2004      	movs	r0, #4
 800ff88:	f7ff fd66 	bl	800fa58 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800ff8c:	2c16      	cmp	r4, #22
 800ff8e:	dc05      	bgt.n	800ff9c <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 800ff90:	f114 0f09 	cmn.w	r4, #9
 800ff94:	da03      	bge.n	800ff9e <SUBGRF_SetTxParams+0x90>
            power = -9;
 800ff96:	f06f 0408 	mvn.w	r4, #8
 800ff9a:	e000      	b.n	800ff9e <SUBGRF_SetTxParams+0x90>
            power = 22;
 800ff9c:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800ff9e:	2138      	movs	r1, #56	; 0x38
 800ffa0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ffa4:	f7ff fe2e 	bl	800fc04 <SUBGRF_WriteRegister>
 800ffa8:	e7d4      	b.n	800ff54 <SUBGRF_SetTxParams+0x46>
	...

0800ffac <SUBGRF_GetRxBufferStatus>:
{
 800ffac:	b530      	push	{r4, r5, lr}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ffb4:	2202      	movs	r2, #2
 800ffb6:	a901      	add	r1, sp, #4
 800ffb8:	2013      	movs	r0, #19
 800ffba:	f7ff fc21 	bl	800f800 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ffbe:	f7ff fdc3 	bl	800fb48 <SUBGRF_GetPacketType>
 800ffc2:	2801      	cmp	r0, #1
 800ffc4:	d007      	beq.n	800ffd6 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800ffc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ffca:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800ffcc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ffd0:	7023      	strb	r3, [r4, #0]
}
 800ffd2:	b003      	add	sp, #12
 800ffd4:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ffd6:	4b05      	ldr	r3, [pc, #20]	; (800ffec <SUBGRF_GetRxBufferStatus+0x40>)
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d1f2      	bne.n	800ffc6 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ffe0:	f240 7002 	movw	r0, #1794	; 0x702
 800ffe4:	f7ff ff00 	bl	800fde8 <SUBGRF_ReadRegister>
 800ffe8:	7028      	strb	r0, [r5, #0]
 800ffea:	e7ef      	b.n	800ffcc <SUBGRF_GetRxBufferStatus+0x20>
 800ffec:	2000137d 	.word	0x2000137d

0800fff0 <SUBGRF_WriteRegisters>:
{
 800fff0:	b510      	push	{r4, lr}
 800fff2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fff4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fff8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800fffa:	460a      	mov	r2, r1
 800fffc:	4601      	mov	r1, r0
 800fffe:	4803      	ldr	r0, [pc, #12]	; (801000c <SUBGRF_WriteRegisters+0x1c>)
 8010000:	f7f4 fcca 	bl	8004998 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010004:	f384 8810 	msr	PRIMASK, r4
}
 8010008:	bd10      	pop	{r4, pc}
 801000a:	bf00      	nop
 801000c:	20000194 	.word	0x20000194

08010010 <SUBGRF_SetSyncWord>:
{
 8010010:	b508      	push	{r3, lr}
 8010012:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8010014:	2208      	movs	r2, #8
 8010016:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801001a:	f7ff ffe9 	bl	800fff0 <SUBGRF_WriteRegisters>
}
 801001e:	2000      	movs	r0, #0
 8010020:	bd08      	pop	{r3, pc}

08010022 <SUBGRF_SetCrcSeed>:
{
 8010022:	b500      	push	{lr}
 8010024:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8010026:	0a03      	lsrs	r3, r0, #8
 8010028:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801002c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010030:	f7ff fd8a 	bl	800fb48 <SUBGRF_GetPacketType>
 8010034:	b110      	cbz	r0, 801003c <SUBGRF_SetCrcSeed+0x1a>
}
 8010036:	b003      	add	sp, #12
 8010038:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801003c:	2202      	movs	r2, #2
 801003e:	a901      	add	r1, sp, #4
 8010040:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8010044:	f7ff ffd4 	bl	800fff0 <SUBGRF_WriteRegisters>
}
 8010048:	e7f5      	b.n	8010036 <SUBGRF_SetCrcSeed+0x14>

0801004a <SUBGRF_SetCrcPolynomial>:
{
 801004a:	b500      	push	{lr}
 801004c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801004e:	0a03      	lsrs	r3, r0, #8
 8010050:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8010054:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010058:	f7ff fd76 	bl	800fb48 <SUBGRF_GetPacketType>
 801005c:	b110      	cbz	r0, 8010064 <SUBGRF_SetCrcPolynomial+0x1a>
}
 801005e:	b003      	add	sp, #12
 8010060:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8010064:	2202      	movs	r2, #2
 8010066:	a901      	add	r1, sp, #4
 8010068:	f240 60be 	movw	r0, #1726	; 0x6be
 801006c:	f7ff ffc0 	bl	800fff0 <SUBGRF_WriteRegisters>
}
 8010070:	e7f5      	b.n	801005e <SUBGRF_SetCrcPolynomial+0x14>
	...

08010074 <SUBGRF_SetPacketParams>:
{
 8010074:	b510      	push	{r4, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801007a:	ab01      	add	r3, sp, #4
 801007c:	4a33      	ldr	r2, [pc, #204]	; (801014c <SUBGRF_SetPacketParams+0xd8>)
 801007e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010080:	c303      	stmia	r3!, {r0, r1}
 8010082:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8010084:	7820      	ldrb	r0, [r4, #0]
 8010086:	4b32      	ldr	r3, [pc, #200]	; (8010150 <SUBGRF_SetPacketParams+0xdc>)
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	4298      	cmp	r0, r3
 801008c:	d106      	bne.n	801009c <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 801008e:	7823      	ldrb	r3, [r4, #0]
 8010090:	2b03      	cmp	r3, #3
 8010092:	d82a      	bhi.n	80100ea <SUBGRF_SetPacketParams+0x76>
 8010094:	e8df f003 	tbb	[pc, r3]
 8010098:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 801009c:	f7ff fe02 	bl	800fca4 <SUBGRF_SetPacketType>
 80100a0:	e7f5      	b.n	801008e <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80100a2:	7a63      	ldrb	r3, [r4, #9]
 80100a4:	2bf1      	cmp	r3, #241	; 0xf1
 80100a6:	d022      	beq.n	80100ee <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80100a8:	2bf2      	cmp	r3, #242	; 0xf2
 80100aa:	d02a      	beq.n	8010102 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80100ac:	8862      	ldrh	r2, [r4, #2]
 80100ae:	0a11      	lsrs	r1, r2, #8
 80100b0:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80100b4:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80100b8:	7922      	ldrb	r2, [r4, #4]
 80100ba:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80100be:	7962      	ldrb	r2, [r4, #5]
 80100c0:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80100c4:	79a2      	ldrb	r2, [r4, #6]
 80100c6:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80100ca:	79e2      	ldrb	r2, [r4, #7]
 80100cc:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80100d0:	7a22      	ldrb	r2, [r4, #8]
 80100d2:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80100d6:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80100da:	7aa3      	ldrb	r3, [r4, #10]
 80100dc:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80100e0:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80100e2:	a901      	add	r1, sp, #4
 80100e4:	208c      	movs	r0, #140	; 0x8c
 80100e6:	f7ff fb7b 	bl	800f7e0 <SUBGRF_WriteCommand>
}
 80100ea:	b004      	add	sp, #16
 80100ec:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80100ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80100f2:	f7ff ff96 	bl	8010022 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80100f6:	f248 0005 	movw	r0, #32773	; 0x8005
 80100fa:	f7ff ffa6 	bl	801004a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80100fe:	2302      	movs	r3, #2
 8010100:	e7d4      	b.n	80100ac <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8010102:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8010106:	f7ff ff8c 	bl	8010022 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801010a:	f241 0021 	movw	r0, #4129	; 0x1021
 801010e:	f7ff ff9c 	bl	801004a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8010112:	2306      	movs	r3, #6
 8010114:	e7ca      	b.n	80100ac <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8010116:	7b23      	ldrb	r3, [r4, #12]
 8010118:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 801011c:	2201      	movs	r2, #1
        break;
 801011e:	e7e0      	b.n	80100e2 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8010120:	89e3      	ldrh	r3, [r4, #14]
 8010122:	0a1a      	lsrs	r2, r3, #8
 8010124:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8010128:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801012c:	7c23      	ldrb	r3, [r4, #16]
 801012e:	4a09      	ldr	r2, [pc, #36]	; (8010154 <SUBGRF_SetPacketParams+0xe0>)
 8010130:	7013      	strb	r3, [r2, #0]
 8010132:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8010136:	7c63      	ldrb	r3, [r4, #17]
 8010138:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801013c:	7ca3      	ldrb	r3, [r4, #18]
 801013e:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8010142:	7ce3      	ldrb	r3, [r4, #19]
 8010144:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8010148:	2206      	movs	r2, #6
        break;
 801014a:	e7ca      	b.n	80100e2 <SUBGRF_SetPacketParams+0x6e>
 801014c:	08011348 	.word	0x08011348
 8010150:	2000137f 	.word	0x2000137f
 8010154:	2000137d 	.word	0x2000137d

08010158 <SUBGRF_ReadRegisters>:
{
 8010158:	b510      	push	{r4, lr}
 801015a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801015c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010160:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8010162:	460a      	mov	r2, r1
 8010164:	4601      	mov	r1, r0
 8010166:	4803      	ldr	r0, [pc, #12]	; (8010174 <SUBGRF_ReadRegisters+0x1c>)
 8010168:	f7f4 fc66 	bl	8004a38 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801016c:	f384 8810 	msr	PRIMASK, r4
}
 8010170:	bd10      	pop	{r4, pc}
 8010172:	bf00      	nop
 8010174:	20000194 	.word	0x20000194

08010178 <SUBGRF_GetRandom>:
{
 8010178:	b570      	push	{r4, r5, r6, lr}
 801017a:	b082      	sub	sp, #8
    uint32_t number = 0;
 801017c:	2600      	movs	r6, #0
 801017e:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8010180:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010184:	f7ff fe30 	bl	800fde8 <SUBGRF_ReadRegister>
 8010188:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801018a:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 801018e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010192:	f7ff fd37 	bl	800fc04 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8010196:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801019a:	f7ff fe25 	bl	800fde8 <SUBGRF_ReadRegister>
 801019e:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80101a0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80101a4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80101a8:	f7ff fd2c 	bl	800fc04 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80101ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80101b0:	f7ff fb70 	bl	800f894 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80101b4:	2204      	movs	r2, #4
 80101b6:	eb0d 0102 	add.w	r1, sp, r2
 80101ba:	f640 0019 	movw	r0, #2073	; 0x819
 80101be:	f7ff ffcb 	bl	8010158 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80101c2:	4630      	mov	r0, r6
 80101c4:	f7ff fb32 	bl	800f82c <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80101c8:	4629      	mov	r1, r5
 80101ca:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80101ce:	f7ff fd19 	bl	800fc04 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80101d2:	4621      	mov	r1, r4
 80101d4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80101d8:	f7ff fd14 	bl	800fc04 <SUBGRF_WriteRegister>
}
 80101dc:	9801      	ldr	r0, [sp, #4]
 80101de:	b002      	add	sp, #8
 80101e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080101e4 <SUBGRF_WriteBuffer>:
{
 80101e4:	b510      	push	{r4, lr}
 80101e6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80101ec:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80101ee:	460a      	mov	r2, r1
 80101f0:	4601      	mov	r1, r0
 80101f2:	4803      	ldr	r0, [pc, #12]	; (8010200 <SUBGRF_WriteBuffer+0x1c>)
 80101f4:	f7f4 fd76 	bl	8004ce4 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101f8:	f384 8810 	msr	PRIMASK, r4
}
 80101fc:	bd10      	pop	{r4, pc}
 80101fe:	bf00      	nop
 8010200:	20000194 	.word	0x20000194

08010204 <SUBGRF_SetPayload>:
{
 8010204:	b508      	push	{r3, lr}
 8010206:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8010208:	4601      	mov	r1, r0
 801020a:	2000      	movs	r0, #0
 801020c:	f7ff ffea 	bl	80101e4 <SUBGRF_WriteBuffer>
}
 8010210:	bd08      	pop	{r3, pc}

08010212 <SUBGRF_SendPayload>:
{
 8010212:	b510      	push	{r4, lr}
 8010214:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8010216:	f7ff fff5 	bl	8010204 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801021a:	4620      	mov	r0, r4
 801021c:	f7ff fb20 	bl	800f860 <SUBGRF_SetTx>
}
 8010220:	bd10      	pop	{r4, pc}
	...

08010224 <SUBGRF_ReadBuffer>:
{
 8010224:	b510      	push	{r4, lr}
 8010226:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010228:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801022c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801022e:	460a      	mov	r2, r1
 8010230:	4601      	mov	r1, r0
 8010232:	4803      	ldr	r0, [pc, #12]	; (8010240 <SUBGRF_ReadBuffer+0x1c>)
 8010234:	f7f4 fda0 	bl	8004d78 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010238:	f384 8810 	msr	PRIMASK, r4
}
 801023c:	bd10      	pop	{r4, pc}
 801023e:	bf00      	nop
 8010240:	20000194 	.word	0x20000194

08010244 <SUBGRF_GetPayload>:
{
 8010244:	b570      	push	{r4, r5, r6, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	4606      	mov	r6, r0
 801024a:	460c      	mov	r4, r1
 801024c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 801024e:	2300      	movs	r3, #0
 8010250:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8010254:	f10d 0107 	add.w	r1, sp, #7
 8010258:	4620      	mov	r0, r4
 801025a:	f7ff fea7 	bl	800ffac <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801025e:	7822      	ldrb	r2, [r4, #0]
 8010260:	42aa      	cmp	r2, r5
 8010262:	d902      	bls.n	801026a <SUBGRF_GetPayload+0x26>
        return 1;
 8010264:	2001      	movs	r0, #1
}
 8010266:	b002      	add	sp, #8
 8010268:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801026a:	4631      	mov	r1, r6
 801026c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010270:	f7ff ffd8 	bl	8010224 <SUBGRF_ReadBuffer>
    return 0;
 8010274:	2000      	movs	r0, #0
 8010276:	e7f6      	b.n	8010266 <SUBGRF_GetPayload+0x22>

08010278 <SUBGRF_SetSwitch>:
{
 8010278:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 801027a:	2901      	cmp	r1, #1
 801027c:	d003      	beq.n	8010286 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801027e:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8010280:	f7f1 fe18 	bl	8001eb4 <RBI_ConfigRFSwitch>
}
 8010284:	bd10      	pop	{r4, pc}
 8010286:	4604      	mov	r4, r0
 8010288:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 801028a:	2c01      	cmp	r4, #1
 801028c:	d003      	beq.n	8010296 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801028e:	2c02      	cmp	r4, #2
 8010290:	d1f6      	bne.n	8010280 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8010292:	2003      	movs	r0, #3
 8010294:	e7f4      	b.n	8010280 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8010296:	2004      	movs	r0, #4
 8010298:	f7ff fdb6 	bl	800fe08 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 801029c:	2002      	movs	r0, #2
 801029e:	e7f6      	b.n	801028e <SUBGRF_SetSwitch+0x16>

080102a0 <SUBGRF_SetRfTxPower>:
{
 80102a0:	b538      	push	{r3, r4, r5, lr}
 80102a2:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80102a4:	f7f1 fe0a 	bl	8001ebc <RBI_GetTxConfig>
    switch (TxConfig)
 80102a8:	b148      	cbz	r0, 80102be <SUBGRF_SetRfTxPower+0x1e>
 80102aa:	2802      	cmp	r0, #2
 80102ac:	d10d      	bne.n	80102ca <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80102ae:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80102b0:	2202      	movs	r2, #2
 80102b2:	4621      	mov	r1, r4
 80102b4:	4628      	mov	r0, r5
 80102b6:	f7ff fe2a 	bl	800ff0e <SUBGRF_SetTxParams>
}
 80102ba:	4628      	mov	r0, r5
 80102bc:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80102be:	2c0f      	cmp	r4, #15
 80102c0:	dc01      	bgt.n	80102c6 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80102c2:	2501      	movs	r5, #1
 80102c4:	e7f4      	b.n	80102b0 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80102c6:	2502      	movs	r5, #2
 80102c8:	e7f2      	b.n	80102b0 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80102ca:	2501      	movs	r5, #1
 80102cc:	e7f0      	b.n	80102b0 <SUBGRF_SetRfTxPower+0x10>

080102ce <SUBGRF_GetRadioWakeUpTime>:
}
 80102ce:	2001      	movs	r0, #1
 80102d0:	4770      	bx	lr
	...

080102d4 <HAL_SUBGHZ_TxCpltCallback>:
{
 80102d4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80102d6:	4b02      	ldr	r3, [pc, #8]	; (80102e0 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2001      	movs	r0, #1
 80102dc:	4798      	blx	r3
}
 80102de:	bd08      	pop	{r3, pc}
 80102e0:	20001380 	.word	0x20001380

080102e4 <HAL_SUBGHZ_RxCpltCallback>:
{
 80102e4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80102e6:	4b02      	ldr	r3, [pc, #8]	; (80102f0 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2002      	movs	r0, #2
 80102ec:	4798      	blx	r3
}
 80102ee:	bd08      	pop	{r3, pc}
 80102f0:	20001380 	.word	0x20001380

080102f4 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80102f4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80102f6:	4b02      	ldr	r3, [pc, #8]	; (8010300 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2040      	movs	r0, #64	; 0x40
 80102fc:	4798      	blx	r3
}
 80102fe:	bd08      	pop	{r3, pc}
 8010300:	20001380 	.word	0x20001380

08010304 <HAL_SUBGHZ_CADStatusCallback>:
{
 8010304:	b508      	push	{r3, lr}
    switch (cadstatus)
 8010306:	b111      	cbz	r1, 801030e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8010308:	2901      	cmp	r1, #1
 801030a:	d005      	beq.n	8010318 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 801030c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801030e:	4b05      	ldr	r3, [pc, #20]	; (8010324 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2080      	movs	r0, #128	; 0x80
 8010314:	4798      	blx	r3
            break;
 8010316:	e7f9      	b.n	801030c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8010318:	4b02      	ldr	r3, [pc, #8]	; (8010324 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010320:	4798      	blx	r3
}
 8010322:	e7f3      	b.n	801030c <HAL_SUBGHZ_CADStatusCallback+0x8>
 8010324:	20001380 	.word	0x20001380

08010328 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8010328:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801032a:	4b03      	ldr	r3, [pc, #12]	; (8010338 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010332:	4798      	blx	r3
}
 8010334:	bd08      	pop	{r3, pc}
 8010336:	bf00      	nop
 8010338:	20001380 	.word	0x20001380

0801033c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 801033c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801033e:	4b02      	ldr	r3, [pc, #8]	; (8010348 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	2020      	movs	r0, #32
 8010344:	4798      	blx	r3
}
 8010346:	bd08      	pop	{r3, pc}
 8010348:	20001380 	.word	0x20001380

0801034c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 801034c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801034e:	4b02      	ldr	r3, [pc, #8]	; (8010358 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2004      	movs	r0, #4
 8010354:	4798      	blx	r3
}
 8010356:	bd08      	pop	{r3, pc}
 8010358:	20001380 	.word	0x20001380

0801035c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 801035c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801035e:	4b02      	ldr	r3, [pc, #8]	; (8010368 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2008      	movs	r0, #8
 8010364:	4798      	blx	r3
}
 8010366:	bd08      	pop	{r3, pc}
 8010368:	20001380 	.word	0x20001380

0801036c <HAL_SUBGHZ_HeaderValidCallback>:
{
 801036c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801036e:	4b02      	ldr	r3, [pc, #8]	; (8010378 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2010      	movs	r0, #16
 8010374:	4798      	blx	r3
}
 8010376:	bd08      	pop	{r3, pc}
 8010378:	20001380 	.word	0x20001380

0801037c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 801037c:	4601      	mov	r1, r0
 801037e:	b188      	cbz	r0, 80103a4 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010380:	2300      	movs	r3, #0
 8010382:	2b15      	cmp	r3, #21
 8010384:	d80d      	bhi.n	80103a2 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8010386:	4618      	mov	r0, r3
 8010388:	4a07      	ldr	r2, [pc, #28]	; (80103a8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801038a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801038e:	428a      	cmp	r2, r1
 8010390:	d802      	bhi.n	8010398 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010392:	3301      	adds	r3, #1
 8010394:	b2db      	uxtb	r3, r3
 8010396:	e7f4      	b.n	8010382 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8010398:	4b03      	ldr	r3, [pc, #12]	; (80103a8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801039a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801039e:	7918      	ldrb	r0, [r3, #4]
 80103a0:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80103a2:	e7fe      	b.n	80103a2 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 80103a4:	201f      	movs	r0, #31
}
 80103a6:	4770      	bx	lr
 80103a8:	08011f28 	.word	0x08011f28

080103ac <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80103ac:	b570      	push	{r4, r5, r6, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	4605      	mov	r5, r0
 80103b2:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80103b4:	4b1d      	ldr	r3, [pc, #116]	; (801042c <SUBGRF_GetCFO+0x80>)
 80103b6:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80103b8:	f640 0007 	movw	r0, #2055	; 0x807
 80103bc:	f7ff fd14 	bl	800fde8 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80103c0:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80103c4:	3308      	adds	r3, #8
 80103c6:	446b      	add	r3, sp
 80103c8:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80103cc:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80103d0:	3b01      	subs	r3, #1
 80103d2:	fa02 f303 	lsl.w	r3, r2, r3
 80103d6:	4a16      	ldr	r2, [pc, #88]	; (8010430 <SUBGRF_GetCFO+0x84>)
 80103d8:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 80103dc:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80103e0:	2807      	cmp	r0, #7
 80103e2:	d921      	bls.n	8010428 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80103e4:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80103e6:	fb03 f000 	mul.w	r0, r3, r0
 80103ea:	2803      	cmp	r0, #3
 80103ec:	d800      	bhi.n	80103f0 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80103ee:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80103f0:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 80103f4:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80103f8:	f7ff fcf6 	bl	800fde8 <SUBGRF_ReadRegister>
 80103fc:	0206      	lsls	r6, r0, #8
 80103fe:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8010402:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8010406:	f7ff fcef 	bl	800fde8 <SUBGRF_ReadRegister>
 801040a:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801040c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8010410:	d003      	beq.n	801041a <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8010412:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8010416:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801041a:	096b      	lsrs	r3, r5, #5
 801041c:	fb03 f000 	mul.w	r0, r3, r0
 8010420:	11c0      	asrs	r0, r0, #7
 8010422:	6020      	str	r0, [r4, #0]
}
 8010424:	b002      	add	sp, #8
 8010426:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8010428:	2302      	movs	r3, #2
 801042a:	e7dc      	b.n	80103e6 <SUBGRF_GetCFO+0x3a>
 801042c:	0c0a0804 	.word	0x0c0a0804
 8010430:	01e84800 	.word	0x01e84800

08010434 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8010434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010438:	4770      	bx	lr

0801043a <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 801043a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801043e:	4770      	bx	lr

08010440 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 8010440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010444:	4770      	bx	lr

08010446 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8010446:	4770      	bx	lr

08010448 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8010448:	2000      	movs	r0, #0
 801044a:	4770      	bx	lr

0801044c <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 801044c:	2000      	movs	r0, #0
 801044e:	4770      	bx	lr

08010450 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8010450:	4770      	bx	lr

08010452 <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 8010452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010456:	4770      	bx	lr

08010458 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8010458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801045c:	4770      	bx	lr

0801045e <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801045e:	4770      	bx	lr

08010460 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8010460:	4770      	bx	lr

08010462 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8010462:	4770      	bx	lr

08010464 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8010464:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010466:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801046a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801046c:	4b1e      	ldr	r3, [pc, #120]	; (80104e8 <TRACE_AllocateBufer+0x84>)
 801046e:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8010472:	8a1a      	ldrh	r2, [r3, #16]
 8010474:	4596      	cmp	lr, r2
 8010476:	d011      	beq.n	801049c <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010478:	4596      	cmp	lr, r2
 801047a:	d921      	bls.n	80104c0 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801047c:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8010480:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8010482:	4283      	cmp	r3, r0
 8010484:	d81f      	bhi.n	80104c6 <TRACE_AllocateBufer+0x62>
 8010486:	4282      	cmp	r2, r0
 8010488:	d91d      	bls.n	80104c6 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801048a:	4b17      	ldr	r3, [pc, #92]	; (80104e8 <TRACE_AllocateBufer+0x84>)
 801048c:	2401      	movs	r4, #1
 801048e:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010490:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010494:	2400      	movs	r4, #0
 8010496:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010498:	4613      	mov	r3, r2
 801049a:	e014      	b.n	80104c6 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801049c:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 80104a0:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80104a2:	4298      	cmp	r0, r3
 80104a4:	d30f      	bcc.n	80104c6 <TRACE_AllocateBufer+0x62>
 80104a6:	4282      	cmp	r2, r0
 80104a8:	d90d      	bls.n	80104c6 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80104aa:	4b0f      	ldr	r3, [pc, #60]	; (80104e8 <TRACE_AllocateBufer+0x84>)
 80104ac:	2401      	movs	r4, #1
 80104ae:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80104b0:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80104b4:	f04f 0e00 	mov.w	lr, #0
 80104b8:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80104bc:	4613      	mov	r3, r2
 80104be:	e002      	b.n	80104c6 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80104c0:	eba2 020e 	sub.w	r2, r2, lr
 80104c4:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80104c6:	4283      	cmp	r3, r0
 80104c8:	d90a      	bls.n	80104e0 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80104ca:	4a07      	ldr	r2, [pc, #28]	; (80104e8 <TRACE_AllocateBufer+0x84>)
 80104cc:	8a53      	ldrh	r3, [r2, #18]
 80104ce:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80104d0:	4403      	add	r3, r0
 80104d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80104d6:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80104d8:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104da:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80104de:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 80104e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104e4:	e7f9      	b.n	80104da <TRACE_AllocateBufer+0x76>
 80104e6:	bf00      	nop
 80104e8:	20001784 	.word	0x20001784

080104ec <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104f0:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80104f2:	4a03      	ldr	r2, [pc, #12]	; (8010500 <TRACE_Lock+0x14>)
 80104f4:	8ad3      	ldrh	r3, [r2, #22]
 80104f6:	3301      	adds	r3, #1
 80104f8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104fa:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80104fe:	4770      	bx	lr
 8010500:	20001784 	.word	0x20001784

08010504 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010504:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010508:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 801050a:	4a03      	ldr	r2, [pc, #12]	; (8010518 <TRACE_UnLock+0x14>)
 801050c:	8ad3      	ldrh	r3, [r2, #22]
 801050e:	3b01      	subs	r3, #1
 8010510:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010512:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010516:	4770      	bx	lr
 8010518:	20001784 	.word	0x20001784

0801051c <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801051c:	4b02      	ldr	r3, [pc, #8]	; (8010528 <TRACE_IsLocked+0xc>)
 801051e:	8ad8      	ldrh	r0, [r3, #22]
}
 8010520:	3800      	subs	r0, #0
 8010522:	bf18      	it	ne
 8010524:	2001      	movne	r0, #1
 8010526:	4770      	bx	lr
 8010528:	20001784 	.word	0x20001784

0801052c <UTIL_ADV_TRACE_Init>:
{
 801052c:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801052e:	2218      	movs	r2, #24
 8010530:	2100      	movs	r1, #0
 8010532:	4807      	ldr	r0, [pc, #28]	; (8010550 <UTIL_ADV_TRACE_Init+0x24>)
 8010534:	f000 f98f 	bl	8010856 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8010538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801053c:	2100      	movs	r1, #0
 801053e:	4805      	ldr	r0, [pc, #20]	; (8010554 <UTIL_ADV_TRACE_Init+0x28>)
 8010540:	f000 f989 	bl	8010856 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8010544:	4b04      	ldr	r3, [pc, #16]	; (8010558 <UTIL_ADV_TRACE_Init+0x2c>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4804      	ldr	r0, [pc, #16]	; (801055c <UTIL_ADV_TRACE_Init+0x30>)
 801054a:	4798      	blx	r3
}
 801054c:	bd08      	pop	{r3, pc}
 801054e:	bf00      	nop
 8010550:	20001784 	.word	0x20001784
 8010554:	20001384 	.word	0x20001384
 8010558:	080113d0 	.word	0x080113d0
 801055c:	080106dd 	.word	0x080106dd

08010560 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8010560:	4b01      	ldr	r3, [pc, #4]	; (8010568 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8010562:	6058      	str	r0, [r3, #4]
}
 8010564:	4770      	bx	lr
 8010566:	bf00      	nop
 8010568:	20001784 	.word	0x20001784

0801056c <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801056c:	4b01      	ldr	r3, [pc, #4]	; (8010574 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801056e:	7218      	strb	r0, [r3, #8]
}
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	20001784 	.word	0x20001784

08010578 <TRACE_Send>:
{
 8010578:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801057a:	f3ef 8310 	mrs	r3, PRIMASK
 801057e:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8010580:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8010582:	f7ff ffcb 	bl	801051c <TRACE_IsLocked>
 8010586:	b118      	cbz	r0, 8010590 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010588:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801058c:	2000      	movs	r0, #0
}
 801058e:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8010590:	f7ff ffac 	bl	80104ec <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8010594:	4b1c      	ldr	r3, [pc, #112]	; (8010608 <TRACE_Send+0x90>)
 8010596:	8a1a      	ldrh	r2, [r3, #16]
 8010598:	8a5b      	ldrh	r3, [r3, #18]
 801059a:	429a      	cmp	r2, r3
 801059c:	d02e      	beq.n	80105fc <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801059e:	491a      	ldr	r1, [pc, #104]	; (8010608 <TRACE_Send+0x90>)
 80105a0:	7889      	ldrb	r1, [r1, #2]
 80105a2:	2901      	cmp	r1, #1
 80105a4:	d017      	beq.n	80105d6 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80105a6:	4a18      	ldr	r2, [pc, #96]	; (8010608 <TRACE_Send+0x90>)
 80105a8:	7892      	ldrb	r2, [r2, #2]
 80105aa:	b932      	cbnz	r2, 80105ba <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80105ac:	4a16      	ldr	r2, [pc, #88]	; (8010608 <TRACE_Send+0x90>)
 80105ae:	8a12      	ldrh	r2, [r2, #16]
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d91e      	bls.n	80105f2 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80105b4:	1a9b      	subs	r3, r3, r2
 80105b6:	4a14      	ldr	r2, [pc, #80]	; (8010608 <TRACE_Send+0x90>)
 80105b8:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80105ba:	4e13      	ldr	r6, [pc, #76]	; (8010608 <TRACE_Send+0x90>)
 80105bc:	8a33      	ldrh	r3, [r6, #16]
 80105be:	4d13      	ldr	r5, [pc, #76]	; (801060c <TRACE_Send+0x94>)
 80105c0:	441d      	add	r5, r3
 80105c2:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80105c6:	f7f0 ff87 	bl	80014d8 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80105ca:	4b11      	ldr	r3, [pc, #68]	; (8010610 <TRACE_Send+0x98>)
 80105cc:	68db      	ldr	r3, [r3, #12]
 80105ce:	8ab1      	ldrh	r1, [r6, #20]
 80105d0:	4628      	mov	r0, r5
 80105d2:	4798      	blx	r3
 80105d4:	e7db      	b.n	801058e <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80105d6:	480c      	ldr	r0, [pc, #48]	; (8010608 <TRACE_Send+0x90>)
 80105d8:	8801      	ldrh	r1, [r0, #0]
 80105da:	1a8a      	subs	r2, r1, r2
 80105dc:	b292      	uxth	r2, r2
 80105de:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80105e0:	2102      	movs	r1, #2
 80105e2:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80105e4:	2100      	movs	r1, #0
 80105e6:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80105e8:	2a00      	cmp	r2, #0
 80105ea:	d1dc      	bne.n	80105a6 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80105ec:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80105ee:	8201      	strh	r1, [r0, #16]
 80105f0:	e7d9      	b.n	80105a6 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80105f2:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80105f6:	4b04      	ldr	r3, [pc, #16]	; (8010608 <TRACE_Send+0x90>)
 80105f8:	829a      	strh	r2, [r3, #20]
 80105fa:	e7de      	b.n	80105ba <TRACE_Send+0x42>
      TRACE_UnLock();
 80105fc:	f7ff ff82 	bl	8010504 <TRACE_UnLock>
 8010600:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010604:	2000      	movs	r0, #0
}
 8010606:	e7c2      	b.n	801058e <TRACE_Send+0x16>
 8010608:	20001784 	.word	0x20001784
 801060c:	20001384 	.word	0x20001384
 8010610:	080113d0 	.word	0x080113d0

08010614 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010614:	b408      	push	{r3}
 8010616:	b530      	push	{r4, r5, lr}
 8010618:	b086      	sub	sp, #24
 801061a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 801061c:	2300      	movs	r3, #0
 801061e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8010622:	4b2b      	ldr	r3, [pc, #172]	; (80106d0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010624:	7a1b      	ldrb	r3, [r3, #8]
 8010626:	4283      	cmp	r3, r0
 8010628:	d34c      	bcc.n	80106c4 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801062a:	4b29      	ldr	r3, [pc, #164]	; (80106d0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	4399      	bics	r1, r3
 8010630:	d14b      	bne.n	80106ca <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8010632:	4b27      	ldr	r3, [pc, #156]	; (80106d0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	b123      	cbz	r3, 8010642 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8010638:	b11a      	cbz	r2, 8010642 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801063a:	f10d 0102 	add.w	r1, sp, #2
 801063e:	a801      	add	r0, sp, #4
 8010640:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8010642:	ab0a      	add	r3, sp, #40	; 0x28
 8010644:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010646:	4622      	mov	r2, r4
 8010648:	f44f 7100 	mov.w	r1, #512	; 0x200
 801064c:	4821      	ldr	r0, [pc, #132]	; (80106d4 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 801064e:	f000 fcc3 	bl	8010fd8 <tiny_vsnprintf_like>
 8010652:	b285      	uxth	r5, r0
  TRACE_Lock();
 8010654:	f7ff ff4a 	bl	80104ec <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8010658:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801065c:	18e8      	adds	r0, r5, r3
 801065e:	4669      	mov	r1, sp
 8010660:	b280      	uxth	r0, r0
 8010662:	f7ff feff 	bl	8010464 <TRACE_AllocateBufer>
 8010666:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801066a:	d026      	beq.n	80106ba <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 801066c:	2300      	movs	r3, #0
 801066e:	e00d      	b.n	801068c <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8010670:	f8bd 2000 	ldrh.w	r2, [sp]
 8010674:	f103 0118 	add.w	r1, r3, #24
 8010678:	4469      	add	r1, sp
 801067a:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 801067e:	4916      	ldr	r1, [pc, #88]	; (80106d8 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8010680:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8010682:	3201      	adds	r2, #1
 8010684:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8010688:	3301      	adds	r3, #1
 801068a:	b29b      	uxth	r3, r3
 801068c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010690:	429a      	cmp	r2, r3
 8010692:	d8ed      	bhi.n	8010670 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010694:	f8bd 0000 	ldrh.w	r0, [sp]
 8010698:	9b05      	ldr	r3, [sp, #20]
 801069a:	4622      	mov	r2, r4
 801069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80106a0:	4c0d      	ldr	r4, [pc, #52]	; (80106d8 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80106a2:	4420      	add	r0, r4
 80106a4:	f000 fc98 	bl	8010fd8 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80106a8:	f7ff ff2c 	bl	8010504 <TRACE_UnLock>
    return TRACE_Send();
 80106ac:	f7ff ff64 	bl	8010578 <TRACE_Send>
}
 80106b0:	b006      	add	sp, #24
 80106b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106b6:	b001      	add	sp, #4
 80106b8:	4770      	bx	lr
  TRACE_UnLock();
 80106ba:	f7ff ff23 	bl	8010504 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80106be:	f06f 0002 	mvn.w	r0, #2
 80106c2:	e7f5      	b.n	80106b0 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80106c4:	f06f 0004 	mvn.w	r0, #4
 80106c8:	e7f2      	b.n	80106b0 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80106ca:	f06f 0005 	mvn.w	r0, #5
 80106ce:	e7ef      	b.n	80106b0 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80106d0:	20001784 	.word	0x20001784
 80106d4:	2000179c 	.word	0x2000179c
 80106d8:	20001384 	.word	0x20001384

080106dc <TRACE_TxCpltCallback>:
{
 80106dc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106de:	f3ef 8310 	mrs	r3, PRIMASK
 80106e2:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80106e4:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80106e6:	4b26      	ldr	r3, [pc, #152]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 80106e8:	789b      	ldrb	r3, [r3, #2]
 80106ea:	2b02      	cmp	r3, #2
 80106ec:	d016      	beq.n	801071c <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80106ee:	4a24      	ldr	r2, [pc, #144]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 80106f0:	8a13      	ldrh	r3, [r2, #16]
 80106f2:	8a90      	ldrh	r0, [r2, #20]
 80106f4:	4403      	add	r3, r0
 80106f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80106fa:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80106fc:	4b20      	ldr	r3, [pc, #128]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 80106fe:	8a1a      	ldrh	r2, [r3, #16]
 8010700:	8a5b      	ldrh	r3, [r3, #18]
 8010702:	429a      	cmp	r2, r3
 8010704:	d003      	beq.n	801070e <TRACE_TxCpltCallback+0x32>
 8010706:	481e      	ldr	r0, [pc, #120]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 8010708:	8ac0      	ldrh	r0, [r0, #22]
 801070a:	2801      	cmp	r0, #1
 801070c:	d00b      	beq.n	8010726 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801070e:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8010712:	f7f0 fee7 	bl	80014e4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8010716:	f7ff fef5 	bl	8010504 <TRACE_UnLock>
}
 801071a:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801071c:	4b18      	ldr	r3, [pc, #96]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 801071e:	2200      	movs	r2, #0
 8010720:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010722:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8010724:	e7ea      	b.n	80106fc <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010726:	4816      	ldr	r0, [pc, #88]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 8010728:	7880      	ldrb	r0, [r0, #2]
 801072a:	2801      	cmp	r0, #1
 801072c:	d014      	beq.n	8010758 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801072e:	4a14      	ldr	r2, [pc, #80]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 8010730:	7892      	ldrb	r2, [r2, #2]
 8010732:	b932      	cbnz	r2, 8010742 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010734:	4a12      	ldr	r2, [pc, #72]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 8010736:	8a12      	ldrh	r2, [r2, #16]
 8010738:	4293      	cmp	r3, r2
 801073a:	d91b      	bls.n	8010774 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801073c:	1a9b      	subs	r3, r3, r2
 801073e:	4a10      	ldr	r2, [pc, #64]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 8010740:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010742:	4b0f      	ldr	r3, [pc, #60]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 8010744:	8a1a      	ldrh	r2, [r3, #16]
 8010746:	480f      	ldr	r0, [pc, #60]	; (8010784 <TRACE_TxCpltCallback+0xa8>)
 8010748:	4410      	add	r0, r2
 801074a:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801074e:	4a0e      	ldr	r2, [pc, #56]	; (8010788 <TRACE_TxCpltCallback+0xac>)
 8010750:	68d2      	ldr	r2, [r2, #12]
 8010752:	8a99      	ldrh	r1, [r3, #20]
 8010754:	4790      	blx	r2
 8010756:	e7e0      	b.n	801071a <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8010758:	4c09      	ldr	r4, [pc, #36]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 801075a:	8820      	ldrh	r0, [r4, #0]
 801075c:	1a82      	subs	r2, r0, r2
 801075e:	b292      	uxth	r2, r2
 8010760:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010762:	2002      	movs	r0, #2
 8010764:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010766:	2000      	movs	r0, #0
 8010768:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801076a:	2a00      	cmp	r2, #0
 801076c:	d1df      	bne.n	801072e <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801076e:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010770:	8220      	strh	r0, [r4, #16]
 8010772:	e7dc      	b.n	801072e <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010774:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8010778:	4b01      	ldr	r3, [pc, #4]	; (8010780 <TRACE_TxCpltCallback+0xa4>)
 801077a:	829a      	strh	r2, [r3, #20]
 801077c:	e7e1      	b.n	8010742 <TRACE_TxCpltCallback+0x66>
 801077e:	bf00      	nop
 8010780:	20001784 	.word	0x20001784
 8010784:	20001384 	.word	0x20001384
 8010788:	080113d0 	.word	0x080113d0

0801078c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801078c:	2300      	movs	r3, #0
 801078e:	4a02      	ldr	r2, [pc, #8]	; (8010798 <UTIL_LPM_Init+0xc>)
 8010790:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8010792:	4a02      	ldr	r2, [pc, #8]	; (801079c <UTIL_LPM_Init+0x10>)
 8010794:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010796:	4770      	bx	lr
 8010798:	200019a0 	.word	0x200019a0
 801079c:	2000199c 	.word	0x2000199c

080107a0 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107a0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80107a4:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80107a6:	b141      	cbz	r1, 80107ba <UTIL_LPM_SetStopMode+0x1a>
 80107a8:	2901      	cmp	r1, #1
 80107aa:	d103      	bne.n	80107b4 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80107ac:	4906      	ldr	r1, [pc, #24]	; (80107c8 <UTIL_LPM_SetStopMode+0x28>)
 80107ae:	680a      	ldr	r2, [r1, #0]
 80107b0:	4302      	orrs	r2, r0
 80107b2:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107b4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80107b8:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80107ba:	4903      	ldr	r1, [pc, #12]	; (80107c8 <UTIL_LPM_SetStopMode+0x28>)
 80107bc:	680a      	ldr	r2, [r1, #0]
 80107be:	ea22 0200 	bic.w	r2, r2, r0
 80107c2:	600a      	str	r2, [r1, #0]
      break;
 80107c4:	e7f6      	b.n	80107b4 <UTIL_LPM_SetStopMode+0x14>
 80107c6:	bf00      	nop
 80107c8:	200019a0 	.word	0x200019a0

080107cc <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107cc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80107d0:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80107d2:	b141      	cbz	r1, 80107e6 <UTIL_LPM_SetOffMode+0x1a>
 80107d4:	2901      	cmp	r1, #1
 80107d6:	d103      	bne.n	80107e0 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80107d8:	4906      	ldr	r1, [pc, #24]	; (80107f4 <UTIL_LPM_SetOffMode+0x28>)
 80107da:	680a      	ldr	r2, [r1, #0]
 80107dc:	4302      	orrs	r2, r0
 80107de:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107e0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80107e4:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80107e6:	4903      	ldr	r1, [pc, #12]	; (80107f4 <UTIL_LPM_SetOffMode+0x28>)
 80107e8:	680a      	ldr	r2, [r1, #0]
 80107ea:	ea22 0200 	bic.w	r2, r2, r0
 80107ee:	600a      	str	r2, [r1, #0]
      break;
 80107f0:	e7f6      	b.n	80107e0 <UTIL_LPM_SetOffMode+0x14>
 80107f2:	bf00      	nop
 80107f4:	2000199c 	.word	0x2000199c

080107f8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80107f8:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80107fe:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8010800:	4b0c      	ldr	r3, [pc, #48]	; (8010834 <UTIL_LPM_EnterLowPower+0x3c>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	b13b      	cbz	r3, 8010816 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8010806:	4d0c      	ldr	r5, [pc, #48]	; (8010838 <UTIL_LPM_EnterLowPower+0x40>)
 8010808:	682b      	ldr	r3, [r5, #0]
 801080a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801080c:	686b      	ldr	r3, [r5, #4]
 801080e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010810:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8010814:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8010816:	4b09      	ldr	r3, [pc, #36]	; (801083c <UTIL_LPM_EnterLowPower+0x44>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	b12b      	cbz	r3, 8010828 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 801081c:	4d06      	ldr	r5, [pc, #24]	; (8010838 <UTIL_LPM_EnterLowPower+0x40>)
 801081e:	68ab      	ldr	r3, [r5, #8]
 8010820:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8010822:	68eb      	ldr	r3, [r5, #12]
 8010824:	4798      	blx	r3
 8010826:	e7f3      	b.n	8010810 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8010828:	4d03      	ldr	r5, [pc, #12]	; (8010838 <UTIL_LPM_EnterLowPower+0x40>)
 801082a:	692b      	ldr	r3, [r5, #16]
 801082c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801082e:	696b      	ldr	r3, [r5, #20]
 8010830:	4798      	blx	r3
 8010832:	e7ed      	b.n	8010810 <UTIL_LPM_EnterLowPower+0x18>
 8010834:	200019a0 	.word	0x200019a0
 8010838:	08011360 	.word	0x08011360
 801083c:	2000199c 	.word	0x2000199c

08010840 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8010840:	e004      	b.n	801084c <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8010842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010846:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 801084a:	461a      	mov	r2, r3
 801084c:	1e53      	subs	r3, r2, #1
 801084e:	b29b      	uxth	r3, r3
 8010850:	2a00      	cmp	r2, #0
 8010852:	d1f6      	bne.n	8010842 <UTIL_MEM_cpy_8+0x2>
    }
}
 8010854:	4770      	bx	lr

08010856 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8010856:	e002      	b.n	801085e <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8010858:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 801085c:	461a      	mov	r2, r3
 801085e:	1e53      	subs	r3, r2, #1
 8010860:	b29b      	uxth	r3, r3
 8010862:	2a00      	cmp	r2, #0
 8010864:	d1f8      	bne.n	8010858 <UTIL_MEM_set_8+0x2>
  }
}
 8010866:	4770      	bx	lr

08010868 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010868:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801086c:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 801086e:	4a06      	ldr	r2, [pc, #24]	; (8010888 <UTIL_SEQ_SetTask+0x20>)
 8010870:	6813      	ldr	r3, [r2, #0]
 8010872:	4303      	orrs	r3, r0
 8010874:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010876:	4a05      	ldr	r2, [pc, #20]	; (801088c <UTIL_SEQ_SetTask+0x24>)
 8010878:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 801087c:	4303      	orrs	r3, r0
 801087e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010882:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8010886:	4770      	bx	lr
 8010888:	20001a40 	.word	0x20001a40
 801088c:	20001a30 	.word	0x20001a30

08010890 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010890:	4770      	bx	lr

08010892 <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010892:	4770      	bx	lr

08010894 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8010894:	0c03      	lsrs	r3, r0, #16
 8010896:	041b      	lsls	r3, r3, #16
 8010898:	b9b3      	cbnz	r3, 80108c8 <SEQ_BitPosition+0x34>
 801089a:	0400      	lsls	r0, r0, #16
 801089c:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801089e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80108a2:	d102      	bne.n	80108aa <SEQ_BitPosition+0x16>
 80108a4:	3308      	adds	r3, #8
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80108aa:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80108ae:	d102      	bne.n	80108b6 <SEQ_BitPosition+0x22>
 80108b0:	3304      	adds	r3, #4
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80108b6:	0f00      	lsrs	r0, r0, #28
 80108b8:	4a04      	ldr	r2, [pc, #16]	; (80108cc <SEQ_BitPosition+0x38>)
 80108ba:	5c10      	ldrb	r0, [r2, r0]
 80108bc:	4418      	add	r0, r3
 80108be:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 80108c0:	f1c0 001f 	rsb	r0, r0, #31
}
 80108c4:	b2c0      	uxtb	r0, r0
 80108c6:	4770      	bx	lr
  uint8_t n = 0U;
 80108c8:	2300      	movs	r3, #0
 80108ca:	e7e8      	b.n	801089e <SEQ_BitPosition+0xa>
 80108cc:	08011fd8 	.word	0x08011fd8

080108d0 <UTIL_SEQ_Run>:
{
 80108d0:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 80108d2:	4b3b      	ldr	r3, [pc, #236]	; (80109c0 <UTIL_SEQ_Run+0xf0>)
 80108d4:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 80108d6:	4020      	ands	r0, r4
 80108d8:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80108da:	e03f      	b.n	801095c <UTIL_SEQ_Run+0x8c>
      counter++;
 80108dc:	3301      	adds	r3, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80108de:	4839      	ldr	r0, [pc, #228]	; (80109c4 <UTIL_SEQ_Run+0xf4>)
 80108e0:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 80108e4:	4008      	ands	r0, r1
 80108e6:	4010      	ands	r0, r2
 80108e8:	d0f8      	beq.n	80108dc <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80108ea:	4a36      	ldr	r2, [pc, #216]	; (80109c4 <UTIL_SEQ_Run+0xf4>)
 80108ec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80108f0:	6852      	ldr	r2, [r2, #4]
 80108f2:	4210      	tst	r0, r2
 80108f4:	d105      	bne.n	8010902 <UTIL_SEQ_Run+0x32>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80108f6:	4a33      	ldr	r2, [pc, #204]	; (80109c4 <UTIL_SEQ_Run+0xf4>)
 80108f8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80108fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010900:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010902:	4d30      	ldr	r5, [pc, #192]	; (80109c4 <UTIL_SEQ_Run+0xf4>)
 8010904:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010908:	686e      	ldr	r6, [r5, #4]
 801090a:	4030      	ands	r0, r6
 801090c:	f7ff ffc2 	bl	8010894 <SEQ_BitPosition>
 8010910:	4a2d      	ldr	r2, [pc, #180]	; (80109c8 <UTIL_SEQ_Run+0xf8>)
 8010912:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010914:	2301      	movs	r3, #1
 8010916:	fa03 f000 	lsl.w	r0, r3, r0
 801091a:	ea26 0600 	bic.w	r6, r6, r0
 801091e:	606e      	str	r6, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010920:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010924:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010926:	6812      	ldr	r2, [r2, #0]
 8010928:	4093      	lsls	r3, r2
 801092a:	43dd      	mvns	r5, r3
 801092c:	4927      	ldr	r1, [pc, #156]	; (80109cc <UTIL_SEQ_Run+0xfc>)
 801092e:	680a      	ldr	r2, [r1, #0]
 8010930:	ea22 0203 	bic.w	r2, r2, r3
 8010934:	600a      	str	r2, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010936:	2302      	movs	r3, #2
 8010938:	e006      	b.n	8010948 <UTIL_SEQ_Run+0x78>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801093a:	3b01      	subs	r3, #1
 801093c:	4921      	ldr	r1, [pc, #132]	; (80109c4 <UTIL_SEQ_Run+0xf4>)
 801093e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8010942:	402a      	ands	r2, r5
 8010944:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1f6      	bne.n	801093a <UTIL_SEQ_Run+0x6a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801094c:	f380 8810 	msr	PRIMASK, r0
    TaskCb[CurrentTaskIdx]( );
 8010950:	4b1d      	ldr	r3, [pc, #116]	; (80109c8 <UTIL_SEQ_Run+0xf8>)
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	4b1e      	ldr	r3, [pc, #120]	; (80109d0 <UTIL_SEQ_Run+0x100>)
 8010956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801095a:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801095c:	4b1d      	ldr	r3, [pc, #116]	; (80109d4 <UTIL_SEQ_Run+0x104>)
 801095e:	6819      	ldr	r1, [r3, #0]
 8010960:	4b1a      	ldr	r3, [pc, #104]	; (80109cc <UTIL_SEQ_Run+0xfc>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	400b      	ands	r3, r1
 8010966:	4a16      	ldr	r2, [pc, #88]	; (80109c0 <UTIL_SEQ_Run+0xf0>)
 8010968:	6812      	ldr	r2, [r2, #0]
 801096a:	4213      	tst	r3, r2
 801096c:	d005      	beq.n	801097a <UTIL_SEQ_Run+0xaa>
 801096e:	4b1a      	ldr	r3, [pc, #104]	; (80109d8 <UTIL_SEQ_Run+0x108>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	481a      	ldr	r0, [pc, #104]	; (80109dc <UTIL_SEQ_Run+0x10c>)
 8010974:	6800      	ldr	r0, [r0, #0]
 8010976:	4003      	ands	r3, r0
 8010978:	d0b1      	beq.n	80108de <UTIL_SEQ_Run+0xe>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801097a:	4b13      	ldr	r3, [pc, #76]	; (80109c8 <UTIL_SEQ_Run+0xf8>)
 801097c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010980:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010982:	f7ff ff85 	bl	8010890 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010986:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801098a:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801098c:	4b0f      	ldr	r3, [pc, #60]	; (80109cc <UTIL_SEQ_Run+0xfc>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4a10      	ldr	r2, [pc, #64]	; (80109d4 <UTIL_SEQ_Run+0x104>)
 8010992:	6812      	ldr	r2, [r2, #0]
 8010994:	4013      	ands	r3, r2
 8010996:	4a0a      	ldr	r2, [pc, #40]	; (80109c0 <UTIL_SEQ_Run+0xf0>)
 8010998:	6812      	ldr	r2, [r2, #0]
 801099a:	4213      	tst	r3, r2
 801099c:	d105      	bne.n	80109aa <UTIL_SEQ_Run+0xda>
 801099e:	4b0e      	ldr	r3, [pc, #56]	; (80109d8 <UTIL_SEQ_Run+0x108>)
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	4b0e      	ldr	r3, [pc, #56]	; (80109dc <UTIL_SEQ_Run+0x10c>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	421a      	tst	r2, r3
 80109a8:	d006      	beq.n	80109b8 <UTIL_SEQ_Run+0xe8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109aa:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80109ae:	f7ff ff70 	bl	8010892 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80109b2:	4b03      	ldr	r3, [pc, #12]	; (80109c0 <UTIL_SEQ_Run+0xf0>)
 80109b4:	601c      	str	r4, [r3, #0]
}
 80109b6:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 80109b8:	f7f0 fd0c 	bl	80013d4 <UTIL_SEQ_Idle>
 80109bc:	e7f5      	b.n	80109aa <UTIL_SEQ_Run+0xda>
 80109be:	bf00      	nop
 80109c0:	200000d4 	.word	0x200000d4
 80109c4:	20001a30 	.word	0x20001a30
 80109c8:	200019a4 	.word	0x200019a4
 80109cc:	20001a40 	.word	0x20001a40
 80109d0:	200019b0 	.word	0x200019b0
 80109d4:	200000d8 	.word	0x200000d8
 80109d8:	200019a8 	.word	0x200019a8
 80109dc:	200019ac 	.word	0x200019ac

080109e0 <UTIL_SEQ_RegTask>:
{
 80109e0:	b538      	push	{r3, r4, r5, lr}
 80109e2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109e4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80109e8:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80109ea:	f7ff ff53 	bl	8010894 <SEQ_BitPosition>
 80109ee:	4b03      	ldr	r3, [pc, #12]	; (80109fc <UTIL_SEQ_RegTask+0x1c>)
 80109f0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109f4:	f385 8810 	msr	PRIMASK, r5
}
 80109f8:	bd38      	pop	{r3, r4, r5, pc}
 80109fa:	bf00      	nop
 80109fc:	200019b0 	.word	0x200019b0

08010a00 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8010a00:	b082      	sub	sp, #8
 8010a02:	b082      	sub	sp, #8
 8010a04:	f10d 0c08 	add.w	ip, sp, #8
 8010a08:	e90c 0006 	stmdb	ip, {r1, r2}
 8010a0c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8010a0e:	2200      	movs	r2, #0
 8010a10:	6002      	str	r2, [r0, #0]
 8010a12:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8010a14:	440b      	add	r3, r1
 8010a16:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8010a18:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010a1c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010a20:	440a      	add	r2, r1
 8010a22:	b291      	uxth	r1, r2
 8010a24:	b212      	sxth	r2, r2
 8010a26:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8010a28:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010a2c:	db04      	blt.n	8010a38 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8010a2e:	3301      	adds	r3, #1
 8010a30:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8010a32:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8010a36:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8010a38:	b002      	add	sp, #8
 8010a3a:	b002      	add	sp, #8
 8010a3c:	4770      	bx	lr

08010a3e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8010a3e:	b082      	sub	sp, #8
 8010a40:	b082      	sub	sp, #8
 8010a42:	f10d 0c08 	add.w	ip, sp, #8
 8010a46:	e90c 0006 	stmdb	ip, {r1, r2}
 8010a4a:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	6002      	str	r2, [r0, #0]
 8010a50:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8010a52:	1acb      	subs	r3, r1, r3
 8010a54:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8010a56:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010a5a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010a5e:	1a52      	subs	r2, r2, r1
 8010a60:	b291      	uxth	r1, r2
 8010a62:	b212      	sxth	r2, r2
 8010a64:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8010a66:	2a00      	cmp	r2, #0
 8010a68:	db02      	blt.n	8010a70 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8010a6a:	b002      	add	sp, #8
 8010a6c:	b002      	add	sp, #8
 8010a6e:	4770      	bx	lr
    c.Seconds--;
 8010a70:	3b01      	subs	r3, #1
 8010a72:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8010a74:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8010a78:	8081      	strh	r1, [r0, #4]
  return c;
 8010a7a:	e7f6      	b.n	8010a6a <SysTimeSub+0x2c>

08010a7c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8010a7c:	b530      	push	{r4, r5, lr}
 8010a7e:	b089      	sub	sp, #36	; 0x24
 8010a80:	ac02      	add	r4, sp, #8
 8010a82:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010a86:	2300      	movs	r3, #0
 8010a88:	9304      	str	r3, [sp, #16]
 8010a8a:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010a8e:	4d0b      	ldr	r5, [pc, #44]	; (8010abc <SysTimeSet+0x40>)
 8010a90:	692b      	ldr	r3, [r5, #16]
 8010a92:	a805      	add	r0, sp, #20
 8010a94:	4798      	blx	r3
 8010a96:	4603      	mov	r3, r0
 8010a98:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8010a9a:	9a05      	ldr	r2, [sp, #20]
 8010a9c:	9200      	str	r2, [sp, #0]
 8010a9e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010aa2:	a806      	add	r0, sp, #24
 8010aa4:	f7ff ffcb 	bl	8010a3e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8010aa8:	682b      	ldr	r3, [r5, #0]
 8010aaa:	9806      	ldr	r0, [sp, #24]
 8010aac:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8010aae:	68ab      	ldr	r3, [r5, #8]
 8010ab0:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010ab4:	4798      	blx	r3
}
 8010ab6:	b009      	add	sp, #36	; 0x24
 8010ab8:	bd30      	pop	{r4, r5, pc}
 8010aba:	bf00      	nop
 8010abc:	08011390 	.word	0x08011390

08010ac0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8010ac0:	b530      	push	{r4, r5, lr}
 8010ac2:	b087      	sub	sp, #28
 8010ac4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	9304      	str	r3, [sp, #16]
 8010aca:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8010ace:	6003      	str	r3, [r0, #0]
 8010ad0:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010ad2:	4d0b      	ldr	r5, [pc, #44]	; (8010b00 <SysTimeGet+0x40>)
 8010ad4:	692b      	ldr	r3, [r5, #16]
 8010ad6:	a805      	add	r0, sp, #20
 8010ad8:	4798      	blx	r3
 8010ada:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010adc:	68eb      	ldr	r3, [r5, #12]
 8010ade:	4798      	blx	r3
 8010ae0:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010ae4:	686b      	ldr	r3, [r5, #4]
 8010ae6:	4798      	blx	r3
 8010ae8:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8010aea:	9b05      	ldr	r3, [sp, #20]
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	9b04      	ldr	r3, [sp, #16]
 8010af0:	aa02      	add	r2, sp, #8
 8010af2:	ca06      	ldmia	r2, {r1, r2}
 8010af4:	4620      	mov	r0, r4
 8010af6:	f7ff ff83 	bl	8010a00 <SysTimeAdd>

  return sysTime;
}
 8010afa:	4620      	mov	r0, r4
 8010afc:	b007      	add	sp, #28
 8010afe:	bd30      	pop	{r4, r5, pc}
 8010b00:	08011390 	.word	0x08011390

08010b04 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8010b04:	b530      	push	{r4, r5, lr}
 8010b06:	b083      	sub	sp, #12
 8010b08:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	9300      	str	r3, [sp, #0]
 8010b0e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010b12:	4b06      	ldr	r3, [pc, #24]	; (8010b2c <SysTimeGetMcuTime+0x28>)
 8010b14:	691b      	ldr	r3, [r3, #16]
 8010b16:	466d      	mov	r5, sp
 8010b18:	a801      	add	r0, sp, #4
 8010b1a:	4798      	blx	r3
 8010b1c:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 8010b1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b22:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8010b26:	4620      	mov	r0, r4
 8010b28:	b003      	add	sp, #12
 8010b2a:	bd30      	pop	{r4, r5, pc}
 8010b2c:	08011390 	.word	0x08011390

08010b30 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8010b30:	b530      	push	{r4, r5, lr}
 8010b32:	b089      	sub	sp, #36	; 0x24
 8010b34:	ac02      	add	r4, sp, #8
 8010b36:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010b3a:	4d0c      	ldr	r5, [pc, #48]	; (8010b6c <SysTimeToMs+0x3c>)
 8010b3c:	68eb      	ldr	r3, [r5, #12]
 8010b3e:	4798      	blx	r3
 8010b40:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010b44:	686b      	ldr	r3, [r5, #4]
 8010b46:	4798      	blx	r3
 8010b48:	4603      	mov	r3, r0
 8010b4a:	9006      	str	r0, [sp, #24]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8010b4c:	9a07      	ldr	r2, [sp, #28]
 8010b4e:	9200      	str	r2, [sp, #0]
 8010b50:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010b54:	a804      	add	r0, sp, #16
 8010b56:	f7ff ff72 	bl	8010a3e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8010b5a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8010b5e:	9a04      	ldr	r2, [sp, #16]
 8010b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010b64:	fb00 3002 	mla	r0, r0, r2, r3
 8010b68:	b009      	add	sp, #36	; 0x24
 8010b6a:	bd30      	pop	{r4, r5, pc}
 8010b6c:	08011390 	.word	0x08011390

08010b70 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8010b70:	b530      	push	{r4, r5, lr}
 8010b72:	b087      	sub	sp, #28
 8010b74:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8010b76:	4b12      	ldr	r3, [pc, #72]	; (8010bc0 <SysTimeFromMs+0x50>)
 8010b78:	fba3 2301 	umull	r2, r3, r3, r1
 8010b7c:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8010b7e:	9304      	str	r3, [sp, #16]
 8010b80:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8010b84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010b88:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8010b8c:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8010b90:	2300      	movs	r3, #0
 8010b92:	9302      	str	r3, [sp, #8]
 8010b94:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010b96:	4d0b      	ldr	r5, [pc, #44]	; (8010bc4 <SysTimeFromMs+0x54>)
 8010b98:	68eb      	ldr	r3, [r5, #12]
 8010b9a:	4798      	blx	r3
 8010b9c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010ba0:	686b      	ldr	r3, [r5, #4]
 8010ba2:	4798      	blx	r3
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8010ba8:	9a03      	ldr	r2, [sp, #12]
 8010baa:	9200      	str	r2, [sp, #0]
 8010bac:	aa06      	add	r2, sp, #24
 8010bae:	e912 0006 	ldmdb	r2, {r1, r2}
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	f7ff ff24 	bl	8010a00 <SysTimeAdd>
}
 8010bb8:	4620      	mov	r0, r4
 8010bba:	b007      	add	sp, #28
 8010bbc:	bd30      	pop	{r4, r5, pc}
 8010bbe:	bf00      	nop
 8010bc0:	10624dd3 	.word	0x10624dd3
 8010bc4:	08011390 	.word	0x08011390

08010bc8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8010bc8:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8010bca:	4b03      	ldr	r3, [pc, #12]	; (8010bd8 <UTIL_TIMER_Init+0x10>)
 8010bcc:	2200      	movs	r2, #0
 8010bce:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8010bd0:	4b02      	ldr	r3, [pc, #8]	; (8010bdc <UTIL_TIMER_Init+0x14>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4798      	blx	r3
}
 8010bd6:	bd08      	pop	{r3, pc}
 8010bd8:	20001a44 	.word	0x20001a44
 8010bdc:	080113a4 	.word	0x080113a4

08010be0 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8010be0:	b1a8      	cbz	r0, 8010c0e <UTIL_TIMER_Create+0x2e>
{
 8010be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010be4:	4617      	mov	r7, r2
 8010be6:	461e      	mov	r6, r3
 8010be8:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8010bea:	b193      	cbz	r3, 8010c12 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8010bec:	2500      	movs	r5, #0
 8010bee:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010bf0:	4b09      	ldr	r3, [pc, #36]	; (8010c18 <UTIL_TIMER_Create+0x38>)
 8010bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf4:	4608      	mov	r0, r1
 8010bf6:	4798      	blx	r3
 8010bf8:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8010bfa:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8010bfc:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010bfe:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8010c00:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8010c02:	9b06      	ldr	r3, [sp, #24]
 8010c04:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8010c06:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8010c08:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8010c0a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8010c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8010c0e:	2001      	movs	r0, #1
}
 8010c10:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8010c12:	2001      	movs	r0, #1
 8010c14:	e7fa      	b.n	8010c0c <UTIL_TIMER_Create+0x2c>
 8010c16:	bf00      	nop
 8010c18:	080113a4 	.word	0x080113a4

08010c1c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8010c1c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8010c1e:	4c03      	ldr	r4, [pc, #12]	; (8010c2c <UTIL_TIMER_GetCurrentTime+0x10>)
 8010c20:	69e3      	ldr	r3, [r4, #28]
 8010c22:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8010c24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010c26:	4798      	blx	r3
}
 8010c28:	bd10      	pop	{r4, pc}
 8010c2a:	bf00      	nop
 8010c2c:	080113a4 	.word	0x080113a4

08010c30 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8010c30:	b570      	push	{r4, r5, r6, lr}
 8010c32:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010c34:	4d05      	ldr	r5, [pc, #20]	; (8010c4c <UTIL_TIMER_GetElapsedTime+0x1c>)
 8010c36:	69eb      	ldr	r3, [r5, #28]
 8010c38:	4798      	blx	r3
 8010c3a:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8010c3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c3e:	4630      	mov	r0, r6
 8010c40:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8010c42:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010c44:	1a20      	subs	r0, r4, r0
 8010c46:	4798      	blx	r3
}
 8010c48:	bd70      	pop	{r4, r5, r6, pc}
 8010c4a:	bf00      	nop
 8010c4c:	080113a4 	.word	0x080113a4

08010c50 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010c50:	4b05      	ldr	r3, [pc, #20]	; (8010c68 <TimerExists+0x18>)
 8010c52:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8010c54:	e000      	b.n	8010c58 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8010c56:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8010c58:	b11b      	cbz	r3, 8010c62 <TimerExists+0x12>
    if( cur == TimerObject )
 8010c5a:	4283      	cmp	r3, r0
 8010c5c:	d1fb      	bne.n	8010c56 <TimerExists+0x6>
      return true;
 8010c5e:	2001      	movs	r0, #1
  }
  return false;
}
 8010c60:	4770      	bx	lr
  return false;
 8010c62:	2000      	movs	r0, #0
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	20001a44 	.word	0x20001a44

08010c6c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c6e:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010c70:	4e09      	ldr	r6, [pc, #36]	; (8010c98 <TimerSetTimeout+0x2c>)
 8010c72:	6a33      	ldr	r3, [r6, #32]
 8010c74:	4798      	blx	r3
 8010c76:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8010c78:	2301      	movs	r3, #1
 8010c7a:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010c7c:	6827      	ldr	r7, [r4, #0]
 8010c7e:	69b6      	ldr	r6, [r6, #24]
 8010c80:	47b0      	blx	r6
 8010c82:	4428      	add	r0, r5
 8010c84:	4287      	cmp	r7, r0
 8010c86:	d202      	bcs.n	8010c8e <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010c88:	47b0      	blx	r6
 8010c8a:	4428      	add	r0, r5
 8010c8c:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8010c8e:	4b02      	ldr	r3, [pc, #8]	; (8010c98 <TimerSetTimeout+0x2c>)
 8010c90:	689b      	ldr	r3, [r3, #8]
 8010c92:	6820      	ldr	r0, [r4, #0]
 8010c94:	4798      	blx	r3
}
 8010c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c98:	080113a4 	.word	0x080113a4

08010c9c <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8010c9c:	b368      	cbz	r0, 8010cfa <UTIL_TIMER_Stop+0x5e>
{
 8010c9e:	b510      	push	{r4, lr}
 8010ca0:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ca2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010ca6:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010ca8:	4b15      	ldr	r3, [pc, #84]	; (8010d00 <UTIL_TIMER_Stop+0x64>)
 8010caa:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8010cac:	2301      	movs	r3, #1
 8010cae:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8010cb0:	b1e1      	cbz	r1, 8010cec <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010cb6:	4288      	cmp	r0, r1
 8010cb8:	d006      	beq.n	8010cc8 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8010cba:	460b      	mov	r3, r1
        while( cur != NULL )
 8010cbc:	b1b3      	cbz	r3, 8010cec <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d011      	beq.n	8010ce6 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8010cc2:	4619      	mov	r1, r3
            cur = cur->Next;
 8010cc4:	695b      	ldr	r3, [r3, #20]
 8010cc6:	e7f9      	b.n	8010cbc <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8010cc8:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8010cca:	6948      	ldr	r0, [r1, #20]
 8010ccc:	b120      	cbz	r0, 8010cd8 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8010cce:	4b0c      	ldr	r3, [pc, #48]	; (8010d00 <UTIL_TIMER_Stop+0x64>)
 8010cd0:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8010cd2:	f7ff ffcb 	bl	8010c6c <TimerSetTimeout>
 8010cd6:	e009      	b.n	8010cec <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8010cd8:	4b0a      	ldr	r3, [pc, #40]	; (8010d04 <UTIL_TIMER_Stop+0x68>)
 8010cda:	68db      	ldr	r3, [r3, #12]
 8010cdc:	4798      	blx	r3
            TimerListHead = NULL;
 8010cde:	4b08      	ldr	r3, [pc, #32]	; (8010d00 <UTIL_TIMER_Stop+0x64>)
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	601a      	str	r2, [r3, #0]
 8010ce4:	e002      	b.n	8010cec <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8010ce6:	695b      	ldr	r3, [r3, #20]
 8010ce8:	b123      	cbz	r3, 8010cf4 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8010cea:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010cec:	f384 8810 	msr	PRIMASK, r4
}
 8010cf0:	2000      	movs	r0, #0
}
 8010cf2:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	614b      	str	r3, [r1, #20]
 8010cf8:	e7f8      	b.n	8010cec <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8010cfa:	2001      	movs	r0, #1
}
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop
 8010d00:	20001a44 	.word	0x20001a44
 8010d04:	080113a4 	.word	0x080113a4

08010d08 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010d08:	4b09      	ldr	r3, [pc, #36]	; (8010d30 <TimerInsertTimer+0x28>)
 8010d0a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8010d0c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8010d0e:	e001      	b.n	8010d14 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8010d10:	461a      	mov	r2, r3
        next = next->Next;
 8010d12:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8010d14:	6951      	ldr	r1, [r2, #20]
 8010d16:	b139      	cbz	r1, 8010d28 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8010d18:	6819      	ldr	r1, [r3, #0]
 8010d1a:	f8d0 c000 	ldr.w	ip, [r0]
 8010d1e:	458c      	cmp	ip, r1
 8010d20:	d8f6      	bhi.n	8010d10 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8010d22:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8010d24:	6143      	str	r3, [r0, #20]
        return;
 8010d26:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8010d28:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	6143      	str	r3, [r0, #20]
}
 8010d2e:	4770      	bx	lr
 8010d30:	20001a44 	.word	0x20001a44

08010d34 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8010d34:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010d36:	4b05      	ldr	r3, [pc, #20]	; (8010d4c <TimerInsertNewHeadTimer+0x18>)
 8010d38:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8010d3a:	b10b      	cbz	r3, 8010d40 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8010d40:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8010d42:	4b02      	ldr	r3, [pc, #8]	; (8010d4c <TimerInsertNewHeadTimer+0x18>)
 8010d44:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8010d46:	f7ff ff91 	bl	8010c6c <TimerSetTimeout>
}
 8010d4a:	bd08      	pop	{r3, pc}
 8010d4c:	20001a44 	.word	0x20001a44

08010d50 <UTIL_TIMER_Start>:
{
 8010d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8010d52:	2800      	cmp	r0, #0
 8010d54:	d036      	beq.n	8010dc4 <UTIL_TIMER_Start+0x74>
 8010d56:	4604      	mov	r4, r0
 8010d58:	f7ff ff7a 	bl	8010c50 <TimerExists>
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	d134      	bne.n	8010dca <UTIL_TIMER_Start+0x7a>
 8010d60:	7a65      	ldrb	r5, [r4, #9]
 8010d62:	2d00      	cmp	r5, #0
 8010d64:	d133      	bne.n	8010dce <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d66:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010d6a:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8010d6c:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010d6e:	4b19      	ldr	r3, [pc, #100]	; (8010dd4 <UTIL_TIMER_Start+0x84>)
 8010d70:	6a1b      	ldr	r3, [r3, #32]
 8010d72:	4798      	blx	r3
    if( ticks < minValue )
 8010d74:	4287      	cmp	r7, r0
 8010d76:	d300      	bcc.n	8010d7a <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8010d78:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8010d7a:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8010d80:	2201      	movs	r2, #1
 8010d82:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010d84:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8010d86:	4b14      	ldr	r3, [pc, #80]	; (8010dd8 <UTIL_TIMER_Start+0x88>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	b183      	cbz	r3, 8010dae <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8010d8c:	4b11      	ldr	r3, [pc, #68]	; (8010dd4 <UTIL_TIMER_Start+0x84>)
 8010d8e:	699b      	ldr	r3, [r3, #24]
 8010d90:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8010d92:	6823      	ldr	r3, [r4, #0]
 8010d94:	4418      	add	r0, r3
 8010d96:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010d98:	4b0f      	ldr	r3, [pc, #60]	; (8010dd8 <UTIL_TIMER_Start+0x88>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	4298      	cmp	r0, r3
 8010da0:	d20c      	bcs.n	8010dbc <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8010da2:	4620      	mov	r0, r4
 8010da4:	f7ff ffc6 	bl	8010d34 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010da8:	f386 8810 	msr	PRIMASK, r6
}
 8010dac:	e00b      	b.n	8010dc6 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8010dae:	4b09      	ldr	r3, [pc, #36]	; (8010dd4 <UTIL_TIMER_Start+0x84>)
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8010db4:	4620      	mov	r0, r4
 8010db6:	f7ff ffbd 	bl	8010d34 <TimerInsertNewHeadTimer>
 8010dba:	e7f5      	b.n	8010da8 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f7ff ffa3 	bl	8010d08 <TimerInsertTimer>
 8010dc2:	e7f1      	b.n	8010da8 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010dc4:	2501      	movs	r5, #1
}
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010dca:	2501      	movs	r5, #1
 8010dcc:	e7fb      	b.n	8010dc6 <UTIL_TIMER_Start+0x76>
 8010dce:	2501      	movs	r5, #1
 8010dd0:	e7f9      	b.n	8010dc6 <UTIL_TIMER_Start+0x76>
 8010dd2:	bf00      	nop
 8010dd4:	080113a4 	.word	0x080113a4
 8010dd8:	20001a44 	.word	0x20001a44

08010ddc <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8010ddc:	b198      	cbz	r0, 8010e06 <UTIL_TIMER_SetPeriod+0x2a>
{
 8010dde:	b510      	push	{r4, lr}
 8010de0:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8010de2:	4b0a      	ldr	r3, [pc, #40]	; (8010e0c <UTIL_TIMER_SetPeriod+0x30>)
 8010de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de6:	4608      	mov	r0, r1
 8010de8:	4798      	blx	r3
 8010dea:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8010dec:	4620      	mov	r0, r4
 8010dee:	f7ff ff2f 	bl	8010c50 <TimerExists>
 8010df2:	b908      	cbnz	r0, 8010df8 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010df4:	2000      	movs	r0, #0
}
 8010df6:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8010df8:	4620      	mov	r0, r4
 8010dfa:	f7ff ff4f 	bl	8010c9c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f7ff ffa6 	bl	8010d50 <UTIL_TIMER_Start>
 8010e04:	e7f7      	b.n	8010df6 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8010e06:	2001      	movs	r0, #1
}
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop
 8010e0c:	080113a4 	.word	0x080113a4

08010e10 <UTIL_TIMER_IRQ_Handler>:
{
 8010e10:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e12:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010e16:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010e18:	4c1e      	ldr	r4, [pc, #120]	; (8010e94 <UTIL_TIMER_IRQ_Handler+0x84>)
 8010e1a:	6963      	ldr	r3, [r4, #20]
 8010e1c:	4798      	blx	r3
 8010e1e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010e20:	6923      	ldr	r3, [r4, #16]
 8010e22:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8010e24:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8010e26:	4b1c      	ldr	r3, [pc, #112]	; (8010e98 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	b923      	cbnz	r3, 8010e36 <UTIL_TIMER_IRQ_Handler+0x26>
 8010e2c:	e018      	b.n	8010e60 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8010e2e:	2200      	movs	r2, #0
 8010e30:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8010e32:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8010e34:	b1a3      	cbz	r3, 8010e60 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	42a2      	cmp	r2, r4
 8010e3a:	d9f8      	bls.n	8010e2e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8010e3c:	1a31      	subs	r1, r6, r0
 8010e3e:	440a      	add	r2, r1
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	e7f6      	b.n	8010e32 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8010e44:	4b14      	ldr	r3, [pc, #80]	; (8010e98 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010e46:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8010e48:	6962      	ldr	r2, [r4, #20]
 8010e4a:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8010e50:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8010e52:	68e3      	ldr	r3, [r4, #12]
 8010e54:	6920      	ldr	r0, [r4, #16]
 8010e56:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8010e58:	8963      	ldrh	r3, [r4, #10]
 8010e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e5e:	d012      	beq.n	8010e86 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8010e60:	4b0d      	ldr	r3, [pc, #52]	; (8010e98 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	b13b      	cbz	r3, 8010e76 <UTIL_TIMER_IRQ_Handler+0x66>
 8010e66:	681c      	ldr	r4, [r3, #0]
 8010e68:	2c00      	cmp	r4, #0
 8010e6a:	d0eb      	beq.n	8010e44 <UTIL_TIMER_IRQ_Handler+0x34>
 8010e6c:	4b09      	ldr	r3, [pc, #36]	; (8010e94 <UTIL_TIMER_IRQ_Handler+0x84>)
 8010e6e:	699b      	ldr	r3, [r3, #24]
 8010e70:	4798      	blx	r3
 8010e72:	4284      	cmp	r4, r0
 8010e74:	d3e6      	bcc.n	8010e44 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8010e76:	4b08      	ldr	r3, [pc, #32]	; (8010e98 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010e78:	6818      	ldr	r0, [r3, #0]
 8010e7a:	b108      	cbz	r0, 8010e80 <UTIL_TIMER_IRQ_Handler+0x70>
 8010e7c:	7a03      	ldrb	r3, [r0, #8]
 8010e7e:	b133      	cbz	r3, 8010e8e <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e80:	f385 8810 	msr	PRIMASK, r5
}
 8010e84:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8010e86:	4620      	mov	r0, r4
 8010e88:	f7ff ff62 	bl	8010d50 <UTIL_TIMER_Start>
 8010e8c:	e7e8      	b.n	8010e60 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8010e8e:	f7ff feed 	bl	8010c6c <TimerSetTimeout>
 8010e92:	e7f5      	b.n	8010e80 <UTIL_TIMER_IRQ_Handler+0x70>
 8010e94:	080113a4 	.word	0x080113a4
 8010e98:	20001a44 	.word	0x20001a44

08010e9c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8010e9c:	4601      	mov	r1, r0
  int i = 0;
 8010e9e:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8010ea0:	e008      	b.n	8010eb4 <ee_skip_atoi+0x18>
 8010ea2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010ea6:	1c53      	adds	r3, r2, #1
 8010ea8:	600b      	str	r3, [r1, #0]
 8010eaa:	7813      	ldrb	r3, [r2, #0]
 8010eac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8010eb0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8010eb4:	680a      	ldr	r2, [r1, #0]
 8010eb6:	7813      	ldrb	r3, [r2, #0]
 8010eb8:	3b30      	subs	r3, #48	; 0x30
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	2b09      	cmp	r3, #9
 8010ebe:	d9f0      	bls.n	8010ea2 <ee_skip_atoi+0x6>
  return i;
}
 8010ec0:	4770      	bx	lr
	...

08010ec4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8010ec4:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8010ec8:	b093      	sub	sp, #76	; 0x4c
 8010eca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010ecc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8010ece:	f016 0f40 	tst.w	r6, #64	; 0x40
 8010ed2:	d110      	bne.n	8010ef6 <ee_number+0x32>
  char *dig = lower_digits;
 8010ed4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8010fd0 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8010ed8:	1e9f      	subs	r7, r3, #2
 8010eda:	2f22      	cmp	r7, #34	; 0x22
 8010edc:	d875      	bhi.n	8010fca <ee_number+0x106>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8010ede:	f016 0401 	ands.w	r4, r6, #1
 8010ee2:	d00b      	beq.n	8010efc <ee_number+0x38>
 8010ee4:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8010ee8:	f016 0f02 	tst.w	r6, #2
 8010eec:	d00f      	beq.n	8010f0e <ee_number+0x4a>
  {
    if (num < 0)
 8010eee:	2a00      	cmp	r2, #0
 8010ef0:	db07      	blt.n	8010f02 <ee_number+0x3e>
  sign = 0;
 8010ef2:	2700      	movs	r7, #0
 8010ef4:	e00c      	b.n	8010f10 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8010ef6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8010fd4 <ee_number+0x110>
 8010efa:	e7ed      	b.n	8010ed8 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8010efc:	f04f 0e20 	mov.w	lr, #32
 8010f00:	e7f2      	b.n	8010ee8 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8010f02:	4252      	negs	r2, r2
      size--;
 8010f04:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010f06:	3e01      	subs	r6, #1
 8010f08:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8010f0a:	272d      	movs	r7, #45	; 0x2d
 8010f0c:	e000      	b.n	8010f10 <ee_number+0x4c>
  sign = 0;
 8010f0e:	2700      	movs	r7, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 8010f10:	bb5a      	cbnz	r2, 8010f6a <ee_number+0xa6>
    tmp[i++] = '0';
 8010f12:	2330      	movs	r3, #48	; 0x30
 8010f14:	f88d 3004 	strb.w	r3, [sp, #4]
 8010f18:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8010f1c:	45ac      	cmp	ip, r5
 8010f1e:	dd00      	ble.n	8010f22 <ee_number+0x5e>
 8010f20:	4665      	mov	r5, ip
  size -= precision;
 8010f22:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010f24:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010f26:	b31c      	cbz	r4, 8010f70 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8010f28:	b11f      	cbz	r7, 8010f32 <ee_number+0x6e>
 8010f2a:	f800 7b01 	strb.w	r7, [r0], #1
 8010f2e:	3901      	subs	r1, #1
 8010f30:	d007      	beq.n	8010f42 <ee_number+0x7e>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010f38:	dd24      	ble.n	8010f84 <ee_number+0xc0>
 8010f3a:	f800 eb01 	strb.w	lr, [r0], #1
 8010f3e:	3901      	subs	r1, #1
 8010f40:	d1f7      	bne.n	8010f32 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8010f42:	b013      	add	sp, #76	; 0x4c
 8010f44:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010f48:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f4c:	fb03 2216 	mls	r2, r3, r6, r2
 8010f50:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8010f54:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8010f58:	446a      	add	r2, sp
 8010f5a:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8010f5e:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010f60:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8010f64:	2a00      	cmp	r2, #0
 8010f66:	d1ef      	bne.n	8010f48 <ee_number+0x84>
 8010f68:	e7d8      	b.n	8010f1c <ee_number+0x58>
  i = 0;
 8010f6a:	f04f 0c00 	mov.w	ip, #0
 8010f6e:	e7f9      	b.n	8010f64 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010f76:	ddd7      	ble.n	8010f28 <ee_number+0x64>
 8010f78:	2220      	movs	r2, #32
 8010f7a:	f800 2b01 	strb.w	r2, [r0], #1
 8010f7e:	3901      	subs	r1, #1
 8010f80:	d1f6      	bne.n	8010f70 <ee_number+0xac>
 8010f82:	e7de      	b.n	8010f42 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8010f84:	4565      	cmp	r5, ip
 8010f86:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8010f8a:	dd05      	ble.n	8010f98 <ee_number+0xd4>
 8010f8c:	2230      	movs	r2, #48	; 0x30
 8010f8e:	f800 2b01 	strb.w	r2, [r0], #1
 8010f92:	3901      	subs	r1, #1
 8010f94:	d1f6      	bne.n	8010f84 <ee_number+0xc0>
 8010f96:	e7d4      	b.n	8010f42 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8010f98:	4662      	mov	r2, ip
 8010f9a:	2a00      	cmp	r2, #0
 8010f9c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8010fa0:	dd09      	ble.n	8010fb6 <ee_number+0xf2>
 8010fa2:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8010fa6:	446a      	add	r2, sp
 8010fa8:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8010fac:	f800 2b01 	strb.w	r2, [r0], #1
 8010fb0:	3901      	subs	r1, #1
 8010fb2:	d1f1      	bne.n	8010f98 <ee_number+0xd4>
 8010fb4:	e7c5      	b.n	8010f42 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010fbc:	ddc1      	ble.n	8010f42 <ee_number+0x7e>
 8010fbe:	2220      	movs	r2, #32
 8010fc0:	f800 2b01 	strb.w	r2, [r0], #1
 8010fc4:	3901      	subs	r1, #1
 8010fc6:	d1f6      	bne.n	8010fb6 <ee_number+0xf2>
 8010fc8:	e7bb      	b.n	8010f42 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8010fca:	2000      	movs	r0, #0
 8010fcc:	e7b9      	b.n	8010f42 <ee_number+0x7e>
 8010fce:	bf00      	nop
 8010fd0:	08011fe8 	.word	0x08011fe8
 8010fd4:	08012010 	.word	0x08012010

08010fd8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8010fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fdc:	b087      	sub	sp, #28
 8010fde:	9205      	str	r2, [sp, #20]
 8010fe0:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8010fe2:	1e0f      	subs	r7, r1, #0
 8010fe4:	f340 80b8 	ble.w	8011158 <tiny_vsnprintf_like+0x180>
 8010fe8:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010fea:	4604      	mov	r4, r0
 8010fec:	e004      	b.n	8010ff8 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 8010fee:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010ff2:	9b05      	ldr	r3, [sp, #20]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	9305      	str	r3, [sp, #20]
 8010ff8:	9905      	ldr	r1, [sp, #20]
 8010ffa:	780a      	ldrb	r2, [r1, #0]
 8010ffc:	b922      	cbnz	r2, 8011008 <tiny_vsnprintf_like+0x30>
 8010ffe:	1ba3      	subs	r3, r4, r6
 8011000:	1e78      	subs	r0, r7, #1
 8011002:	4283      	cmp	r3, r0
 8011004:	f2c0 80a2 	blt.w	801114c <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8011008:	1ba3      	subs	r3, r4, r6
 801100a:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 801100e:	4543      	cmp	r3, r8
 8011010:	f280 809c 	bge.w	801114c <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8011014:	2a25      	cmp	r2, #37	; 0x25
 8011016:	d1ea      	bne.n	8010fee <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8011018:	1c4b      	adds	r3, r1, #1
 801101a:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 801101c:	784b      	ldrb	r3, [r1, #1]
 801101e:	2b30      	cmp	r3, #48	; 0x30
 8011020:	d020      	beq.n	8011064 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8011022:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8011026:	3b30      	subs	r3, #48	; 0x30
 8011028:	b2db      	uxtb	r3, r3
 801102a:	2b09      	cmp	r3, #9
 801102c:	d91d      	bls.n	801106a <tiny_vsnprintf_like+0x92>
    field_width = -1;
 801102e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 8011032:	9b05      	ldr	r3, [sp, #20]
 8011034:	781a      	ldrb	r2, [r3, #0]
 8011036:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 801103a:	2b20      	cmp	r3, #32
 801103c:	d867      	bhi.n	801110e <tiny_vsnprintf_like+0x136>
 801103e:	e8df f003 	tbb	[pc, r3]
 8011042:	664a      	.short	0x664a
 8011044:	66666666 	.word	0x66666666
 8011048:	66666666 	.word	0x66666666
 801104c:	66621e66 	.word	0x66621e66
 8011050:	62666666 	.word	0x62666666
 8011054:	66666666 	.word	0x66666666
 8011058:	66666666 	.word	0x66666666
 801105c:	19662866 	.word	0x19662866
 8011060:	6666      	.short	0x6666
 8011062:	7c          	.byte	0x7c
 8011063:	00          	.byte	0x00
      flags |= ZEROPAD;
 8011064:	f04f 0901 	mov.w	r9, #1
 8011068:	e7dd      	b.n	8011026 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 801106a:	a805      	add	r0, sp, #20
 801106c:	f7ff ff16 	bl	8010e9c <ee_skip_atoi>
 8011070:	4605      	mov	r5, r0
 8011072:	e7de      	b.n	8011032 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8011074:	230a      	movs	r3, #10
 8011076:	e031      	b.n	80110dc <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8011078:	2320      	movs	r3, #32
 801107a:	f804 3b01 	strb.w	r3, [r4], #1
 801107e:	3d01      	subs	r5, #1
 8011080:	2d00      	cmp	r5, #0
 8011082:	dcf9      	bgt.n	8011078 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8011084:	9b04      	ldr	r3, [sp, #16]
 8011086:	1d1a      	adds	r2, r3, #4
 8011088:	9204      	str	r2, [sp, #16]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8011090:	e7af      	b.n	8010ff2 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8011092:	9b04      	ldr	r3, [sp, #16]
 8011094:	1d1a      	adds	r2, r3, #4
 8011096:	9204      	str	r2, [sp, #16]
 8011098:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 801109c:	f1b8 0f00 	cmp.w	r8, #0
 80110a0:	d003      	beq.n	80110aa <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80110a2:	4640      	mov	r0, r8
 80110a4:	f7ef f868 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80110a8:	e006      	b.n	80110b8 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80110aa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801115c <tiny_vsnprintf_like+0x184>
 80110ae:	e7f8      	b.n	80110a2 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80110b0:	2220      	movs	r2, #32
 80110b2:	f804 2b01 	strb.w	r2, [r4], #1
 80110b6:	461d      	mov	r5, r3
 80110b8:	1e6b      	subs	r3, r5, #1
 80110ba:	4285      	cmp	r5, r0
 80110bc:	dcf8      	bgt.n	80110b0 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80110be:	2200      	movs	r2, #0
 80110c0:	e006      	b.n	80110d0 <tiny_vsnprintf_like+0xf8>
 80110c2:	4643      	mov	r3, r8
 80110c4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80110c8:	f804 1b01 	strb.w	r1, [r4], #1
 80110cc:	3201      	adds	r2, #1
 80110ce:	4698      	mov	r8, r3
 80110d0:	4282      	cmp	r2, r0
 80110d2:	dbf6      	blt.n	80110c2 <tiny_vsnprintf_like+0xea>
 80110d4:	e78d      	b.n	8010ff2 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 80110d6:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80110da:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80110dc:	f019 0f02 	tst.w	r9, #2
 80110e0:	d02f      	beq.n	8011142 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80110e2:	9a04      	ldr	r2, [sp, #16]
 80110e4:	1d11      	adds	r1, r2, #4
 80110e6:	9104      	str	r1, [sp, #16]
 80110e8:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80110ea:	1ba1      	subs	r1, r4, r6
 80110ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80110f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110f4:	9001      	str	r0, [sp, #4]
 80110f6:	9500      	str	r5, [sp, #0]
 80110f8:	eba8 0101 	sub.w	r1, r8, r1
 80110fc:	4620      	mov	r0, r4
 80110fe:	f7ff fee1 	bl	8010ec4 <ee_number>
 8011102:	4604      	mov	r4, r0
 8011104:	e775      	b.n	8010ff2 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8011106:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 801110a:	230a      	movs	r3, #10
 801110c:	e7e6      	b.n	80110dc <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 801110e:	2a25      	cmp	r2, #37	; 0x25
 8011110:	d002      	beq.n	8011118 <tiny_vsnprintf_like+0x140>
 8011112:	2325      	movs	r3, #37	; 0x25
 8011114:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011118:	1ba3      	subs	r3, r4, r6
 801111a:	4598      	cmp	r8, r3
 801111c:	dd0f      	ble.n	801113e <tiny_vsnprintf_like+0x166>
        if (*fmt)
 801111e:	9b05      	ldr	r3, [sp, #20]
 8011120:	781a      	ldrb	r2, [r3, #0]
 8011122:	b13a      	cbz	r2, 8011134 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8011124:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011128:	1ba3      	subs	r3, r4, r6
 801112a:	4598      	cmp	r8, r3
 801112c:	f73f af61 	bgt.w	8010ff2 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8011130:	230a      	movs	r3, #10
 8011132:	e7d3      	b.n	80110dc <tiny_vsnprintf_like+0x104>
          --fmt;
 8011134:	3b01      	subs	r3, #1
 8011136:	9305      	str	r3, [sp, #20]
 8011138:	e7f6      	b.n	8011128 <tiny_vsnprintf_like+0x150>
        base = 16;
 801113a:	2310      	movs	r3, #16
 801113c:	e7ce      	b.n	80110dc <tiny_vsnprintf_like+0x104>
    base = 10;
 801113e:	230a      	movs	r3, #10
 8011140:	e7cc      	b.n	80110dc <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8011142:	9a04      	ldr	r2, [sp, #16]
 8011144:	1d11      	adds	r1, r2, #4
 8011146:	9104      	str	r1, [sp, #16]
 8011148:	6812      	ldr	r2, [r2, #0]
 801114a:	e7ce      	b.n	80110ea <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 801114c:	2300      	movs	r3, #0
 801114e:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8011150:	1ba0      	subs	r0, r4, r6
}
 8011152:	b007      	add	sp, #28
 8011154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8011158:	2000      	movs	r0, #0
 801115a:	e7fa      	b.n	8011152 <tiny_vsnprintf_like+0x17a>
 801115c:	08012038 	.word	0x08012038

08011160 <memset>:
 8011160:	4402      	add	r2, r0
 8011162:	4603      	mov	r3, r0
 8011164:	4293      	cmp	r3, r2
 8011166:	d100      	bne.n	801116a <memset+0xa>
 8011168:	4770      	bx	lr
 801116a:	f803 1b01 	strb.w	r1, [r3], #1
 801116e:	e7f9      	b.n	8011164 <memset+0x4>

08011170 <__libc_init_array>:
 8011170:	b570      	push	{r4, r5, r6, lr}
 8011172:	4d0d      	ldr	r5, [pc, #52]	; (80111a8 <__libc_init_array+0x38>)
 8011174:	4c0d      	ldr	r4, [pc, #52]	; (80111ac <__libc_init_array+0x3c>)
 8011176:	1b64      	subs	r4, r4, r5
 8011178:	10a4      	asrs	r4, r4, #2
 801117a:	2600      	movs	r6, #0
 801117c:	42a6      	cmp	r6, r4
 801117e:	d109      	bne.n	8011194 <__libc_init_array+0x24>
 8011180:	4d0b      	ldr	r5, [pc, #44]	; (80111b0 <__libc_init_array+0x40>)
 8011182:	4c0c      	ldr	r4, [pc, #48]	; (80111b4 <__libc_init_array+0x44>)
 8011184:	f000 f898 	bl	80112b8 <_init>
 8011188:	1b64      	subs	r4, r4, r5
 801118a:	10a4      	asrs	r4, r4, #2
 801118c:	2600      	movs	r6, #0
 801118e:	42a6      	cmp	r6, r4
 8011190:	d105      	bne.n	801119e <__libc_init_array+0x2e>
 8011192:	bd70      	pop	{r4, r5, r6, pc}
 8011194:	f855 3b04 	ldr.w	r3, [r5], #4
 8011198:	4798      	blx	r3
 801119a:	3601      	adds	r6, #1
 801119c:	e7ee      	b.n	801117c <__libc_init_array+0xc>
 801119e:	f855 3b04 	ldr.w	r3, [r5], #4
 80111a2:	4798      	blx	r3
 80111a4:	3601      	adds	r6, #1
 80111a6:	e7f2      	b.n	801118e <__libc_init_array+0x1e>
 80111a8:	08012048 	.word	0x08012048
 80111ac:	08012048 	.word	0x08012048
 80111b0:	08012048 	.word	0x08012048
 80111b4:	0801204c 	.word	0x0801204c

080111b8 <floor>:
 80111b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80111bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111c0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80111c4:	2e13      	cmp	r6, #19
 80111c6:	460b      	mov	r3, r1
 80111c8:	4607      	mov	r7, r0
 80111ca:	460c      	mov	r4, r1
 80111cc:	4605      	mov	r5, r0
 80111ce:	dc32      	bgt.n	8011236 <floor+0x7e>
 80111d0:	2e00      	cmp	r6, #0
 80111d2:	da14      	bge.n	80111fe <floor+0x46>
 80111d4:	a334      	add	r3, pc, #208	; (adr r3, 80112a8 <floor+0xf0>)
 80111d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111da:	f7ee ffdb 	bl	8000194 <__adddf3>
 80111de:	2200      	movs	r2, #0
 80111e0:	2300      	movs	r3, #0
 80111e2:	f7ef fa0b 	bl	80005fc <__aeabi_dcmpgt>
 80111e6:	b138      	cbz	r0, 80111f8 <floor+0x40>
 80111e8:	2c00      	cmp	r4, #0
 80111ea:	da56      	bge.n	801129a <floor+0xe2>
 80111ec:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80111f0:	4325      	orrs	r5, r4
 80111f2:	d055      	beq.n	80112a0 <floor+0xe8>
 80111f4:	4c2e      	ldr	r4, [pc, #184]	; (80112b0 <floor+0xf8>)
 80111f6:	2500      	movs	r5, #0
 80111f8:	4623      	mov	r3, r4
 80111fa:	462f      	mov	r7, r5
 80111fc:	e025      	b.n	801124a <floor+0x92>
 80111fe:	4a2d      	ldr	r2, [pc, #180]	; (80112b4 <floor+0xfc>)
 8011200:	fa42 f806 	asr.w	r8, r2, r6
 8011204:	ea01 0208 	and.w	r2, r1, r8
 8011208:	4302      	orrs	r2, r0
 801120a:	d01e      	beq.n	801124a <floor+0x92>
 801120c:	a326      	add	r3, pc, #152	; (adr r3, 80112a8 <floor+0xf0>)
 801120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011212:	f7ee ffbf 	bl	8000194 <__adddf3>
 8011216:	2200      	movs	r2, #0
 8011218:	2300      	movs	r3, #0
 801121a:	f7ef f9ef 	bl	80005fc <__aeabi_dcmpgt>
 801121e:	2800      	cmp	r0, #0
 8011220:	d0ea      	beq.n	80111f8 <floor+0x40>
 8011222:	2c00      	cmp	r4, #0
 8011224:	bfbe      	ittt	lt
 8011226:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801122a:	4133      	asrlt	r3, r6
 801122c:	18e4      	addlt	r4, r4, r3
 801122e:	ea24 0408 	bic.w	r4, r4, r8
 8011232:	2500      	movs	r5, #0
 8011234:	e7e0      	b.n	80111f8 <floor+0x40>
 8011236:	2e33      	cmp	r6, #51	; 0x33
 8011238:	dd0b      	ble.n	8011252 <floor+0x9a>
 801123a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801123e:	d104      	bne.n	801124a <floor+0x92>
 8011240:	4602      	mov	r2, r0
 8011242:	f7ee ffa7 	bl	8000194 <__adddf3>
 8011246:	4607      	mov	r7, r0
 8011248:	460b      	mov	r3, r1
 801124a:	4638      	mov	r0, r7
 801124c:	4619      	mov	r1, r3
 801124e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011252:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011256:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801125a:	fa28 f802 	lsr.w	r8, r8, r2
 801125e:	ea10 0f08 	tst.w	r0, r8
 8011262:	d0f2      	beq.n	801124a <floor+0x92>
 8011264:	a310      	add	r3, pc, #64	; (adr r3, 80112a8 <floor+0xf0>)
 8011266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126a:	f7ee ff93 	bl	8000194 <__adddf3>
 801126e:	2200      	movs	r2, #0
 8011270:	2300      	movs	r3, #0
 8011272:	f7ef f9c3 	bl	80005fc <__aeabi_dcmpgt>
 8011276:	2800      	cmp	r0, #0
 8011278:	d0be      	beq.n	80111f8 <floor+0x40>
 801127a:	2c00      	cmp	r4, #0
 801127c:	da0a      	bge.n	8011294 <floor+0xdc>
 801127e:	2e14      	cmp	r6, #20
 8011280:	d101      	bne.n	8011286 <floor+0xce>
 8011282:	3401      	adds	r4, #1
 8011284:	e006      	b.n	8011294 <floor+0xdc>
 8011286:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801128a:	2301      	movs	r3, #1
 801128c:	40b3      	lsls	r3, r6
 801128e:	441d      	add	r5, r3
 8011290:	42af      	cmp	r7, r5
 8011292:	d8f6      	bhi.n	8011282 <floor+0xca>
 8011294:	ea25 0508 	bic.w	r5, r5, r8
 8011298:	e7ae      	b.n	80111f8 <floor+0x40>
 801129a:	2500      	movs	r5, #0
 801129c:	462c      	mov	r4, r5
 801129e:	e7ab      	b.n	80111f8 <floor+0x40>
 80112a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80112a4:	e7a8      	b.n	80111f8 <floor+0x40>
 80112a6:	bf00      	nop
 80112a8:	8800759c 	.word	0x8800759c
 80112ac:	7e37e43c 	.word	0x7e37e43c
 80112b0:	bff00000 	.word	0xbff00000
 80112b4:	000fffff 	.word	0x000fffff

080112b8 <_init>:
 80112b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ba:	bf00      	nop
 80112bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112be:	bc08      	pop	{r3}
 80112c0:	469e      	mov	lr, r3
 80112c2:	4770      	bx	lr

080112c4 <_fini>:
 80112c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c6:	bf00      	nop
 80112c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ca:	bc08      	pop	{r3}
 80112cc:	469e      	mov	lr, r3
 80112ce:	4770      	bx	lr
